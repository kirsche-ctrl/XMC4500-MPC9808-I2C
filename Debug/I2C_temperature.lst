
I2C_temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b7f4  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  0800b7f4  0c00b7f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0800b7f4  0c00b7f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  4 .data         000008fc  20000000  0c00b7fc  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007b4  200008fc  0c00c0f8  000188fc  2**2
                  ALLOC
  6 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  7 DSRAM2_BSS    00000e00  30000000  0c00c0f8  00020000  2**2
                  ALLOC
  8 .debug_aranges 00000e48  00000000  00000000  00018900  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00021889  00000000  00000000  00019748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003cb3  00000000  00000000  0003afd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006994  00000000  00000000  0003ec84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000042ec  00000000  00000000  00045618  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000096dd  00000000  00000000  00049904  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007676  00000000  00000000  00052fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  0005a657  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000b99  00000000  00000000  0005b2bf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 59 64 00 08     ............Yd..
 80001cc:	49 64 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     Id..............
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	39 46 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     9F..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00b7fc 	.word	0x0c00b7fc
 800024c:	20000000 	.word	0x20000000
 8000250:	000008fc 	.word	0x000008fc
 8000254:	0c00c0f8 	.word	0x0c00c0f8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00b7fc 	.word	0x0c00b7fc
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00b7fc 	.word	0x0c00b7fc
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200008fc 	.word	0x200008fc
 800027c:	000007b0 	.word	0x000007b0
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08007119 	.word	0x08007119
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080066a1 	.word	0x080066a1

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f006 f913 	bl	80064f0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f006 f97b 	bl	80065c4 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f006 f95a 	bl	80065b0 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <XMC_GPIO_Init+0x144>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <XMC_GPIO_Init+0x148>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e042      	b.n	80004ac <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	da3c      	bge.n	80004ac <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	409a      	lsls	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3210      	adds	r2, #16
 8000452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4619      	mov	r1, r3
 8000460:	2307      	movs	r3, #7
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	ea02 0103 	and.w	r1, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f100 0210 	add.w	r2, r0, #16
 8000470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3210      	adds	r2, #16
 8000488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	4619      	mov	r1, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	ea42 0103 	orr.w	r1, r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f100 0210 	add.w	r2, r0, #16
 80004a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	3204      	adds	r2, #4
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	ea42 0103 	orr.w	r1, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1d02      	adds	r2, r0, #4
 80004de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	48028e00 	.word	0x48028e00
 80004f0:	48028f00 	.word	0x48028f00

080004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000ffc0 	.word	0x2000ffc0

0800050c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <XMC_SCU_GetMirrorStatus+0x14>)
 8000512:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	50004000 	.word	0x50004000

08000524 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800052c:	f7ff fed2 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <XMC_SCU_lDelay+0x3c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <XMC_SCU_lDelay+0x40>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	0c9a      	lsrs	r2, r3, #18
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e003      	b.n	8000552 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800054a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3301      	adds	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3f7      	bcc.n	800054a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000ffc0 	.word	0x2000ffc0
 8000564:	431bde83 	.word	0x431bde83

08000568 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800056e:	685b      	ldr	r3, [r3, #4]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	50004074 	.word	0x50004074

08000580 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60d3      	str	r3, [r2, #12]
}
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	50004074 	.word	0x50004074

0800059c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f8db 	bl	8000760 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005aa:	f000 fa85 	bl	8000ab8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	79db      	ldrb	r3, [r3, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00a      	beq.n	80005cc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005b6:	f000 fabd 	bl	8000b34 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005ba:	bf00      	nop
 80005bc:	f000 faa8 	bl	8000b10 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f083 0301 	eor.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f7      	bne.n	80005bc <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f93f 	bl	8000854 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005d6:	bf00      	nop
 80005d8:	f7ff ff98 	bl	800050c <XMC_SCU_GetMirrorStatus>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1fa      	bne.n	80005d8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7a1b      	ldrb	r3, [r3, #8]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fa28 	bl	8000a3c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7c1b      	ldrb	r3, [r3, #16]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f94d 	bl	8000890 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c5b      	ldrb	r3, [r3, #17]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f970 	bl	80008e0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c9b      	ldrb	r3, [r3, #18]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f957 	bl	80008b8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7cdb      	ldrb	r3, [r3, #19]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f97a 	bl	8000908 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00a      	beq.n	8000632 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800061c:	f000 fac2 	bl	8000ba4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000620:	bf00      	nop
 8000622:	f000 fae7 	bl	8000bf4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000626:	4603      	mov	r3, r0
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f7      	bne.n	8000622 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800063a:	f000 faff 	bl	8000c3c <XMC_SCU_CLOCK_DisableSystemPll>
 800063e:	e014      	b.n	800066a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000640:	f000 faec 	bl	8000c1c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	8899      	ldrh	r1, [r3, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000650:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000656:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	4608      	mov	r0, r1
 8000660:	4611      	mov	r1, r2
 8000662:	462a      	mov	r2, r5
 8000664:	4623      	mov	r3, r4
 8000666:	f000 faf9 	bl	8000c5c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000672:	d103      	bne.n	800067c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000674:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000678:	f000 f872 	bl	8000760 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800067c:	f7ff fe2a 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	bf00      	nop

08000688 <XMC_SCU_RESET_AssertPeripheralReset>:
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0f1b      	lsrs	r3, r3, #28
 8000694:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800069c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <XMC_SCU_RESET_AssertPeripheralReset+0x34>)
 80006ac:	4413      	add	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	50004410 	.word	0x50004410

080006c0 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	0f1b      	lsrs	r3, r3, #28
 80006cc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006d4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	4613      	mov	r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006e4:	4413      	add	r3, r2
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	50004414 	.word	0x50004414

080006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	0f1b      	lsrs	r3, r3, #28
 8000704:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800070c:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	461a      	mov	r2, r3
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 800071c:	4413      	add	r3, r2
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4013      	ands	r3, r2
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf14      	ite	ne
 8000728:	2301      	movne	r3, #1
 800072a:	2300      	moveq	r3, #0
 800072c:	b2db      	uxtb	r3, r3
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	5000440c 	.word	0x5000440c

08000740 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000744:	f7ff fed6 	bl	80004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000748:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 800074c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	50004600 	.word	0x50004600

08000760 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	50004600 	.word	0x50004600

08000788 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000790:	4906      	ldr	r1, [pc, #24]	; (80007ac <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	50004600 	.word	0x50004600

080007b0 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	50004600 	.word	0x50004600

080007d8 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d108      	bne.n	80007fa <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007f2:	f023 0301 	bic.w	r3, r3, #1
 80007f6:	60d3      	str	r3, [r2, #12]
 80007f8:	e007      	b.n	800080a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	60d3      	str	r3, [r2, #12]
  }
}
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	50004710 	.word	0x50004710

08000818 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000822:	bf00      	nop
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000826:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f8      	bne.n	8000824 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000832:	4907      	ldr	r1, [pc, #28]	; (8000850 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800083c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800083e:	4313      	orrs	r3, r2
 8000840:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	50004000 	.word	0x50004000
 8000850:	50004300 	.word	0x50004300

08000854 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800085e:	bf00      	nop
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000862:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f8      	bne.n	8000860 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800086e:	4907      	ldr	r1, [pc, #28]	; (800088c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000878:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800087a:	4313      	orrs	r3, r2
 800087c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	50004000 	.word	0x50004000
 800088c:	50004300 	.word	0x50004300

08000890 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004600 	.word	0x50004600

080008b8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008ce:	4313      	orrs	r3, r2
 80008d0:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	50004600 	.word	0x50004600

080008e0 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800091e:	4313      	orrs	r3, r2
 8000920:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	50004600 	.word	0x50004600

08000930 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000938:	4906      	ldr	r1, [pc, #24]	; (8000954 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000946:	4313      	orrs	r3, r2
 8000948:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	50004600 	.word	0x50004600

08000958 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000960:	4906      	ldr	r1, [pc, #24]	; (800097c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800096e:	4313      	orrs	r3, r2
 8000970:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	50004600 	.word	0x50004600

08000980 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000996:	4313      	orrs	r3, r2
 8000998:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	50004600 	.word	0x50004600

080009a8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	6053      	str	r3, [r2, #4]
}
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	50004600 	.word	0x50004600

080009c8 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009ea:	4913      	ldr	r1, [pc, #76]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009f8:	4313      	orrs	r3, r2
 80009fa:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a06:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f023 0310 	bic.w	r3, r3, #16
 8000a12:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a20:	bf00      	nop
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f9      	beq.n	8000a22 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	50004710 	.word	0x50004710

08000a3c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a50:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10e      	bne.n	8000a76 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a62:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	f7ff fd5d 	bl	8000524 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a6a:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a74:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a76:	2064      	movs	r0, #100	; 0x64
 8000a78:	f7ff fd54 	bl	8000524 <XMC_SCU_lDelay>
}
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	50004710 	.word	0x50004710

08000a88 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <XMC_SCU_POWER_EnableUsb+0x14>)
 8000a8e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a92:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	50004200 	.word	0x50004200

08000aa0 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <XMC_SCU_POWER_DisableUsb+0x14>)
 8000aa6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aaa:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	50004200 	.word	0x50004200

08000ab8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d109      	bne.n	8000adc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000ace:	bf00      	nop
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f9      	beq.n	8000ad0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00a      	beq.n	8000afe <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aee:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000af0:	bf00      	nop
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f9      	bne.n	8000af2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	50004200 	.word	0x50004200
 8000b0c:	50004400 	.word	0x50004400

08000b10 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2301      	moveq	r3, #1
 8000b22:	2300      	movne	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	50004300 	.word	0x50004300

08000b34 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b3c:	f7ff fd20 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b4a:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b4c:	bf00      	nop
 8000b4e:	f7ff fd0b 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f8      	beq.n	8000b4e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b60:	f7ff fd0e 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b66:	2208      	movs	r2, #8
 8000b68:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b6a:	bf00      	nop
 8000b6c:	f7ff fcfc 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f8      	beq.n	8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b7e:	f7ff fcff 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b8e:	bf00      	nop
 8000b90:	f7ff fcea 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f8      	beq.n	8000b90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	50004300 	.word	0x50004300

08000ba4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb2:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bb4:	4d0d      	ldr	r5, [pc, #52]	; (8000bec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000bbe:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000bc2:	f005 fcf5 	bl	80065b0 <OSCHP_GetFrequency>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000bca:	fba3 2302 	umull	r2, r3, r3, r2
 8000bce:	0d1b      	lsrs	r3, r3, #20
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bd4:	4323      	orrs	r3, r4
 8000bd6:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000be2:	6053      	str	r3, [r2, #4]
}
 8000be4:	bdb0      	pop	{r4, r5, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	50004710 	.word	0x50004710
 8000bec:	50004700 	.word	0x50004700
 8000bf0:	6b5fca6b 	.word	0x6b5fca6b

08000bf4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c00:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c04:	bf0c      	ite	eq
 8000c06:	2301      	moveq	r3, #1
 8000c08:	2300      	movne	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	50004710 	.word	0x50004710

08000c1c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c20:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2a:	f023 0302 	bic.w	r3, r3, #2
 8000c2e:	6053      	str	r3, [r2, #4]
}
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	50004710 	.word	0x50004710

08000c3c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c40:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	6053      	str	r3, [r2, #4]
}
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	50004710 	.word	0x50004710

08000c5c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60ba      	str	r2, [r7, #8]
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4603      	mov	r3, r0
 8000c68:	81fb      	strh	r3, [r7, #14]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fdb1 	bl	80007d8 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c76:	7b7b      	ldrb	r3, [r7, #13]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	f040 8084 	bne.w	8000d86 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d109      	bne.n	8000c98 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c84:	f005 fc94 	bl	80065b0 <OSCHP_GetFrequency>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c90:	0c9b      	lsrs	r3, r3, #18
 8000c92:	059b      	lsls	r3, r3, #22
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e002      	b.n	8000c9e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c98:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c9c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	fb02 f203 	mul.w	r2, r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	4a42      	ldr	r2, [pc, #264]	; (8000dbc <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	0d9b      	lsrs	r3, r3, #22
 8000cba:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cbc:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cc8:	4a3d      	ldr	r2, [pc, #244]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cd4:	493a      	ldr	r1, [pc, #232]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000cdc:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	0212      	lsls	r2, r2, #8
 8000ce4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cec:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cf8:	4a31      	ldr	r2, [pc, #196]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfa:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d02:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d04:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f023 0310 	bic.w	r3, r3, #16
 8000d0e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d10:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d1c:	bf00      	nop
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f9      	beq.n	8000d1e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d2a:	4a25      	ldr	r2, [pc, #148]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d36:	bf00      	nop
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f9      	bne.n	8000d38 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	095b      	lsrs	r3, r3, #5
 8000d4e:	0d9b      	lsrs	r3, r3, #22
 8000d50:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d52:	6a3a      	ldr	r2, [r7, #32]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d202      	bcs.n	8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d5a:	6938      	ldr	r0, [r7, #16]
 8000d5c:	f000 f838 	bl	8000dd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	085b      	lsrs	r3, r3, #1
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	0d9b      	lsrs	r3, r3, #22
 8000d6e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d70:	6a3a      	ldr	r2, [r7, #32]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d202      	bcs.n	8000d7e <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d78:	6938      	ldr	r0, [r7, #16]
 8000d7a:	f000 f829 	bl	8000dd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d7e:	6a38      	ldr	r0, [r7, #32]
 8000d80:	f000 f826 	bl	8000dd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d84:	e015      	b.n	8000db2 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000da4:	bf00      	nop
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f9      	beq.n	8000da6 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	431bde83 	.word	0x431bde83
 8000dbc:	aaaaaaab 	.word	0xaaaaaaab
 8000dc0:	50004710 	.word	0x50004710
 8000dc4:	f08080ff 	.word	0xf08080ff
 8000dc8:	88888889 	.word	0x88888889
 8000dcc:	b60b60b7 	.word	0xb60b60b7

08000dd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000de8:	4313      	orrs	r3, r2
 8000dea:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000dec:	2032      	movs	r0, #50	; 0x32
 8000dee:	f7ff fb99 	bl	8000524 <XMC_SCU_lDelay>
}
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	50004710 	.word	0x50004710

08000dfc <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3204      	adds	r2, #4
 8000e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	23f8      	movs	r3, #248	; 0xf8
 8000e30:	408b      	lsls	r3, r1
 8000e32:	43db      	mvns	r3, r3
 8000e34:	ea02 0103 	and.w	r1, r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1d02      	adds	r2, r0, #4
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3204      	adds	r2, #4
 8000e54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e58:	78bb      	ldrb	r3, [r7, #2]
 8000e5a:	78f9      	ldrb	r1, [r7, #3]
 8000e5c:	f001 0103 	and.w	r1, r1, #3
 8000e60:	00c9      	lsls	r1, r1, #3
 8000e62:	408b      	lsls	r3, r1
 8000e64:	ea42 0103 	orr.w	r1, r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1d02      	adds	r2, r0, #4
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4619      	mov	r1, r3
 8000e96:	2303      	movs	r3, #3
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000ea6:	78bb      	ldrb	r3, [r7, #2]
 8000ea8:	78f9      	ldrb	r1, [r7, #3]
 8000eaa:	0049      	lsls	r1, r1, #1
 8000eac:	408b      	lsls	r3, r1
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ed2:	b2db      	uxtb	r3, r3
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f001 ffde 	bl	8002ecc <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <XMC_I2C_CH_Init+0x50>)
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	88db      	ldrh	r3, [r3, #6]
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f000 f819 	bl	8000f54 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f000 f830 	bl	8000f94 <XMC_I2C_CH_SetBaudrateEx>
  
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	073f0303 	.word	0x073f0303

08000f54 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8000f66:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8000f6a:	d109      	bne.n	8000f80 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f7e:	e003      	b.n	8000f88 <XMC_I2C_CH_SetSlaveAddress+0x34>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	021a      	lsls	r2, r3, #8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;
   
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d819      	bhi.n	8000fde <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
	  channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	f002 f83e 	bl	8003044 <XMC_USIC_CH_SetBaudrateEx>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	75fb      	strb	r3, [r7, #23]
 8000fcc:	e027      	b.n	800101e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	f001 ffc6 	bl	8002f64 <XMC_USIC_CH_SetBaudrate>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]
 8000fdc:	e01f      	b.n	800101e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }   
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <XMC_I2C_CH_SetBaudrateEx+0x98>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d819      	bhi.n	800101a <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2219      	movs	r2, #25
 8001000:	f002 f820 	bl	8003044 <XMC_USIC_CH_SetBaudrateEx>
 8001004:	4603      	mov	r3, r0
 8001006:	75fb      	strb	r3, [r7, #23]
 8001008:	e009      	b.n	800101e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	2219      	movs	r2, #25
 8001010:	f001 ffa8 	bl	8002f64 <XMC_USIC_CH_SetBaudrate>
 8001014:	4603      	mov	r3, r0
 8001016:	75fb      	strb	r3, [r7, #23]
 8001018:	e001      	b.n	800101e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	75fb      	strb	r3, [r7, #23]
  }
  
  return (XMC_I2C_CH_STATUS_t)status;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	000186a0 	.word	0x000186a0
 800102c:	00061a80 	.word	0x00061a80

08001030 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	b29b      	uxth	r3, r3
 8001048:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800104a:	787b      	ldrb	r3, [r7, #1]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d103      	bne.n	8001058 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800105e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d110      	bne.n	8001088 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001066:	bf00      	nop
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800106e:	4603      	mov	r3, r0
 8001070:	2b80      	cmp	r3, #128	; 0x80
 8001072:	d0f9      	beq.n	8001068 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107a:	f7ff ff31 	bl	8000ee0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001086:	e003      	b.n	8001090 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop

08001098 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80010b2:	787b      	ldrb	r3, [r7, #1]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d103      	bne.n	80010c0 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d110      	bne.n	80010f0 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80010ce:	bf00      	nop
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff fef5 	bl	8000ec0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b80      	cmp	r3, #128	; 0x80
 80010da:	d0f9      	beq.n	80010d0 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	f7ff fefd 	bl	8000ee0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80010ee:	e003      	b.n	80010f8 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop

08001100 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800110e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d111      	bne.n	800113a <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001116:	bf00      	nop
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fed1 	bl	8000ec0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800111e:	4603      	mov	r3, r0
 8001120:	2b80      	cmp	r3, #128	; 0x80
 8001122:	d0f9      	beq.n	8001118 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	f7ff fed9 	bl	8000ee0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001138:	e004      	b.n	8001144 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001140:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop

0800114c <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800115e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d110      	bne.n	8001188 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001166:	bf00      	nop
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fea9 	bl	8000ec0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800116e:	4603      	mov	r3, r0
 8001170:	2b80      	cmp	r3, #128	; 0x80
 8001172:	d0f9      	beq.n	8001168 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	f7ff feb1 	bl	8000ee0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800117e:	78fa      	ldrb	r2, [r7, #3]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001186:	e003      	b.n	8001190 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001188:	78fa      	ldrb	r2, [r7, #3]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop

08001198 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d111      	bne.n	80011d2 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80011ae:	bf00      	nop
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fe85 	bl	8000ec0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b80      	cmp	r3, #128	; 0x80
 80011ba:	d0f9      	beq.n	80011b0 <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c2:	f7ff fe8d 	bl	8000ee0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011d0:	e004      	b.n	80011dc <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop

080011e4 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d111      	bne.n	800121e <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80011fa:	bf00      	nop
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fe5f 	bl	8000ec0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001202:	4603      	mov	r3, r0
 8001204:	2b80      	cmp	r3, #128	; 0x80
 8001206:	d0f9      	beq.n	80011fc <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120e:	f7ff fe67 	bl	8000ee0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800121c:	e004      	b.n	8001228 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001224:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800123e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e003      	b.n	8001256 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001254:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <XMC_I2C_CH_EnableEvent+0x34>)
 8001286:	400b      	ands	r3, r1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	41fc0000 	.word	0x41fc0000

0800129c <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80012b0:	43db      	mvns	r3, r3
 80012b2:	401a      	ands	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <XMC_I2C_CH_DisableEvent+0x38>)
 80012c0:	400b      	ands	r3, r1
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	41fc0000 	.word	0x41fc0000

080012d8 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e01e      	b.n	8001328 <XMC_USBD_lDeviceActive+0x50>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <XMC_USBD_lDeviceActive+0x68>)
 80012ee:	2134      	movs	r1, #52	; 0x34
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10c      	bne.n	800131e <XMC_USBD_lDeviceActive+0x46>
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <XMC_USBD_lDeviceActive+0x68>)
 8001308:	2134      	movs	r1, #52	; 0x34
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	4413      	add	r3, r2
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <XMC_USBD_lDeviceActive+0x4a>
    {
      result = 1U;
 800131e:	2301      	movs	r3, #1
 8001320:	73bb      	strb	r3, [r7, #14]
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	3301      	adds	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7b1b      	ldrb	r3, [r3, #12]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d3db      	bcc.n	80012ea <XMC_USBD_lDeviceActive+0x12>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
    }
  }
  return result;
 8001332:	7bbb      	ldrb	r3, [r7, #14]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200009a4 	.word	0x200009a4

08001344 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8001344:	b480      	push	{r7}
 8001346:	b08b      	sub	sp, #44	; 0x2c
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2234      	movs	r2, #52	; 0x34
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4a34      	ldr	r2, [pc, #208]	; (8001428 <XMC_USBD_lReadFifo+0xe4>)
 8001358:	4413      	add	r3, r2
 800135a:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <XMC_USBD_lReadFifo+0xe4>)
 800135e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001364:	4a30      	ldr	r2, [pc, #192]	; (8001428 <XMC_USBD_lReadFifo+0xe4>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3370      	adds	r3, #112	; 0x70
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d048      	beq.n	800141e <XMC_USBD_lReadFifo+0xda>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	2b00      	cmp	r3, #0
 8001392:	d044      	beq.n	800141e <XMC_USBD_lReadFifo+0xda>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	e00a      	b.n	80013b0 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	601a      	str	r2, [r3, #0]
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	3301      	adds	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3f0      	bcc.n	800139a <XMC_USBD_lReadFifo+0x56>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d022      	beq.n	8001406 <XMC_USBD_lReadFifo+0xc2>
    {
      temp_data = *fifo;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e016      	b.n	80013fa <XMC_USBD_lReadFifo+0xb6>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	0099      	lsls	r1, r3, #2
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	440b      	add	r3, r1
 80013d8:	4413      	add	r3, r2
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	4611      	mov	r1, r2
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	fa02 f101 	lsl.w	r1, r2, r1
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	400a      	ands	r2, r1
 80013ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ec:	00c9      	lsls	r1, r1, #3
 80013ee:	40ca      	lsrs	r2, r1
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	701a      	strb	r2, [r3, #0]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	3301      	adds	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	441a      	add	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3e2      	bcc.n	80013cc <XMC_USBD_lReadFifo+0x88>
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	441a      	add	r2, r3
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	441a      	add	r2, r3
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800141e:	372c      	adds	r7, #44	; 0x2c
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	200009a4 	.word	0x200009a4

0800142c <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4a23      	ldr	r2, [pc, #140]	; (80014cc <XMC_USBD_lWriteFifo+0xa0>)
 8001440:	3378      	adds	r3, #120	; 0x78
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <XMC_USBD_lWriteFifo+0xa0>)
 8001454:	336a      	adds	r3, #106	; 0x6a
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e023      	b.n	80014be <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3303      	adds	r3, #3
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 800147e:	893b      	ldrh	r3, [r7, #8]
 8001480:	461a      	mov	r2, r3
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	429a      	cmp	r2, r3
 8001486:	d204      	bcs.n	8001492 <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e00c      	b.n	80014b2 <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
      i++;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	3301      	adds	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	1d1a      	adds	r2, r3, #4
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3ee      	bcc.n	8001498 <XMC_USBD_lWriteFifo+0x6c>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
      i++;
    }
    result=byte_count;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	617b      	str	r3, [r7, #20]
  }
  return result;
 80014be:	697b      	ldr	r3, [r7, #20]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3724      	adds	r7, #36	; 0x24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	200009a4 	.word	0x200009a4

080014d0 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	019b      	lsls	r3, r3, #6
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <XMC_USBD_lFlushTXFifo+0x80>)
 8001500:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e002      	b.n	8001514 <XMC_USBD_lFlushTXFifo+0x44>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151a:	d3f8      	bcc.n	800150e <XMC_USBD_lFlushTXFifo+0x3e>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <XMC_USBD_lFlushTXFifo+0x80>)
 800151e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	095b      	lsrs	r3, r3, #5
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f3      	bne.n	800151c <XMC_USBD_lFlushTXFifo+0x4c>
    count = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8001538:	bf00      	nop
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	60fa      	str	r2, [r7, #12]
 8001540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001544:	d3f9      	bcc.n	800153a <XMC_USBD_lFlushTXFifo+0x6a>
  {
    /* wait 3 phy clocks */
  }
}
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	200009a4 	.word	0x200009a4

08001554 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <XMC_USBD_lFlushRXFifo+0x64>)
 8001568:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	e002      	b.n	800157c <XMC_USBD_lFlushRXFifo+0x28>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001582:	d3f8      	bcc.n	8001576 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <XMC_USBD_lFlushRXFifo+0x64>)
 8001586:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e9      	bne.n	8001570 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 80015a0:	bf00      	nop
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ac:	d3f9      	bcc.n	80015a2 <XMC_USBD_lFlushRXFifo+0x4e>
  {
    /* wait 3 phy clocks */
  }
}
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	200009a4 	.word	0x200009a4

080015bc <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 80015c2:	2301      	movs	r3, #1
 80015c4:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80015ce:	e005      	b.n	80015dc <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	80fb      	strh	r3, [r7, #6]
    i++;
 80015d6:	797b      	ldrb	r3, [r7, #5]
 80015d8:	3301      	adds	r3, #1
 80015da:	717b      	strb	r3, [r7, #5]
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80015dc:	797b      	ldrb	r3, [r7, #5]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d807      	bhi.n	80015f2 <XMC_USBD_lAssignTXFifo+0x36>
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <XMC_USBD_lAssignTXFifo+0x6c>)
 80015e4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4013      	ands	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ee      	bne.n	80015d0 <XMC_USBD_lAssignTXFifo+0x14>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <XMC_USBD_lAssignTXFifo+0x6c>)
 80015f4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	4013      	ands	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10a      	bne.n	8001618 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001604:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	4313      	orrs	r3, r2
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001610:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8001614:	797b      	ldrb	r3, [r7, #5]
 8001616:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8001618:	793b      	ldrb	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200009a4 	.word	0x200009a4

0800162c <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <XMC_USBD_lUnassignFifo+0x34>)
 8001638:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	b29b      	uxth	r3, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	4013      	ands	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <XMC_USBD_lUnassignFifo+0x34>)
 8001650:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200009a4 	.word	0x200009a4

08001664 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6892      	ldr	r2, [r2, #8]
 800167e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001682:	4293      	cmp	r3, r2
 8001684:	d909      	bls.n	800169a <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6892      	ldr	r2, [r2, #8]
 800168e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001692:	441a      	add	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
 8001698:	e003      	b.n	80016a2 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d119      	bne.n	80016e4 <XMC_USBD_lStartReadXfer+0x80>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	7893      	ldrb	r3, [r2, #2]
 80016ba:	2101      	movs	r1, #1
 80016bc:	f361 03c4 	bfi	r3, r1, #3, #2
 80016c0:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	78d3      	ldrb	r3, [r2, #3]
 80016c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ca:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016d6:	b2d9      	uxtb	r1, r3
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	7813      	ldrb	r3, [r2, #0]
 80016dc:	f361 0306 	bfi	r3, r1, #0, #7
 80016e0:	7013      	strb	r3, [r2, #0]
 80016e2:	e033      	b.n	800174c <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f36f 0312 	bfc	r3, #0, #19
 80016f2:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 80016f4:	8a7b      	ldrh	r3, [r7, #18]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f362 03cc 	bfi	r3, r2, #3, #10
 80016fc:	827b      	strh	r3, [r7, #18]
 80016fe:	e025      	b.n	800174c <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6852      	ldr	r2, [r2, #4]
 800170e:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	4413      	add	r3, r2
 8001716:	3b01      	subs	r3, #1
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6852      	ldr	r2, [r2, #4]
 800171c:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	fbb3 f3f2 	udiv	r3, r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800172c:	b29a      	uxth	r2, r3
 800172e:	8a7b      	ldrh	r3, [r7, #18]
 8001730:	f362 03cc 	bfi	r3, r2, #3, #10
 8001734:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f362 0312 	bfi	r3, r2, #0, #19
 800174a:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <XMC_USBD_lStartReadXfer+0x170>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	7b5b      	ldrb	r3, [r3, #13]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <XMC_USBD_lStartReadXfer+0x174>)
 8001762:	3370      	adds	r3, #112	; 0x70
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800176e:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <XMC_USBD_lStartReadXfer+0x174>)
 800177c:	3370      	adds	r3, #112	; 0x70
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <XMC_USBD_lStartReadXfer+0x174>)
 8001794:	3370      	adds	r3, #112	; 0x70
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ae:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <XMC_USBD_lStartReadXfer+0x174>)
 80017bc:	3370      	adds	r3, #112	; 0x70
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	601a      	str	r2, [r3, #0]
}
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200009a0 	.word	0x200009a0
 80017d8:	200009a4 	.word	0x200009a4

080017dc <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <XMC_USBD_lStartWriteXfer+0x18c>)
 80017f4:	336a      	adds	r3, #106	; 0x6a
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6892      	ldr	r2, [r2, #8]
 800180c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001810:	4293      	cmp	r3, r2
 8001812:	d204      	bcs.n	800181e <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
 800181c:	e008      	b.n	8001830 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6892      	ldr	r2, [r2, #8]
 8001826:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800182a:	441a      	add	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f36f 0312 	bfc	r3, #0, #19
 800183e:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	2201      	movs	r2, #1
 8001844:	f362 03cc 	bfi	r3, r2, #3, #10
 8001848:	81fb      	strh	r3, [r7, #14]
 800184a:	e06a      	b.n	8001922 <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d110      	bne.n	800187c <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	2201      	movs	r2, #1
 800185e:	f362 03cc 	bfi	r3, r2, #3, #10
 8001862:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f362 0312 	bfi	r3, r2, #0, #19
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e02b      	b.n	80018d4 <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f362 0312 	bfi	r3, r2, #0, #19
 8001890:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	b29b      	uxth	r3, r3
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6852      	ldr	r2, [r2, #4]
 80018ba:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 80018be:	b2d2      	uxtb	r2, r2
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80018c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	f362 03cc 	bfi	r3, r2, #3, #10
 80018d2:	81fb      	strh	r3, [r7, #14]
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <XMC_USBD_lStartWriteXfer+0x190>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	7b5b      	ldrb	r3, [r3, #13]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10b      	bne.n	80018f6 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <XMC_USBD_lStartWriteXfer+0x18c>)
 80018ea:	336a      	adds	r3, #106	; 0x6a
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f4:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <XMC_USBD_lStartWriteXfer+0x190>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	7b5b      	ldrb	r3, [r3, #13]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d110      	bne.n	8001922 <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001902:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001908:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800190c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	4610      	mov	r0, r2
 800191a:	2201      	movs	r2, #1
 800191c:	4082      	lsls	r2, r0
 800191e:	430a      	orrs	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <XMC_USBD_lStartWriteXfer+0x18c>)
 800192e:	336a      	adds	r3, #106	; 0x6a
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193e:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001954:	336a      	adds	r3, #106	; 0x6a
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	200009a4 	.word	0x200009a4
 800196c:	200009a0 	.word	0x200009a0

08001970 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001978:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 800197a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 8001982:	7d3b      	ldrb	r3, [r7, #20]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 800198a:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 800198c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	e01a      	b.n	80019d0 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 800199a:	4a47      	ldr	r2, [pc, #284]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	3370      	adds	r3, #112	; 0x70
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 80019aa:	7efb      	ldrb	r3, [r7, #27]
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 80019b2:	7ebb      	ldrb	r3, [r7, #26]
 80019b4:	f36f 1345 	bfc	r3, #5, #1
 80019b8:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 80019ba:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3370      	adds	r3, #112	; 0x70
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	601a      	str	r2, [r3, #0]
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d9e1      	bls.n	800199a <XMC_USBD_lHandleUSBReset+0x2a>
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 80019d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80019dc:	2240      	movs	r2, #64	; 0x40
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 80019e4:	2310      	movs	r3, #16
 80019e6:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 80019e8:	2340      	movs	r3, #64	; 0x40
 80019ea:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 80019ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80019f6:	2301      	movs	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e011      	b.n	8001a20 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 80019fe:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	3204      	adds	r2, #4
 8001a0a:	0192      	lsls	r2, r2, #6
 8001a0c:	0892      	lsrs	r2, r2, #2
 8001a0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a12:	3340      	adds	r3, #64	; 0x40
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	605a      	str	r2, [r3, #4]
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d9ea      	bls.n	80019fc <XMC_USBD_lHandleUSBReset+0x8c>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8001a26:	2010      	movs	r0, #16
 8001a28:	f7ff fd52 	bl	80014d0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fd4f 	bl	80014d0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001a32:	f7ff fd8f 	bl	8001554 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 8001a3a:	7b3b      	ldrb	r3, [r7, #12]
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001a4c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001a54:	200f      	movs	r0, #15
 8001a56:	f000 fbe9 	bl	800222c <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 fbfe 	bl	800225c <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001a62:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	f36f 130a 	bfc	r3, #4, #7
 8001a70:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001a74:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7b5b      	ldrb	r3, [r3, #13]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d104      	bne.n	8001a8e <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001a86:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	f022 0210 	bic.w	r2, r2, #16
 8001a96:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	f022 0208 	bic.w	r2, r2, #8
 8001aa0:	605a      	str	r2, [r3, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa8:	2004      	movs	r0, #4
 8001aaa:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8001aac:	2004      	movs	r0, #4
 8001aae:	f000 fb17 	bl	80020e0 <XMC_USBD_ClearEvent>
}
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200009a4 	.word	0x200009a4

08001abc <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <XMC_USBD_lHandleOTGInt+0x44>)
 8001ac4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8001acc:	793b      	ldrb	r3, [r7, #4]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <XMC_USBD_lHandleOTGInt+0x44>)
 8001ada:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001ade:	f36f 0382 	bfc	r3, #2, #1
 8001ae2:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <XMC_USBD_lHandleOTGInt+0x44>)
 8001ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aec:	2001      	movs	r0, #1
 8001aee:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fb58 	bl	80021a8 <XMC_USBD_lClearEventOTG>

}
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200009a4 	.word	0x200009a4

08001b04 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b0c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	f36f 030a 	bfc	r3, #0, #11
 8001b1a:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b1e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b28:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8001b34:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b36:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b48:	2002      	movs	r0, #2
 8001b4a:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001b56:	787b      	ldrb	r3, [r7, #1]
 8001b58:	2209      	movs	r2, #9
 8001b5a:	f362 0385 	bfi	r3, r2, #2, #4
 8001b5e:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b62:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8001b6a:	200b      	movs	r0, #11
 8001b6c:	f000 fab8 	bl	80020e0 <XMC_USBD_ClearEvent>
}
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200009a4 	.word	0x200009a4

08001b7c <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001b86:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8001b8e:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001b90:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8001b98:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001b9a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8001ba2:	8bfa      	ldrh	r2, [r7, #30]
 8001ba4:	8b7b      	ldrh	r3, [r7, #26]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8001bb4:	e0ae      	b.n	8001d14 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8001bb6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bbc:	fa42 f303 	asr.w	r3, r2, r3
 8001bc0:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 8001bc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8001bca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 809c 	beq.w	8001d0a <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8001bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bd6:	2234      	movs	r2, #52	; 0x34
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001bde:	4413      	add	r3, r2
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001be6:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001be8:	3370      	adds	r3, #112	; 0x70
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7b5b      	ldrb	r3, [r3, #13]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d108      	bne.n	8001c12 <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8001c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c04:	4a4a      	ldr	r2, [pc, #296]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001c06:	3370      	adds	r3, #112	; 0x70
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8001c12:	7c3b      	ldrb	r3, [r7, #16]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d033      	beq.n	8001c86 <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	7913      	ldrb	r3, [r2, #4]
 8001c22:	f36f 1345 	bfc	r3, #5, #1
 8001c26:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b5b      	ldrb	r3, [r3, #13]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	78db      	ldrb	r3, [r3, #3]
 8001c36:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8001c3e:	4613      	mov	r3, r2
 8001c40:	075b      	lsls	r3, r3, #29
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	f103 0218 	add.w	r2, r3, #24
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	611a      	str	r2, [r3, #16]
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7b5b      	ldrb	r3, [r3, #13]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	441a      	add	r2, r3
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	f022 0210 	bic.w	r2, r2, #16
 8001c6c:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8001c6e:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001c70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c74:	2000      	movs	r0, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 8001c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c7e:	2008      	movs	r0, #8
 8001c80:	4619      	mov	r1, r3
 8001c82:	f000 fabb 	bl	80021fc <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8001c86:	7c3b      	ldrb	r3, [r7, #16]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d034      	beq.n	8001cfc <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7b5b      	ldrb	r3, [r3, #13]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	441a      	add	r2, r3
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d111      	bne.n	8001cf6 <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	f022 0210 	bic.w	r2, r2, #16
 8001ce2:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001ce6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001cee:	4610      	mov	r0, r2
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4798      	blx	r3
 8001cf4:	e002      	b.n	8001cfc <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8001cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cf8:	f7ff fcb4 	bl	8001664 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f000 fa79 	bl	80021fc <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8001d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 8001d14:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d1a:	fa42 f303 	asr.w	r3, r2, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f47f af49 	bne.w	8001bb6 <XMC_USBD_lHandleOEPInt+0x3a>
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8001d24:	200d      	movs	r0, #13
 8001d26:	f000 f9db 	bl	80020e0 <XMC_USBD_ClearEvent>
}
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200009a4 	.word	0x200009a4

08001d34 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001d3e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8001d46:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001d48:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8001d54:	8abb      	ldrh	r3, [r7, #20]
 8001d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 8001d5e:	e0b5      	b.n	8001ecc <XMC_USBD_lHandleIEPInt+0x198>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8001d60:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d66:	fa42 f303 	asr.w	r3, r2, r3
 8001d6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 8001d6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8001d74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80a3 	beq.w	8001ec2 <XMC_USBD_lHandleIEPInt+0x18e>
    {
      ep = &xmc_device.ep[ep_num];
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d80:	2234      	movs	r2, #52	; 0x34
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d90:	4a55      	ldr	r2, [pc, #340]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001d92:	336a      	adds	r3, #106	; 0x6a
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001d9c:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001d9e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001db0:	01db      	lsls	r3, r3, #7
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	431a      	orrs	r2, r3
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7b5b      	ldrb	r3, [r3, #13]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <XMC_USBD_lHandleIEPInt+0xa2>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dca:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001dcc:	336a      	adds	r3, #106	; 0x6a
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7b5b      	ldrb	r3, [r3, #13]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d115      	bne.n	8001e0a <XMC_USBD_lHandleIEPInt+0xd6>
      {
        if (diepint.b.emptyintr)
 8001dde:	7b3b      	ldrb	r3, [r7, #12]
 8001de0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00f      	beq.n	8001e0a <XMC_USBD_lHandleIEPInt+0xd6>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8001dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dec:	f7ff fb1e 	bl	800142c <XMC_USBD_lWriteFifo>
 8001df0:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	441a      	add	r2, r3
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	441a      	add	r2, r3
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8001e0a:	7b3b      	ldrb	r3, [r7, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d04e      	beq.n	8001eb4 <XMC_USBD_lHandleIEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b5b      	ldrb	r3, [r3, #13]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11d      	bne.n	8001e5a <XMC_USBD_lHandleIEPInt+0x126>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8001e1e:	897a      	ldrh	r2, [r7, #10]
 8001e20:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8001e24:	4013      	ands	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d116      	bne.n	8001e5a <XMC_USBD_lHandleIEPInt+0x126>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d111      	bne.n	8001e5a <XMC_USBD_lHandleIEPInt+0x126>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	441a      	add	r2, r3
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	441a      	add	r2, r3
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d123      	bne.n	8001eae <XMC_USBD_lHandleIEPInt+0x17a>
        {
          ep->inInUse = 0U;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	f022 0208 	bic.w	r2, r2, #8
 8001e6e:	605a      	str	r2, [r3, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7b5b      	ldrb	r3, [r3, #13]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10e      	bne.n	8001e96 <XMC_USBD_lHandleIEPInt+0x162>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001e7a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8001e7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001e80:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001e84:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001e86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	fa00 f202 	lsl.w	r2, r0, r2
 8001e90:	43d2      	mvns	r2, r2
 8001e92:	400a      	ands	r2, r1
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001e98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ea0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4798      	blx	r3
 8001eac:	e002      	b.n	8001eb4 <XMC_USBD_lHandleIEPInt+0x180>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8001eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eb0:	f7ff fc94 	bl	80017dc <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f000 f987 	bl	80021d0 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8001ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 8001ecc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ed2:	fa42 f303 	asr.w	r3, r2, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f47f af42 	bne.w	8001d60 <XMC_USBD_lHandleIEPInt+0x2c>

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8001edc:	200e      	movs	r0, #14
 8001ede:	f000 f8ff 	bl	80020e0 <XMC_USBD_ClearEvent>
}
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200009a4 	.word	0x200009a4

08001eec <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <XMC_USBD_lHandleRxFLvl+0x7c>)
 8001ef4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d82a      	bhi.n	8001f60 <XMC_USBD_lHandleRxFLvl+0x74>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <XMC_USBD_lHandleRxFLvl+0x24>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f61 	.word	0x08001f61
 8001f14:	08001f29 	.word	0x08001f29
 8001f18:	08001f61 	.word	0x08001f61
 8001f1c:	08001f61 	.word	0x08001f61
 8001f20:	08001f61 	.word	0x08001f61
 8001f24:	08001f45 	.word	0x08001f45
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f28:	793b      	ldrb	r3, [r7, #4]
 8001f2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7ff fa01 	bl	8001344 <XMC_USBD_lReadFifo>
      break;
 8001f42:	e00e      	b.n	8001f62 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f44:	793b      	ldrb	r3, [r7, #4]
 8001f46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7ff f9f3 	bl	8001344 <XMC_USBD_lReadFifo>
      break;
 8001f5e:	e000      	b.n	8001f62 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8001f60:	bf00      	nop
	}
  /* no need to clear */
}
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200009a4 	.word	0x200009a4

08001f6c <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 8001f76:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001f7e:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 8001f80:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8001f8c:	7a3b      	ldrb	r3, [r7, #8]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001f98:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 8001f9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f9e:	2009      	movs	r0, #9
 8001fa0:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8001fa2:	2009      	movs	r0, #9
 8001fa4:	f000 f89c 	bl	80020e0 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7b5b      	ldrb	r3, [r3, #13]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d119      	bne.n	8001fe4 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8001fb0:	7a3b      	ldrb	r3, [r7, #8]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8001fbc:	7b3b      	ldrb	r3, [r7, #12]
 8001fbe:	f36f 1304 	bfc	r3, #4, #1
 8001fc2:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 8001fc6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8001fce:	f7ff ff8d 	bl	8001eec <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8001fd2:	7b3b      	ldrb	r3, [r7, #12]
 8001fd4:	f043 0310 	orr.w	r3, r3, #16
 8001fd8:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001fda:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 8001fdc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f000 f875 	bl	80020e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 8001ff6:	7a7b      	ldrb	r3, [r7, #9]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 8002004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002008:	2006      	movs	r0, #6
 800200a:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 800200c:	2006      	movs	r0, #6
 800200e:	f000 f867 	bl	80020e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8002012:	7afb      	ldrb	r3, [r7, #11]
 8002014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 8002020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002024:	2008      	movs	r0, #8
 8002026:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8002028:	2008      	movs	r0, #8
 800202a:	f000 f859 	bl	80020e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00e      	beq.n	8002058 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 800203c:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <XMC_USBD_IRQHandler+0x148>)
 800204a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800204e:	2000      	movs	r0, #0
 8002050:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f844 	bl	80020e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8002058:	7a7b      	ldrb	r3, [r7, #9]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fc83 	bl	8001970 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 800206a:	7a7b      	ldrb	r3, [r7, #9]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8002076:	f7ff fd45 	bl	8001b04 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 800207a:	7abb      	ldrb	r3, [r7, #10]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe54 	bl	8001d34 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 800208c:	7abb      	ldrb	r3, [r7, #10]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fd6f 	bl	8001b7c <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 800209e:	7a3b      	ldrb	r3, [r7, #8]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 80020aa:	f7ff fd07 	bl	8001abc <XMC_USBD_lHandleOTGInt>
  }

}
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200009a4 	.word	0x200009a4

080020b8 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <XMC_USBD_Enable+0x10>)
 80020be:	f7fe faff 	bl	80006c0 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 80020c2:	f7fe fce1 	bl	8000a88 <XMC_SCU_POWER_EnableUsb>
}
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000080 	.word	0x20000080

080020cc <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <XMC_USBD_Disable+0x10>)
 80020d2:	f7fe fad9 	bl	8000688 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 80020d6:	f7fe fce3 	bl	8000aa0 <XMC_SCU_POWER_DisableUsb>
}
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000080 	.word	0x20000080

080020e0 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  switch(event)
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b0d      	cmp	r3, #13
 80020f2:	d84c      	bhi.n	800218e <XMC_USBD_ClearEvent+0xae>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <XMC_USBD_ClearEvent+0x1c>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	08002135 	.word	0x08002135
 8002100:	0800218f 	.word	0x0800218f
 8002104:	0800218f 	.word	0x0800218f
 8002108:	0800218f 	.word	0x0800218f
 800210c:	0800213f 	.word	0x0800213f
 8002110:	0800218f 	.word	0x0800218f
 8002114:	08002149 	.word	0x08002149
 8002118:	08002153 	.word	0x08002153
 800211c:	0800215d 	.word	0x0800215d
 8002120:	08002167 	.word	0x08002167
 8002124:	08002171 	.word	0x08002171
 8002128:	0800217b 	.word	0x0800217b
 800212c:	0800218f 	.word	0x0800218f
 8002130:	08002185 	.word	0x08002185
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213a:	73fb      	strb	r3, [r7, #15]
	  break;
 800213c:	e028      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 800213e:	7b7b      	ldrb	r3, [r7, #13]
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	737b      	strb	r3, [r7, #13]
	  break;
 8002146:	e023      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	737b      	strb	r3, [r7, #13]
	  break;
 8002150:	e01e      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002158:	73fb      	strb	r3, [r7, #15]
	  break;
 800215a:	e019      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002162:	73fb      	strb	r3, [r7, #15]
	  break;
 8002164:	e014      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8002166:	7b3b      	ldrb	r3, [r7, #12]
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	733b      	strb	r3, [r7, #12]
	  break;
 800216e:	e00f      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8002170:	7b7b      	ldrb	r3, [r7, #13]
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	737b      	strb	r3, [r7, #13]
	  break;
 8002178:	e00a      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 800217a:	7b7b      	ldrb	r3, [r7, #13]
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	737b      	strb	r3, [r7, #13]
	  break;
 8002182:	e005      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	73bb      	strb	r3, [r7, #14]
	  break;
 800218c:	e000      	b.n	8002190 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 800218e:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <XMC_USBD_ClearEvent+0xc4>)
 8002192:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	615a      	str	r2, [r3, #20]
}
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	200009a4 	.word	0x200009a4

080021a8 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <XMC_USBD_lClearEventOTG+0x24>)
 80021ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	605a      	str	r2, [r3, #4]
}
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	200009a4 	.word	0x200009a4

080021d0 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <XMC_USBD_ClearEventINEP+0x28>)
 80021e4:	336a      	adds	r3, #106	; 0x6a
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
}
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	200009a4 	.word	0x200009a4

080021fc <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	4a06      	ldr	r2, [pc, #24]	; (8002228 <XMC_USBD_ClearEventOUTEP+0x2c>)
 8002210:	3370      	adds	r3, #112	; 0x70
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	609a      	str	r2, [r3, #8]
}
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200009a4 	.word	0x200009a4

0800222c <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <XMC_USBD_EnableEventOUTEP+0x2c>)
 800223a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800223e:	4a06      	ldr	r2, [pc, #24]	; (8002258 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8002240:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002244:	6951      	ldr	r1, [r2, #20]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	430a      	orrs	r2, r1
 800224a:	615a      	str	r2, [r3, #20]
}
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	200009a4 	.word	0x200009a4

0800225c <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <XMC_USBD_EnableEventINEP+0x2c>)
 800226a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800226e:	4a06      	ldr	r2, [pc, #24]	; (8002288 <XMC_USBD_EnableEventINEP+0x2c>)
 8002270:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002274:	6911      	ldr	r1, [r2, #16]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	430a      	orrs	r2, r1
 800227a:	611a      	str	r2, [r3, #16]
}
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200009a4 	.word	0x200009a4

0800228c <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8002296:	793b      	ldrb	r3, [r7, #4]
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 800229e:	793b      	ldrb	r3, [r7, #4]
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 80022a6:	793b      	ldrb	r3, [r7, #4]
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 80022b6:	793b      	ldrb	r3, [r7, #4]
 80022b8:	f36f 1345 	bfc	r3, #5, #1
 80022bc:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 80022be:	797b      	ldrb	r3, [r7, #5]
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 80022c6:	793b      	ldrb	r3, [r7, #4]
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 80022ce:	793b      	ldrb	r3, [r7, #4]
 80022d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d4:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 80022d6:	793b      	ldrb	r3, [r7, #4]
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f36f 235f 	bfc	r3, #9, #23
 80022e4:	607b      	str	r3, [r7, #4]
  return cap;
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 80022fc:	f7ff fedc 	bl	80020b8 <XMC_USBD_Enable>
  
  usbd_init = obj;
 8002300:	4a87      	ldr	r2, [pc, #540]	; (8002520 <XMC_USBD_Init+0x22c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	e00c      	b.n	8002326 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 800230c:	4a85      	ldr	r2, [pc, #532]	; (8002524 <XMC_USBD_Init+0x230>)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	2140      	movs	r1, #64	; 0x40
 8002312:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8002316:	4a84      	ldr	r2, [pc, #528]	; (8002528 <XMC_USBD_Init+0x234>)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	2140      	movs	r1, #64	; 0x40
 800231c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  XMC_USBD_Enable();
  
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	3301      	adds	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	2b06      	cmp	r3, #6
 800232a:	d9ef      	bls.n	800230c <XMC_USBD_Init+0x18>
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 800232c:	487f      	ldr	r0, [pc, #508]	; (800252c <XMC_USBD_Init+0x238>)
 800232e:	2100      	movs	r1, #0
 8002330:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002334:	f004 ffb2 	bl	800729c <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a7b      	ldr	r2, [pc, #492]	; (800252c <XMC_USBD_Init+0x238>)
 800233e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <XMC_USBD_Init+0x238>)
 8002348:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	; (800252c <XMC_USBD_Init+0x238>)
 8002358:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002362:	4a72      	ldr	r2, [pc, #456]	; (800252c <XMC_USBD_Init+0x238>)
 8002364:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	e00c      	b.n	8002388 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3348      	adds	r3, #72	; 0x48
 8002372:	015b      	lsls	r3, r3, #5
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	441a      	add	r2, r3
 8002378:	496c      	ldr	r1, [pc, #432]	; (800252c <XMC_USBD_Init+0x238>)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	336a      	adds	r3, #106	; 0x6a
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	3301      	adds	r3, #1
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	2b06      	cmp	r3, #6
 800238c:	d9ef      	bls.n	800236e <XMC_USBD_Init+0x7a>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	e00d      	b.n	80023b0 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	3358      	adds	r3, #88	; 0x58
 8002398:	015b      	lsls	r3, r3, #5
 800239a:	6a3a      	ldr	r2, [r7, #32]
 800239c:	441a      	add	r2, r3
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 800239e:	4963      	ldr	r1, [pc, #396]	; (800252c <XMC_USBD_Init+0x238>)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	3370      	adds	r3, #112	; 0x70
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	3301      	adds	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d9ee      	bls.n	8002394 <XMC_USBD_Init+0xa0>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	e00c      	b.n	80023d6 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	3301      	adds	r3, #1
 80023c0:	031b      	lsls	r3, r3, #12
 80023c2:	6a3a      	ldr	r2, [r7, #32]
 80023c4:	441a      	add	r2, r3
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 80023c6:	4959      	ldr	r1, [pc, #356]	; (800252c <XMC_USBD_Init+0x238>)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	3378      	adds	r3, #120	; 0x78
 80023cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	3301      	adds	r3, #1
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d9ef      	bls.n	80023bc <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <XMC_USBD_Init+0x238>)
 80023de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 80023e6:	7f3b      	ldrb	r3, [r7, #28]
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 80023ee:	7f3b      	ldrb	r3, [r7, #28]
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7b5b      	ldrb	r3, [r3, #13]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d104      	bne.n	8002408 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 80023fe:	7f3b      	ldrb	r3, [r7, #28]
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	773b      	strb	r3, [r7, #28]
 8002406:	e003      	b.n	8002410 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8002408:	7f3b      	ldrb	r3, [r7, #28]
 800240a:	f36f 1345 	bfc	r3, #5, #1
 800240e:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8002410:	4b46      	ldr	r3, [pc, #280]	; (800252c <XMC_USBD_Init+0x238>)
 8002412:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <XMC_USBD_Init+0x238>)
 800241c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8002424:	7efb      	ldrb	r3, [r7, #27]
 8002426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242a:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 800242c:	7e7b      	ldrb	r3, [r7, #25]
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <XMC_USBD_Init+0x238>)
 8002436:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <XMC_USBD_Init+0x238>)
 8002440:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8002448:	7d3b      	ldrb	r3, [r7, #20]
 800244a:	f043 0303 	orr.w	r3, r3, #3
 800244e:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8002450:	7dbb      	ldrb	r3, [r7, #22]
 8002452:	f36f 13c7 	bfc	r3, #7, #1
 8002456:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <XMC_USBD_Init+0x238>)
 800245a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <XMC_USBD_Init+0x238>)
 8002464:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 800246c:	7c3b      	ldrb	r3, [r7, #16]
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <XMC_USBD_Init+0x238>)
 8002476:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 800247e:	2010      	movs	r0, #16
 8002480:	f7ff f826 	bl	80014d0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8002484:	f7ff f866 	bl	8001554 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <XMC_USBD_Init+0x238>)
 800248a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800248e:	2200      	movs	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <XMC_USBD_Init+0x238>)
 8002494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 80024a2:	7b3b      	ldrb	r3, [r7, #12]
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 80024aa:	7b3b      	ldrb	r3, [r7, #12]
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b8:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 80024ba:	7b7b      	ldrb	r3, [r7, #13]
 80024bc:	f043 0310 	orr.w	r3, r3, #16
 80024c0:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 80024c2:	7b7b      	ldrb	r3, [r7, #13]
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 80024d2:	7b7b      	ldrb	r3, [r7, #13]
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 80024e2:	7b3b      	ldrb	r3, [r7, #12]
 80024e4:	f043 0308 	orr.w	r3, r3, #8
 80024e8:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7b5b      	ldrb	r3, [r3, #13]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d103      	bne.n	80024fa <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 80024f2:	7b3b      	ldrb	r3, [r7, #12]
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <XMC_USBD_Init+0x238>)
 800250c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3728      	adds	r7, #40	; 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200009a0 	.word	0x200009a0
 8002524:	200008fc 	.word	0x200008fc
 8002528:	20000918 	.word	0x20000918
 800252c:	200009a4 	.word	0x200009a4

08002530 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <XMC_USBD_Uninitialize+0x38>)
 8002538:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002540:	793b      	ldrb	r3, [r7, #4]
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <XMC_USBD_Uninitialize+0x38>)
 800254a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <XMC_USBD_Uninitialize+0x38>)
 8002554:	2100      	movs	r1, #0
 8002556:	f44f 7202 	mov.w	r2, #520	; 0x208
 800255a:	f004 fe9f 	bl	800729c <memset>
  return XMC_USBD_STATUS_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200009a4 	.word	0x200009a4

0800256c <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <XMC_USBD_DeviceConnect+0x30>)
 8002574:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 800257c:	793b      	ldrb	r3, [r7, #4]
 800257e:	f36f 0341 	bfc	r3, #1, #1
 8002582:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <XMC_USBD_DeviceConnect+0x30>)
 8002586:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	200009a4 	.word	0x200009a4

080025a0 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <XMC_USBD_DeviceDisconnect+0x30>)
 80025a8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80025b0:	793b      	ldrb	r3, [r7, #4]
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <XMC_USBD_DeviceDisconnect+0x30>)
 80025ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	200009a4 	.word	0x200009a4

080025d4 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 80025e0:	7b3b      	ldrb	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f362 03c4 	bfi	r3, r2, #3, #2
 80025e8:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <XMC_USBD_DeviceGetState+0x60>)
 80025ec:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80025f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	f362 0341 	bfi	r3, r2, #1, #1
 80025fc:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fe6a 	bl	80012d8 <XMC_USBD_lDeviceActive>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	7b3b      	ldrb	r3, [r7, #12]
 800260e:	f362 0382 	bfi	r3, r2, #2, #1
 8002612:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <XMC_USBD_DeviceGetState+0x60>)
 8002616:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800261a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	7b3b      	ldrb	r3, [r7, #12]
 8002622:	f362 0300 	bfi	r3, r2, #0, #1
 8002626:	733b      	strb	r3, [r7, #12]
  return state;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200009a4 	.word	0x200009a4

08002638 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	2234      	movs	r2, #52	; 0x34
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <XMC_USBD_EndpointReadStart+0x88>)
 8002652:	4413      	add	r3, r2
 8002654:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <XMC_USBD_EndpointReadStart+0x3c>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	791b      	ldrb	r3, [r3, #4]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <XMC_USBD_EndpointReadStart+0x42>
  {
    result = XMC_USBD_STATUS_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e01c      	b.n	80026b4 <XMC_USBD_EndpointReadStart+0x7c>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d202      	bcs.n	800268a <XMC_USBD_EndpointReadStart+0x52>
    {
      size = ep->outBufferSize;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80026aa:	68b8      	ldr	r0, [r7, #8]
 80026ac:	f7fe ffda 	bl	8001664 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200009a4 	.word	0x200009a4

080026c4 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2234      	movs	r2, #52	; 0x34
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4a17      	ldr	r2, [pc, #92]	; (8002738 <XMC_USBD_EndpointRead+0x74>)
 80026dc:	4413      	add	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d202      	bcs.n	80026f0 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	68b8      	ldr	r0, [r7, #8]
 80026fc:	4619      	mov	r1, r3
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	f004 fd32 	bl	8007168 <memcpy>
  ep->outBytesAvailable -= length;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	441a      	add	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	619a      	str	r2, [r3, #24]
 8002724:	e002      	b.n	800272c <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 800272c:	687b      	ldr	r3, [r7, #4]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200009a4 	.word	0x200009a4

0800273c <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	2234      	movs	r2, #52	; 0x34
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <XMC_USBD_EndpointWrite+0xa4>)
 8002758:	4413      	add	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	791b      	ldrb	r3, [r3, #4]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e031      	b.n	80027d4 <XMC_USBD_EndpointWrite+0x98>
  }
  else if (ep->inInUse == 1U)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	08db      	lsrs	r3, r3, #3
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <XMC_USBD_EndpointWrite+0x4a>
  {
    result=(int32_t)0;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e026      	b.n	80027d4 <XMC_USBD_EndpointWrite+0x98>
  }
  else
  {
    if (length > ep->inBufferSize)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	d202      	bcs.n	8002796 <XMC_USBD_EndpointWrite+0x5a>
    {
      length = ep->inBufferSize;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4618      	mov	r0, r3
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	f004 fce2 	bl	8007168 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2200      	movs	r2, #0
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2200      	movs	r2, #0
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	f042 0208 	orr.w	r2, r2, #8
 80027c6:	605a      	str	r2, [r3, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 80027c8:	6938      	ldr	r0, [r7, #16]
 80027ca:	f7ff f807 	bl	80017dc <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	617b      	str	r3, [r7, #20]
  }
  return result;
 80027d4:	697b      	ldr	r3, [r7, #20]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200009a4 	.word	0x200009a4

080027e4 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <XMC_USBD_DeviceSetAddress+0x48>)
 80027f6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10c      	bne.n	800281e <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800280a:	b2da      	uxtb	r2, r3
 800280c:	89bb      	ldrh	r3, [r7, #12]
 800280e:	f362 130a 	bfi	r3, r2, #4, #7
 8002812:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <XMC_USBD_DeviceSetAddress+0x48>)
 8002816:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	200009a4 	.word	0x200009a4

08002830 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	460a      	mov	r2, r1
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	4613      	mov	r3, r2
 800283e:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	2234      	movs	r2, #52	; 0x34
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	4a4a      	ldr	r2, [pc, #296]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  if (stall)
 8002852:	79bb      	ldrb	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d040      	beq.n	80028da <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	b25b      	sxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	da1a      	bge.n	8002896 <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4a43      	ldr	r2, [pc, #268]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 800286c:	336a      	adds	r3, #106	; 0x6a
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002876:	7abb      	ldrb	r3, [r7, #10]
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 800288a:	336a      	adds	r3, #106	; 0x6a
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e01b      	b.n	80028ce <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4a35      	ldr	r2, [pc, #212]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 80028a2:	3370      	adds	r3, #112	; 0x70
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80028ae:	7abb      	ldrb	r3, [r7, #10]
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 80028c2:	3370      	adds	r3, #112	; 0x70
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	7913      	ldrb	r3, [r2, #4]
 80028d2:	f043 0320 	orr.w	r3, r3, #32
 80028d6:	7113      	strb	r3, [r2, #4]
 80028d8:	e047      	b.n	800296a <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da1e      	bge.n	8002920 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 80028ee:	336a      	adds	r3, #106	; 0x6a
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 80028f8:	7abb      	ldrb	r3, [r7, #10]
 80028fa:	f36f 1345 	bfc	r3, #5, #1
 80028fe:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	f043 0310 	orr.w	r3, r3, #16
 8002906:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 8002914:	336a      	adds	r3, #106	; 0x6a
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e01f      	b.n	8002960 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 800292c:	3370      	adds	r3, #112	; 0x70
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002938:	7abb      	ldrb	r3, [r7, #10]
 800293a:	f36f 1345 	bfc	r3, #5, #1
 800293e:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002940:	7afb      	ldrb	r3, [r7, #11]
 8002942:	f043 0310 	orr.w	r3, r3, #16
 8002946:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <XMC_USBD_EndpointStall+0x148>)
 8002954:	3370      	adds	r3, #112	; 0x70
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	7913      	ldrb	r3, [r2, #4]
 8002964:	f36f 1345 	bfc	r3, #5, #1
 8002968:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	200009a4 	.word	0x200009a4

0800297c <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2234      	movs	r2, #52	; 0x34
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <XMC_USBD_EndpointAbort+0x84>)
 8002994:	4413      	add	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	f022 0208 	bic.w	r2, r2, #8
 80029ae:	605a      	str	r2, [r3, #4]
  }
  if (!ep->address_u.address_st.direction)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	f022 0210 	bic.w	r2, r2, #16
 80029c6:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	7913      	ldrb	r3, [r2, #4]
 80029cc:	f36f 1345 	bfc	r3, #5, #1
 80029d0:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	200009a4 	.word	0x200009a4

08002a04 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	71bb      	strb	r3, [r7, #6]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8002a16:	4b98      	ldr	r3, [pc, #608]	; (8002c78 <XMC_USBD_EndpointConfigure+0x274>)
 8002a18:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	2234      	movs	r2, #52	; 0x34
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	4a92      	ldr	r2, [pc, #584]	; (8002c78 <XMC_USBD_EndpointConfigure+0x274>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	2100      	movs	r1, #0
 8002a36:	2234      	movs	r2, #52	; 0x34
 8002a38:	f004 fc30 	bl	800729c <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	79fa      	ldrb	r2, [r7, #7]
 8002a40:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	7913      	ldrb	r3, [r2, #4]
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8002a4c:	88bb      	ldrh	r3, [r7, #4]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a54:	b2d9      	uxtb	r1, r3
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6853      	ldr	r3, [r2, #4]
 8002a5a:	f361 23d1 	bfi	r3, r1, #11, #7
 8002a5e:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	6893      	ldr	r3, [r2, #8]
 8002a6c:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8002a70:	f361 0312 	bfi	r3, r1, #0, #19
 8002a74:	6093      	str	r3, [r2, #8]
 8002a76:	e005      	b.n	8002a84 <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	6893      	ldr	r3, [r2, #8]
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	f361 0312 	bfi	r3, r1, #0, #19
 8002a82:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <XMC_USBD_EndpointConfigure+0x278>)
 8002a92:	441a      	add	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4a76      	ldr	r2, [pc, #472]	; (8002c80 <XMC_USBD_EndpointConfigure+0x27c>)
 8002aa6:	441a      	add	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b72      	ldr	r3, [pc, #456]	; (8002c84 <XMC_USBD_EndpointConfigure+0x280>)
 8002aba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b6e      	ldr	r3, [pc, #440]	; (8002c88 <XMC_USBD_EndpointConfigure+0x284>)
 8002ad0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <XMC_USBD_EndpointConfigure+0xe8>
 8002ae6:	79bb      	ldrb	r3, [r7, #6]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d17a      	bne.n	8002be2 <XMC_USBD_EndpointConfigure+0x1de>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4a60      	ldr	r2, [pc, #384]	; (8002c78 <XMC_USBD_EndpointConfigure+0x274>)
 8002af8:	336a      	adds	r3, #106	; 0x6a
 8002afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8002b02:	7b7b      	ldrb	r3, [r7, #13]
 8002b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b08:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8002b0a:	79bb      	ldrb	r3, [r7, #6]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	7bbb      	ldrb	r3, [r7, #14]
 8002b14:	f362 0383 	bfi	r3, r2, #2, #2
 8002b18:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002b1a:	79bb      	ldrb	r3, [r7, #6]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d124      	bne.n	8002b6a <XMC_USBD_EndpointConfigure+0x166>
    {
			switch(ep_max_packet_size)
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d014      	beq.n	8002b50 <XMC_USBD_EndpointConfigure+0x14c>
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	dc02      	bgt.n	8002b30 <XMC_USBD_EndpointConfigure+0x12c>
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d016      	beq.n	8002b5c <XMC_USBD_EndpointConfigure+0x158>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8002b2e:	e01b      	b.n	8002b68 <XMC_USBD_EndpointConfigure+0x164>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d007      	beq.n	8002b44 <XMC_USBD_EndpointConfigure+0x140>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d000      	beq.n	8002b3a <XMC_USBD_EndpointConfigure+0x136>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8002b38:	e016      	b.n	8002b68 <XMC_USBD_EndpointConfigure+0x164>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
			{
				case (64U):
				data.b.mps = 0x0U;
 8002b3a:	89bb      	ldrh	r3, [r7, #12]
 8002b3c:	f36f 030a 	bfc	r3, #0, #11
 8002b40:	81bb      	strh	r3, [r7, #12]
				break;
 8002b42:	e011      	b.n	8002b68 <XMC_USBD_EndpointConfigure+0x164>
				case (32U):
				data.b.mps = 0x1U;
 8002b44:	89bb      	ldrh	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f362 030a 	bfi	r3, r2, #0, #11
 8002b4c:	81bb      	strh	r3, [r7, #12]
				break;
 8002b4e:	e00b      	b.n	8002b68 <XMC_USBD_EndpointConfigure+0x164>
				case (16U):
				data.b.mps = 0x2U;
 8002b50:	89bb      	ldrh	r3, [r7, #12]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f362 030a 	bfi	r3, r2, #0, #11
 8002b58:	81bb      	strh	r3, [r7, #12]
				break;
 8002b5a:	e005      	b.n	8002b68 <XMC_USBD_EndpointConfigure+0x164>
				case (8U):
				data.b.mps = 0x3U;
 8002b5c:	89bb      	ldrh	r3, [r7, #12]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	f362 030a 	bfi	r3, r2, #0, #11
 8002b64:	81bb      	strh	r3, [r7, #12]
				break;
 8002b66:	bf00      	nop
 8002b68:	e007      	b.n	8002b7a <XMC_USBD_EndpointConfigure+0x176>
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	89bb      	ldrh	r3, [r7, #12]
 8002b74:	f362 030a 	bfi	r3, r2, #0, #11
 8002b78:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8002b82:	7bbb      	ldrb	r3, [r7, #14]
 8002b84:	f36f 1345 	bfc	r3, #5, #1
 8002b88:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8002b8a:	f7fe fd17 	bl	80015bc <XMC_USBD_lAssignTXFifo>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	b2d9      	uxtb	r1, r3
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	8893      	ldrh	r3, [r2, #4]
 8002b9a:	f361 1389 	bfi	r3, r1, #6, #4
 8002b9e:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	889b      	ldrh	r3, [r3, #4]
 8002ba4:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	f362 1389 	bfi	r3, r2, #6, #4
 8002bb0:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4a2e      	ldr	r2, [pc, #184]	; (8002c78 <XMC_USBD_EndpointConfigure+0x274>)
 8002bbe:	336a      	adds	r3, #106	; 0x6a
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8002bc8:	8a3a      	ldrh	r2, [r7, #16]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	408b      	lsls	r3, r1
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <XMC_USBD_EndpointConfigure+0x1f2>
 8002bf0:	79bb      	ldrb	r3, [r7, #6]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d173      	bne.n	8002cde <XMC_USBD_EndpointConfigure+0x2da>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <XMC_USBD_EndpointConfigure+0x274>)
 8002c02:	3370      	adds	r3, #112	; 0x70
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8002c0e:	7a7b      	ldrb	r3, [r7, #9]
 8002c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c14:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8002c16:	79bb      	ldrb	r3, [r7, #6]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	7abb      	ldrb	r3, [r7, #10]
 8002c20:	f362 0383 	bfi	r3, r2, #2, #2
 8002c24:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d12f      	bne.n	8002c8c <XMC_USBD_EndpointConfigure+0x288>
		{
			switch(ep_max_packet_size)
 8002c2c:	88bb      	ldrh	r3, [r7, #4]
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d014      	beq.n	8002c5c <XMC_USBD_EndpointConfigure+0x258>
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	dc02      	bgt.n	8002c3c <XMC_USBD_EndpointConfigure+0x238>
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d016      	beq.n	8002c68 <XMC_USBD_EndpointConfigure+0x264>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8002c3a:	e01b      	b.n	8002c74 <XMC_USBD_EndpointConfigure+0x270>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d007      	beq.n	8002c50 <XMC_USBD_EndpointConfigure+0x24c>
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d000      	beq.n	8002c46 <XMC_USBD_EndpointConfigure+0x242>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8002c44:	e016      	b.n	8002c74 <XMC_USBD_EndpointConfigure+0x270>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
			{
				case (64U):
					data.b.mps = 0x0U;
 8002c46:	893b      	ldrh	r3, [r7, #8]
 8002c48:	f36f 030a 	bfc	r3, #0, #11
 8002c4c:	813b      	strh	r3, [r7, #8]
					break;
 8002c4e:	e011      	b.n	8002c74 <XMC_USBD_EndpointConfigure+0x270>
				case (32U):
					data.b.mps = 0x1U;
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f362 030a 	bfi	r3, r2, #0, #11
 8002c58:	813b      	strh	r3, [r7, #8]
					break;
 8002c5a:	e00b      	b.n	8002c74 <XMC_USBD_EndpointConfigure+0x270>
				case (16U):
					data.b.mps = 0x2U;
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f362 030a 	bfi	r3, r2, #0, #11
 8002c64:	813b      	strh	r3, [r7, #8]
					break;
 8002c66:	e005      	b.n	8002c74 <XMC_USBD_EndpointConfigure+0x270>
				case (8U):
					data.b.mps = 0x3U;
 8002c68:	893b      	ldrh	r3, [r7, #8]
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	f362 030a 	bfi	r3, r2, #0, #11
 8002c70:	813b      	strh	r3, [r7, #8]
					break;
 8002c72:	bf00      	nop
 8002c74:	e012      	b.n	8002c9c <XMC_USBD_EndpointConfigure+0x298>
 8002c76:	bf00      	nop
 8002c78:	200009a4 	.word	0x200009a4
 8002c7c:	30000700 	.word	0x30000700
 8002c80:	30000000 	.word	0x30000000
 8002c84:	20000918 	.word	0x20000918
 8002c88:	200008fc 	.word	0x200008fc
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8002c8c:	88bb      	ldrh	r3, [r7, #4]
 8002c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	893b      	ldrh	r3, [r7, #8]
 8002c96:	f362 030a 	bfi	r3, r2, #0, #11
 8002c9a:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8002c9c:	7afb      	ldrb	r3, [r7, #11]
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8002ca4:	7abb      	ldrb	r3, [r7, #10]
 8002ca6:	f36f 1345 	bfc	r3, #5, #1
 8002caa:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <XMC_USBD_EndpointConfigure+0x2f0>)
 8002cb8:	3370      	adds	r3, #112	; 0x70
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8002cc4:	8a7a      	ldrh	r2, [r7, #18]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <XMC_USBD_EndpointConfigure+0x2f0>)
 8002ce0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200009a4 	.word	0x200009a4

08002cf8 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	2234      	movs	r2, #52	; 0x34
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a54      	ldr	r2, [pc, #336]	; (8002e60 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002d10:	4413      	add	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8002d18:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002d1a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4093      	lsls	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	791b      	ldrb	r3, [r3, #4]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	e085      	b.n	8002e54 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8002d48:	7c7b      	ldrb	r3, [r7, #17]
 8002d4a:	f36f 13c7 	bfc	r3, #7, #1
 8002d4e:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d56:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	f043 0308 	orr.w	r3, r3, #8
 8002d5e:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8002d60:	7cbb      	ldrb	r3, [r7, #18]
 8002d62:	f36f 1345 	bfc	r3, #5, #1
 8002d66:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	7913      	ldrb	r3, [r2, #4]
 8002d6c:	f36f 0382 	bfc	r3, #2, #1
 8002d70:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	7913      	ldrb	r3, [r2, #4]
 8002d76:	f36f 1345 	bfc	r3, #5, #1
 8002d7a:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	f022 0210 	bic.w	r2, r2, #16
 8002d84:	605a      	str	r2, [r3, #4]
    ep->inInUse =  0U;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	f022 0208 	bic.w	r2, r2, #8
 8002d8e:	605a      	str	r2, [r3, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <XMC_USBD_EndpointUnconfigure+0xb4>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	791b      	ldrb	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d112      	bne.n	8002dd2 <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002db8:	336a      	adds	r3, #106	; 0x6a
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8002dc2:	89ba      	ldrh	r2, [r7, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <XMC_USBD_EndpointUnconfigure+0xf6>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	791b      	ldrb	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d123      	bne.n	8002e36 <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002dfa:	3370      	adds	r3, #112	; 0x70
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8002e06:	89fa      	ldrh	r2, [r7, #14]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4013      	ands	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <XMC_USBD_EndpointUnconfigure+0x16c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	7b5b      	ldrb	r3, [r3, #13]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d10a      	bne.n	8002e36 <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002e22:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002e28:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002e2c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	43d2      	mvns	r2, r2
 8002e32:	400a      	ands	r2, r1
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002e38:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	889b      	ldrh	r3, [r3, #4]
 8002e44:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fbee 	bl	800162c <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8002e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200009a4 	.word	0x200009a4
 8002e64:	200009a0 	.word	0x200009a0

08002e68 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <XMC_USBD_GetFrameNumber+0x28>)
 8002e70:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	80fb      	strh	r3, [r7, #6]
  return result;
 8002e82:	88fb      	ldrh	r3, [r7, #6]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	200009a4 	.word	0x200009a4

08002e94 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <XMC_USBD_IsEnumDone+0x34>)
 8002e9a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <XMC_USBD_IsEnumDone+0x28>
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <XMC_USBD_IsEnumDone+0x34>)
 8002eaa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <XMC_USBD_IsEnumDone+0x28>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <XMC_USBD_IsEnumDone+0x2a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	200009a4 	.word	0x200009a4

08002ecc <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <XMC_USIC_CH_Enable+0x74>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <XMC_USIC_CH_Enable+0x18>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <XMC_USIC_CH_Enable+0x78>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8002ee4:	4818      	ldr	r0, [pc, #96]	; (8002f48 <XMC_USIC_CH_Enable+0x7c>)
 8002ee6:	f000 f9f9 	bl	80032dc <XMC_USIC_Enable>
 8002eea:	e016      	b.n	8002f1a <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <XMC_USIC_CH_Enable+0x80>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <XMC_USIC_CH_Enable+0x30>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <XMC_USIC_CH_Enable+0x84>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8002efc:	4815      	ldr	r0, [pc, #84]	; (8002f54 <XMC_USIC_CH_Enable+0x88>)
 8002efe:	f000 f9ed 	bl	80032dc <XMC_USIC_Enable>
 8002f02:	e00a      	b.n	8002f1a <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <XMC_USIC_CH_Enable+0x8c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <XMC_USIC_CH_Enable+0x48>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <XMC_USIC_CH_Enable+0x90>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d102      	bne.n	8002f1a <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8002f14:	4812      	ldr	r0, [pc, #72]	; (8002f60 <XMC_USIC_CH_Enable+0x94>)
 8002f16:	f000 f9e1 	bl	80032dc <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8002f20:	bf00      	nop
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f9      	beq.n	8002f22 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f023 020f 	bic.w	r2, r3, #15
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40030000 	.word	0x40030000
 8002f44:	40030200 	.word	0x40030200
 8002f48:	40030008 	.word	0x40030008
 8002f4c:	48020000 	.word	0x48020000
 8002f50:	48020200 	.word	0x48020200
 8002f54:	48020008 	.word	0x48020008
 8002f58:	48024000 	.word	0x48024000
 8002f5c:	48024200 	.word	0x48024200
 8002f60:	48024008 	.word	0x48024008

08002f64 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	; 0x38
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b63      	cmp	r3, #99	; 0x63
 8002f74:	d958      	bls.n	8003028 <XMC_USIC_CH_SetBaudrate+0xc4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d055      	beq.n	8003028 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8002f7c:	f7fd fbe0 	bl	8000740 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002f84:	fba3 2302 	umull	r2, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	; (800303c <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8002fa0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002fa6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
 8002fac:	e022      	b.n	8002ff4 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb2:	fb02 f203 	mul.w	r2, r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd0:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd8:	d209      	bcs.n	8002fee <XMC_USIC_CH_SetBaudrate+0x8a>
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d205      	bcs.n	8002fee <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1d9      	bne.n	8002fae <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <XMC_USIC_CH_SetBaudrate+0xdc>)
 800300a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	3a01      	subs	r2, #1
 8003010:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8003012:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800301a:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003026:	e002      	b.n	800302e <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800302e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003032:	4618      	mov	r0, r3
 8003034:	3738      	adds	r7, #56	; 0x38
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	51eb851f 	.word	0x51eb851f
 8003040:	fc0080ef 	.word	0xfc0080ef

08003044 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	; 0x30
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8003050:	f7fd fb76 	bl	8000740 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8003054:	4603      	mov	r3, r0
 8003056:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	429a      	cmp	r2, r3
 800306c:	dd5f      	ble.n	800312e <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	fb92 f3f3 	sdiv	r3, r2, r3
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8003078:	e010      	b.n	800309c <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	3301      	adds	r3, #1
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	461a      	mov	r2, r3
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	fb03 f302 	mul.w	r3, r3, r2
 8003090:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	fb92 f3f3 	sdiv	r3, r2, r3
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d8e9      	bhi.n	800307a <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80030a6:	6a3a      	ldr	r2, [r7, #32]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	3301      	adds	r3, #1
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80030de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1acb      	subs	r3, r1, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bfb8      	it	lt
 80030ec:	425b      	neglt	r3, r3
 80030ee:	429a      	cmp	r2, r3
 80030f0:	da02      	bge.n	80030f8 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	3301      	adds	r3, #1
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8003110:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	3a01      	subs	r2, #1
 8003116:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8003118:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	3b01      	subs	r3, #1
 800311e:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8003120:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800312c:	e002      	b.n	8003134 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8003134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003138:	4618      	mov	r0, r3
 800313a:	3730      	adds	r7, #48	; 0x30
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	fc0080ef 	.word	0xfc0080ef

08003144 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800315a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 800316c:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	0211      	lsls	r1, r2, #8
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8003176:	79fa      	ldrb	r2, [r7, #7]
 8003178:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800317a:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 800317c:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	f8ffc0c0 	.word	0xf8ffc0c0

08003194 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80031aa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80031bc:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	0211      	lsls	r1, r2, #8
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80031c6:	79fa      	ldrb	r2, [r7, #7]
 80031c8:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80031ca:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	efffc0c0 	.word	0xefffc0c0

080031e8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	460b      	mov	r3, r1
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80031fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800320c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8003214:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800321a:	431a      	orrs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	460b      	mov	r3, r1
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	2107      	movs	r1, #7
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop

08003264 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	460b      	mov	r3, r1
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	2107      	movs	r1, #7
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	460b      	mov	r3, r1
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80032b4:	7afb      	ldrb	r3, [r7, #11]
 80032b6:	2107      	movs	r1, #7
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80032c0:	7afb      	ldrb	r3, [r7, #11]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop

080032dc <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <XMC_USIC_Enable+0x6c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <XMC_USIC_Enable+0x2a>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80032ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032f0:	f7fd f9e6 	bl	80006c0 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 80032f4:	bf00      	nop
 80032f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032fa:	f7fd f9fd 	bl	80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f8      	bne.n	80032f6 <XMC_USIC_Enable+0x1a>
 8003304:	e01c      	b.n	8003340 <XMC_USIC_Enable+0x64>
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a10      	ldr	r2, [pc, #64]	; (800334c <XMC_USIC_Enable+0x70>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d10a      	bne.n	8003324 <XMC_USIC_Enable+0x48>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800330e:	4810      	ldr	r0, [pc, #64]	; (8003350 <XMC_USIC_Enable+0x74>)
 8003310:	f7fd f9d6 	bl	80006c0 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8003314:	bf00      	nop
 8003316:	480e      	ldr	r0, [pc, #56]	; (8003350 <XMC_USIC_Enable+0x74>)
 8003318:	f7fd f9ee 	bl	80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f9      	bne.n	8003316 <XMC_USIC_Enable+0x3a>
 8003322:	e00d      	b.n	8003340 <XMC_USIC_Enable+0x64>
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <XMC_USIC_Enable+0x78>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d109      	bne.n	8003340 <XMC_USIC_Enable+0x64>
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800332c:	480a      	ldr	r0, [pc, #40]	; (8003358 <XMC_USIC_Enable+0x7c>)
 800332e:	f7fd f9c7 	bl	80006c0 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8003332:	bf00      	nop
 8003334:	4808      	ldr	r0, [pc, #32]	; (8003358 <XMC_USIC_Enable+0x7c>)
 8003336:	f7fd f9df 	bl	80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f9      	bne.n	8003334 <XMC_USIC_Enable+0x58>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40030008 	.word	0x40030008
 800334c:	48020008 	.word	0x48020008
 8003350:	10000080 	.word	0x10000080
 8003354:	48024008 	.word	0x48024008
 8003358:	10000100 	.word	0x10000100

0800335c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <_sbrk+0x5c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <_sbrk+0x5c>)
 800336e:	4a13      	ldr	r2, [pc, #76]	; (80033bc <_sbrk+0x60>)
 8003370:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <_sbrk+0x5c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3303      	adds	r3, #3
 800337c:	f023 0303 	bic.w	r3, r3, #3
 8003380:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <_sbrk+0x5c>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <_sbrk+0x64>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d207      	bcs.n	80033a0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <_sbrk+0x5c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <_sbrk+0x5c>)
 800339a:	6013      	str	r3, [r2, #0]
    return (base);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	e006      	b.n	80033ae <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80033a0:	f003 feb4 	bl	800710c <__errno>
 80033a4:	4602      	mov	r2, r0
 80033a6:	230c      	movs	r3, #12
 80033a8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000934 	.word	0x20000934
 80033bc:	200010b0 	.word	0x200010b0
 80033c0:	2000ffc0 	.word	0x2000ffc0

080033c4 <_init>:

/* Init */
void _init(void)
{}
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <USBD_VCOM_Event_GetDescriptor>:
 *   host.
 */
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	603a      	str	r2, [r7, #0]
 80033da:	80fb      	strh	r3, [r7, #6]
 80033dc:	460b      	mov	r3, r1
 80033de:	80bb      	strh	r3, [r7, #4]
	const uint8_t  descriptor_type   = (w_value >> 8);
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	727b      	strb	r3, [r7, #9]
	const uint8_t  descriptor_number = (w_value & 0xFF);
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	723b      	strb	r3, [r7, #8]
	const void* address = NULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
	uint16_t    size    = NO_DESCRIPTOR;
 80033f0:	2300      	movs	r3, #0
 80033f2:	817b      	strh	r3, [r7, #10]

	switch (descriptor_type)
 80033f4:	7a7b      	ldrb	r3, [r7, #9]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d008      	beq.n	800340c <USBD_VCOM_Event_GetDescriptor+0x3c>
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d00b      	beq.n	8003416 <USBD_VCOM_Event_GetDescriptor+0x46>
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d121      	bne.n	8003446 <USBD_VCOM_Event_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			address = &device_descriptor;
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <USBD_VCOM_Event_GetDescriptor+0x8c>)
 8003404:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Device_t);
 8003406:	2312      	movs	r3, #18
 8003408:	817b      	strh	r3, [r7, #10]
			break;
 800340a:	e01c      	b.n	8003446 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 800340c:	4b14      	ldr	r3, [pc, #80]	; (8003460 <USBD_VCOM_Event_GetDescriptor+0x90>)
 800340e:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Configuration_t);
 8003410:	233e      	movs	r3, #62	; 0x3e
 8003412:	817b      	strh	r3, [r7, #10]
			break;
 8003414:	e017      	b.n	8003446 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_String:
			switch (descriptor_number)
 8003416:	7a3b      	ldrb	r3, [r7, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d009      	beq.n	8003430 <USBD_VCOM_Event_GetDescriptor+0x60>
 800341c:	2b02      	cmp	r3, #2
 800341e:	d00c      	beq.n	800343a <USBD_VCOM_Event_GetDescriptor+0x6a>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d000      	beq.n	8003426 <USBD_VCOM_Event_GetDescriptor+0x56>
				case 0x02:
					address = &product_string;
					size    = product_string.Header.Size;
					break;
			}
			break;
 8003424:	e00e      	b.n	8003444 <USBD_VCOM_Event_GetDescriptor+0x74>
			break;
		case DTYPE_String:
			switch (descriptor_number)
			{
				case 0x00:
					address = &language_string;
 8003426:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <USBD_VCOM_Event_GetDescriptor+0x94>)
 8003428:	60fb      	str	r3, [r7, #12]
					size    = language_string.Header.Size;
 800342a:	2304      	movs	r3, #4
 800342c:	817b      	strh	r3, [r7, #10]
					break;
 800342e:	e009      	b.n	8003444 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x01:
					address = &manufacturer_string;
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <USBD_VCOM_Event_GetDescriptor+0x98>)
 8003432:	60fb      	str	r3, [r7, #12]
					size    = manufacturer_string.Header.Size;
 8003434:	2312      	movs	r3, #18
 8003436:	817b      	strh	r3, [r7, #10]
					break;
 8003438:	e004      	b.n	8003444 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x02:
					address = &product_string;
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <USBD_VCOM_Event_GetDescriptor+0x9c>)
 800343c:	60fb      	str	r3, [r7, #12]
					size    = product_string.Header.Size;
 800343e:	2310      	movs	r3, #16
 8003440:	817b      	strh	r3, [r7, #10]
					break;
 8003442:	bf00      	nop
			}
			break;
 8003444:	bf00      	nop
	}

	(void)w_index;
	*descriptor_address = address;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]
	return size;
 800344c:	897b      	ldrh	r3, [r7, #10]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	0800b430 	.word	0x0800b430
 8003460:	0800b444 	.word	0x0800b444
 8003464:	0800b484 	.word	0x0800b484
 8003468:	0800b4ec 	.word	0x0800b4ec
 800346c:	0800b554 	.word	0x0800b554

08003470 <Endpoint_SelectEndpoint>:
	 *
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <Endpoint_SelectEndpoint+0x30>)
 8003484:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800348e:	b2da      	uxtb	r2, r3
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <Endpoint_SelectEndpoint+0x30>)
 8003492:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	20000e9c 	.word	0x20000e9c

080034a4 <Endpoint_IsSETUPReceived>:
	 *  \return Boolean \c true if the selected endpoint has received a SETUP
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
		return device.IsSetupRecieved;
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <Endpoint_IsSETUPReceived+0x28>)
 80034aa:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
	}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20000e9c 	.word	0x20000e9c

080034d0 <Endpoint_ClearSETUP>:
	 *
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
		device.IsSetupRecieved = 0;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <Endpoint_ClearSETUP+0x1c>)
 80034d6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80034da:	f022 0202 	bic.w	r2, r2, #2
 80034de:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	}
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000e9c 	.word	0x20000e9c

080034f0 <Endpoint_ClearStatusStage>:
	/** Nothing done in this function
	 *
	 */
	static inline void Endpoint_ClearStatusStage(void);
	static inline void Endpoint_ClearStatusStage(void)
	{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

	}
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003502:	4b13      	ldr	r3, [pc, #76]	; (8003550 <Endpoint_IsINReady+0x54>)
 8003504:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003508:	461a      	mov	r2, r3
 800350a:	232c      	movs	r3, #44	; 0x2c
 800350c:	fb03 f302 	mul.w	r3, r3, r2
 8003510:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <Endpoint_IsINReady+0x54>)
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <Endpoint_IsINReady+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <Endpoint_IsINReady+0x40>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <Endpoint_IsINReady+0x42>
 800353c:	2300      	movs	r3, #0
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
	}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000e9c 	.word	0x20000e9c

08003554 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <Endpoint_IsOUTReceived+0x40>)
 800355c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003560:	461a      	mov	r2, r3
 8003562:	232c      	movs	r3, #44	; 0x2c
 8003564:	fb03 f302 	mul.w	r3, r3, r2
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <Endpoint_IsOUTReceived+0x40>)
 800356a:	4413      	add	r3, r2
 800356c:	3304      	adds	r3, #4
 800356e:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
	}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000e9c 	.word	0x20000e9c

08003598 <Endpoint_BytesInEndpoint>:
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO
	 *  buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <Endpoint_BytesInEndpoint+0x44>)
 80035a0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80035a4:	461a      	mov	r2, r3
 80035a6:	232c      	movs	r3, #44	; 0x2c
 80035a8:	fb03 f302 	mul.w	r3, r3, r2
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <Endpoint_BytesInEndpoint+0x44>)
 80035ae:	4413      	add	r3, r2
 80035b0:	3304      	adds	r3, #4
 80035b2:	607b      	str	r3, [r7, #4]
		if (ep->Direction)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <Endpoint_BytesInEndpoint+0x32>
			return (uint16_t)(ep->InBytesAvailable);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	e002      	b.n	80035d0 <Endpoint_BytesInEndpoint+0x38>
		else
			return (uint16_t)(ep->OutBytesAvailable);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	b29b      	uxth	r3, r3
	}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	20000e9c 	.word	0x20000e9c

080035e0 <CDC_Device_ProcessControlRequest>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 80035e8:	f7ff ff5c 	bl	80034a4 <Endpoint_IsSETUPReceived>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80ae 	beq.w	8003750 <CDC_Device_ProcessControlRequest+0x170>
 80035f4:	4b58      	ldr	r3, [pc, #352]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 80035f6:	889b      	ldrh	r3, [r3, #4]
 80035f8:	b29a      	uxth	r2, r3
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7c9b      	ldrb	r3, [r3, #18]
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 80035fe:	b29b      	uxth	r3, r3
 8003600:	429a      	cmp	r2, r3
 8003602:	f040 80a5 	bne.w	8003750 <CDC_Device_ProcessControlRequest+0x170>
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 8003606:	4b54      	ldr	r3, [pc, #336]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3b20      	subs	r3, #32
 800360e:	2b03      	cmp	r3, #3
 8003610:	f200 809e 	bhi.w	8003750 <CDC_Device_ProcessControlRequest+0x170>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <CDC_Device_ProcessControlRequest+0x3c>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	08003681 	.word	0x08003681
 8003620:	0800362d 	.word	0x0800362d
 8003624:	080036f3 	.word	0x080036f3
 8003628:	08003723 	.word	0x08003723
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 800362c:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2ba1      	cmp	r3, #161	; 0xa1
 8003634:	d123      	bne.n	800367e <CDC_Device_ProcessControlRequest+0x9e>
				{
					Endpoint_ClearSETUP();
 8003636:	f7ff ff4b 	bl	80034d0 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsINReady()));
 800363a:	bf00      	nop
 800363c:	f7ff ff5e 	bl	80034fc <Endpoint_IsINReady>
 8003640:	4603      	mov	r3, r0
 8003642:	f083 0301 	eor.w	r3, r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f7      	bne.n	800363c <CDC_Device_ProcessControlRequest+0x5c>

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd31 	bl	80040b8 <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7f1b      	ldrb	r3, [r3, #28]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fcc0 	bl	8003fe0 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7f5b      	ldrb	r3, [r3, #29]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fcbb 	bl	8003fe0 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7f9b      	ldrb	r3, [r3, #30]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fcb6 	bl	8003fe0 <Endpoint_Write_8>

					Endpoint_ClearIN();
 8003674:	f000 fc30 	bl	8003ed8 <Endpoint_ClearIN>
					Endpoint_ClearStatusStage();
 8003678:	f7ff ff3a 	bl	80034f0 <Endpoint_ClearStatusStage>
				}

				break;
 800367c:	e068      	b.n	8003750 <CDC_Device_ProcessControlRequest+0x170>
 800367e:	e067      	b.n	8003750 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b21      	cmp	r3, #33	; 0x21
 8003688:	d132      	bne.n	80036f0 <CDC_Device_ProcessControlRequest+0x110>
				{
					Endpoint_ClearSETUP();
 800368a:	f7ff ff21 	bl	80034d0 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsOUTReceived()))
 800368e:	e005      	b.n	800369c <CDC_Device_ProcessControlRequest+0xbc>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <CDC_Device_ProcessControlRequest+0x17c>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d100      	bne.n	800369c <CDC_Device_ProcessControlRequest+0xbc>
						  return;
 800369a:	e059      	b.n	8003750 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 800369c:	f7ff ff5a 	bl	8003554 <Endpoint_IsOUTReceived>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f083 0301 	eor.w	r3, r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f1      	bne.n	8003690 <CDC_Device_ProcessControlRequest+0xb0>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 80036ac:	f000 fd38 	bl	8004120 <Endpoint_Read_32_LE>
 80036b0:	4602      	mov	r2, r0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 80036b6:	f000 fcc7 	bl	8004048 <Endpoint_Read_8>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	771a      	strb	r2, [r3, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80036c2:	f000 fcc1 	bl	8004048 <Endpoint_Read_8>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	775a      	strb	r2, [r3, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80036ce:	f000 fcbb 	bl	8004048 <Endpoint_Read_8>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	779a      	strb	r2, [r3, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();
 80036da:	f7ff ff09 	bl	80034f0 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.LineEncodingChanged)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <CDC_Device_ProcessControlRequest+0x180>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <CDC_Device_ProcessControlRequest+0x110>
					{
						cdc_class_events.LineEncodingChanged(CDCInterfaceInfo);
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <CDC_Device_ProcessControlRequest+0x180>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
					}

				}

				break;
 80036ee:	e02f      	b.n	8003750 <CDC_Device_ProcessControlRequest+0x170>
 80036f0:	e02e      	b.n	8003750 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 80036f2:	4b19      	ldr	r3, [pc, #100]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b21      	cmp	r3, #33	; 0x21
 80036fa:	d111      	bne.n	8003720 <CDC_Device_ProcessControlRequest+0x140>
				{
					Endpoint_ClearSETUP();
 80036fc:	f7ff fee8 	bl	80034d0 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8003700:	f7ff fef6 	bl	80034f0 <Endpoint_ClearStatusStage>

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 8003706:	885b      	ldrh	r3, [r3, #2]
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	829a      	strh	r2, [r3, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <CDC_Device_ProcessControlRequest+0x180>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <CDC_Device_ProcessControlRequest+0x140>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <CDC_Device_ProcessControlRequest+0x180>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
					}

				}

				break;
 800371e:	e017      	b.n	8003750 <CDC_Device_ProcessControlRequest+0x170>
 8003720:	e016      	b.n	8003750 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b21      	cmp	r3, #33	; 0x21
 800372a:	d110      	bne.n	800374e <CDC_Device_ProcessControlRequest+0x16e>
				{
					Endpoint_ClearSETUP();
 800372c:	f7ff fed0 	bl	80034d0 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8003730:	f7ff fede 	bl	80034f0 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.Device_BreakSent)
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <CDC_Device_ProcessControlRequest+0x180>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <CDC_Device_ProcessControlRequest+0x16e>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 800373c:	4b08      	ldr	r3, [pc, #32]	; (8003760 <CDC_Device_ProcessControlRequest+0x180>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a05      	ldr	r2, [pc, #20]	; (8003758 <CDC_Device_ProcessControlRequest+0x178>)
 8003742:	8852      	ldrh	r2, [r2, #2]
 8003744:	b292      	uxth	r2, r2
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4611      	mov	r1, r2
 800374c:	4798      	blx	r3
					}

				}

				break;
 800374e:	bf00      	nop
		}
	}
}
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000c94 	.word	0x20000c94
 800375c:	20000c91 	.word	0x20000c91
 8003760:	20000028 	.word	0x20000028

08003764 <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	bool status = true;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3314      	adds	r3, #20
 8003774:	4618      	mov	r0, r3
 8003776:	2100      	movs	r1, #0
 8003778:	220c      	movs	r2, #12
 800377a:	f003 fd8f 	bl	800729c <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	711a      	strb	r2, [r3, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	729a      	strb	r2, [r3, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	741a      	strb	r2, [r3, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	2101      	movs	r1, #1
 8003796:	f000 fcfb 	bl	8004190 <Endpoint_ConfigureEndpointTable>
 800379a:	4603      	mov	r3, r0
 800379c:	f083 0301 	eor.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <CDC_Device_ConfigureEndpoints+0x46>
	{
		status = false;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3306      	adds	r3, #6
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80037ae:	4618      	mov	r0, r3
 80037b0:	2101      	movs	r1, #1
 80037b2:	f000 fced 	bl	8004190 <Endpoint_ConfigureEndpointTable>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f083 0301 	eor.w	r3, r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <CDC_Device_ConfigureEndpoints+0x62>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	330c      	adds	r3, #12
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80037ca:	4618      	mov	r0, r3
 80037cc:	2101      	movs	r1, #1
 80037ce:	f000 fcdf 	bl	8004190 <Endpoint_ConfigureEndpointTable>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <CDC_Device_ConfigureEndpoints+0x7e>
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	{
		status = false;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <CDC_Device_USBTask+0x3c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d110      	bne.n	8003820 <CDC_Device_USBTask+0x34>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <CDC_Device_USBTask+0x34>
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fe30 	bl	8003470 <Endpoint_SelectEndpoint>

		if (Endpoint_IsINReady())
 8003810:	f7ff fe74 	bl	80034fc <Endpoint_IsINReady>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <CDC_Device_USBTask+0x34>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f832 	bl	8003884 <CDC_Device_Flush>
		}
		#endif
	}
}
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000c91 	.word	0x20000c91

0800382c <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const char* const String)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <CDC_Device_SendString+0x54>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b04      	cmp	r3, #4
 8003842:	d115      	bne.n	8003870 <CDC_Device_SendString+0x44>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d011      	beq.n	8003870 <CDC_Device_SendString+0x44>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fe0d 	bl	8003470 <Endpoint_SelectEndpoint>
		status = Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f003 fd94 	bl	8007384 <strlen>
 800385c:	4603      	mov	r3, r0
 800385e:	b29b      	uxth	r3, r3
 8003860:	6838      	ldr	r0, [r7, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	2200      	movs	r2, #0
 8003866:	f000 f995 	bl	8003b94 <Endpoint_Write_Stream_LE>
 800386a:	4603      	mov	r3, r0
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e001      	b.n	8003874 <CDC_Device_SendString+0x48>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003870:	2302      	movs	r3, #2
 8003872:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000c91 	.word	0x20000c91

08003884 <CDC_Device_Flush>:
	return status;

}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <CDC_Device_Flush+0x4c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b04      	cmp	r3, #4
 8003898:	d112      	bne.n	80038c0 <CDC_Device_Flush+0x3c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00e      	beq.n	80038c0 <CDC_Device_Flush+0x3c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fde2 	bl	8003470 <Endpoint_SelectEndpoint>

		if (Endpoint_BytesInEndpoint())
 80038ac:	f7ff fe74 	bl	8003598 <Endpoint_BytesInEndpoint>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <CDC_Device_Flush+0x36>
		{
			Endpoint_ClearIN();
 80038b6:	f000 fb0f 	bl	8003ed8 <Endpoint_ClearIN>
		}

		status = ENDPOINT_READYWAIT_NoError;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e001      	b.n	80038c4 <CDC_Device_Flush+0x40>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 80038c0:	2302      	movs	r3, #2
 80038c2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000c91 	.word	0x20000c91

080038d4 <USBD_VCOM_Init>:
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 80038e0:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <USBD_VCOM_Init+0x8c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	749a      	strb	r2, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <USBD_VCOM_Init+0x8c>)
 80038e8:	2282      	movs	r2, #130	; 0x82
 80038ea:	701a      	strb	r2, [r3, #0]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 80038ec:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <USBD_VCOM_Init+0x8c>)
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	805a      	strh	r2, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <USBD_VCOM_Init+0x8c>)
 80038f4:	2202      	movs	r2, #2
 80038f6:	711a      	strb	r2, [r3, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <USBD_VCOM_Init+0x8c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	715a      	strb	r2, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <USBD_VCOM_Init+0x8c>)
 8003900:	2203      	movs	r2, #3
 8003902:	719a      	strb	r2, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <USBD_VCOM_Init+0x8c>)
 8003906:	2240      	movs	r2, #64	; 0x40
 8003908:	811a      	strh	r2, [r3, #8]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <USBD_VCOM_Init+0x8c>)
 800390c:	2202      	movs	r2, #2
 800390e:	729a      	strb	r2, [r3, #10]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <USBD_VCOM_Init+0x8c>)
 8003912:	2200      	movs	r2, #0
 8003914:	72da      	strb	r2, [r3, #11]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <USBD_VCOM_Init+0x8c>)
 8003918:	2281      	movs	r2, #129	; 0x81
 800391a:	731a      	strb	r2, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <USBD_VCOM_Init+0x8c>)
 800391e:	2208      	movs	r2, #8
 8003920:	81da      	strh	r2, [r3, #14]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <USBD_VCOM_Init+0x8c>)
 8003924:	2203      	movs	r2, #3
 8003926:	741a      	strb	r2, [r3, #16]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <USBD_VCOM_Init+0x8c>)
 800392a:	2200      	movs	r2, #0
 800392c:	745a      	strb	r2, [r3, #17]

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 800392e:	480d      	ldr	r0, [pc, #52]	; (8003964 <USBD_VCOM_Init+0x90>)
 8003930:	f000 f854 	bl	80039dc <USBD_VCOM_Register_USBEvent_CB>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <USBD_VCOM_Init+0x7c>
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <USBD_VCOM_Init+0x94>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fd94 	bl	800446c <USBD_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <USBD_VCOM_Init+0x80>
    {
      status = USBD_VCOM_STATUS_FAILURE;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	e001      	b.n	8003954 <USBD_VCOM_Init+0x80>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000c70 	.word	0x20000c70
 8003964:	20000000 	.word	0x20000000
 8003968:	2000004c 	.word	0x2000004c

0800396c <USBD_VCOM_IsEnumDone>:

/*The function check if the enumeration has been done already. */
uint32_t USBD_VCOM_IsEnumDone(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
 8003970:	f000 fe1a 	bl	80045a8 <USBD_IsEnumDone>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <USBD_VCOM_IsEnumDone+0x1c>
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <USBD_VCOM_IsEnumDone+0x24>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b04      	cmp	r3, #4
 8003982:	d101      	bne.n	8003988 <USBD_VCOM_IsEnumDone+0x1c>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <USBD_VCOM_IsEnumDone+0x1e>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000c91 	.word	0x20000c91

08003994 <USBD_VCOM_SendString>:
  return status;
}

/* This function sends string data to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendString(const int8_t* const data_string)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]

  if (data_string != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d011      	beq.n	80039ca <USBD_VCOM_SendString+0x36>
  {
    /* Send string to the host */
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError != CDC_Device_SendString(&USBD_VCOM_cdc_interface, (const char*)data_string))
 80039a6:	480c      	ldr	r0, [pc, #48]	; (80039d8 <USBD_VCOM_SendString+0x44>)
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	f7ff ff3f 	bl	800382c <CDC_Device_SendString>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <USBD_VCOM_SendString+0x24>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80039b4:	2306      	movs	r3, #6
 80039b6:	73fb      	strb	r3, [r7, #15]
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 80039b8:	4807      	ldr	r0, [pc, #28]	; (80039d8 <USBD_VCOM_SendString+0x44>)
 80039ba:	f7ff ff63 	bl	8003884 <CDC_Device_Flush>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <USBD_VCOM_SendString+0x3a>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80039c4:	2306      	movs	r3, #6
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e001      	b.n	80039ce <USBD_VCOM_SendString+0x3a>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 80039ca:	2306      	movs	r3, #6
 80039cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000c70 	.word	0x20000c70

080039dc <USBD_VCOM_Register_USBEvent_CB>:
/**
 * Register the USB event call backs.
 * Call this API before calling USBD_Init
 **/
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73fb      	strb	r3, [r7, #15]

  /*Register USB event call backs*/
  if (event_callback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d03c      	beq.n	8003a68 <USBD_VCOM_Register_USBEvent_CB+0x8c>
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6912      	ldr	r2, [r2, #16]
 80039f8:	611a      	str	r2, [r3, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6892      	ldr	r2, [r2, #8]
 8003a04:	609a      	str	r2, [r3, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	601a      	str	r2, [r3, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68d2      	ldr	r2, [r2, #12]
 8003a1c:	60da      	str	r2, [r3, #12]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6852      	ldr	r2, [r2, #4]
 8003a28:	605a      	str	r2, [r3, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6952      	ldr	r2, [r2, #20]
 8003a34:	615a      	str	r2, [r3, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	69d2      	ldr	r2, [r2, #28]
 8003a40:	61da      	str	r2, [r3, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6992      	ldr	r2, [r2, #24]
 8003a4c:	619a      	str	r2, [r3, #24]
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6a12      	ldr	r2, [r2, #32]
 8003a58:	621a      	str	r2, [r3, #32]
    USBD_handle->event_cb->reset = event_callback->reset;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
 8003a66:	e001      	b.n	8003a6c <USBD_VCOM_Register_USBEvent_CB+0x90>
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]

}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	2000004c 	.word	0x2000004c

08003a80 <USBD_VCOM_Event_ConfigurationChanged>:

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 8003a84:	2081      	movs	r0, #129	; 0x81
 8003a86:	490f      	ldr	r1, [pc, #60]	; (8003ac4 <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	f000 fd99 	bl	80045c0 <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8003a8e:	2082      	movs	r0, #130	; 0x82
 8003a90:	490d      	ldr	r1, [pc, #52]	; (8003ac8 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	f000 fd94 	bl	80045c0 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8003a98:	2003      	movs	r0, #3
 8003a9a:	490c      	ldr	r1, [pc, #48]	; (8003acc <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 8003a9c:	2240      	movs	r2, #64	; 0x40
 8003a9e:	f000 fd8f 	bl	80045c0 <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 8003aa2:	480b      	ldr	r0, [pc, #44]	; (8003ad0 <USBD_VCOM_Event_ConfigurationChanged+0x50>)
 8003aa4:	f7ff fe5e 	bl	8003764 <CDC_Device_ConfigureEndpoints>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <USBD_VCOM_Event_ConfigurationChanged+0x42>
  {
    device.IsConfigured = 1U;
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <USBD_VCOM_Event_ConfigurationChanged+0x54>)
 8003ab0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <USBD_VCOM_Event_ConfigurationChanged+0x58>)
 8003abe:	2204      	movs	r2, #4
 8003ac0:	701a      	strb	r2, [r3, #0]
  }
}
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000bf0 	.word	0x20000bf0
 8003ac8:	20000bac 	.word	0x20000bac
 8003acc:	20000c30 	.word	0x20000c30
 8003ad0:	20000c70 	.word	0x20000c70
 8003ad4:	20000e9c 	.word	0x20000e9c
 8003ad8:	20000c91 	.word	0x20000c91

08003adc <USBD_VCOM_Event_ControlRequest>:

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 8003ae0:	4801      	ldr	r0, [pc, #4]	; (8003ae8 <USBD_VCOM_Event_ControlRequest+0xc>)
 8003ae2:	f7ff fd7d 	bl	80035e0 <CDC_Device_ProcessControlRequest>
}
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000c70 	.word	0x20000c70

08003aec <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <USBD_VCOM_Event_Reset+0x38>)
 8003af2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <USBD_VCOM_Event_Reset+0x36>
  {
    device.IsConfigured = 0U;
 8003b00:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <USBD_VCOM_Event_Reset+0x38>)
 8003b02:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003b06:	f36f 0300 	bfc	r3, #0, #1
 8003b0a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Init(USBD_VCOM_handle))
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <USBD_VCOM_Event_Reset+0x3c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fede 	bl	80038d4 <USBD_VCOM_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <USBD_VCOM_Event_Reset+0x36>
    {
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 8003b1e:	f000 f831 	bl	8003b84 <USBD_VCOM_Connect>
      {
      }
    }
  }
}
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000e9c 	.word	0x20000e9c
 8003b28:	20000034 	.word	0x20000034

08003b2c <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
/*CDC class driver event for a line encoding change on a CDC interface. This event fires each time the host
 * requests a line encoding change (containing the serial parity, baud and other configuration information). The new
 * line encoding settings are available in the LineEncoding structure inside the CDC interface structure passed
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x18>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
  (void)cdc_interface_info;

}
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	20000bec 	.word	0x20000bec

08003b48 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
/*CDC class driver event for a control line state change on a CDC interface. This event fires
 * each time the host requests a control line state change (containing the virtual serial control
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x18>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	705a      	strb	r2, [r3, #1]
  (void)cdc_interface_info;

}
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	20000bec 	.word	0x20000bec

08003b64 <USBD_VCOM_CDCClass_Event_BreakSent>:

/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <USBD_VCOM_CDCClass_Event_BreakSent+0x1c>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	709a      	strb	r2, [r3, #2]
  (void)cdc_interface_info;
  (void)duration;

}
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000bec 	.word	0x20000bec

08003b84 <USBD_VCOM_Connect>:

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 8003b88:	f000 fd02 	bl	8004590 <USBD_Connect>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop

08003b94 <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <Endpoint_Write_Stream_LE+0x108>)
 8003ba4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ba8:	461a      	mov	r2, r3
 8003baa:	232c      	movs	r3, #44	; 0x2c
 8003bac:	fb03 f302 	mul.w	r3, r3, r2
 8003bb0:	4a3a      	ldr	r2, [pc, #232]	; (8003c9c <Endpoint_Write_Stream_LE+0x108>)
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	83fb      	strh	r3, [r7, #30]
	uint16_t BytesTransfered = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	83bb      	strh	r3, [r7, #28]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <Endpoint_Write_Stream_LE+0x42>
	{
		Length -= *BytesProcessed;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	897a      	ldrh	r2, [r7, #10]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	83bb      	strh	r3, [r7, #28]
	}

	while (Length) 
 8003bd6:	e058      	b.n	8003c8a <Endpoint_Write_Stream_LE+0xf6>
	{
		if (ep->InInUse)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d000      	beq.n	8003bea <Endpoint_Write_Stream_LE+0x56>
		{
			continue;
 8003be8:	e04f      	b.n	8003c8a <Endpoint_Write_Stream_LE+0xf6>
		}
		if (Endpoint_IsReadWriteAllowed()) 
 8003bea:	f000 f9c7 	bl	8003f7c <Endpoint_IsReadWriteAllowed>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02f      	beq.n	8003c54 <Endpoint_Write_Stream_LE+0xc0>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	1ad2      	subs	r2, r2, r3
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d902      	bls.n	8003c0a <Endpoint_Write_Stream_LE+0x76>
			{
				Bytes = Length;
 8003c04:	897b      	ldrh	r3, [r7, #10]
 8003c06:	83fb      	strh	r3, [r7, #30]
 8003c08:	e007      	b.n	8003c1a <Endpoint_Write_Stream_LE+0x86>
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	18d1      	adds	r1, r2, r3
 8003c24:	8bbb      	ldrh	r3, [r7, #28]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	441a      	add	r2, r3
 8003c2a:	8bfb      	ldrh	r3, [r7, #30]
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	f003 fa99 	bl	8007168 <memcpy>
			ep->InBytesAvailable += Bytes;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	8bfb      	ldrh	r3, [r7, #30]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8003c42:	8bba      	ldrh	r2, [r7, #28]
 8003c44:	8bfb      	ldrh	r3, [r7, #30]
 8003c46:	4413      	add	r3, r2
 8003c48:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8003c4a:	897a      	ldrh	r2, [r7, #10]
 8003c4c:	8bfb      	ldrh	r3, [r7, #30]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	817b      	strh	r3, [r7, #10]
 8003c52:	e01a      	b.n	8003c8a <Endpoint_Write_Stream_LE+0xf6>
		}
		else 
		{
			Endpoint_ClearIN();
 8003c54:	f000 f940 	bl	8003ed8 <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 8003c58:	897b      	ldrh	r3, [r7, #10]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	8892      	ldrh	r2, [r2, #4]
 8003c5e:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	4293      	cmp	r3, r2
 8003c66:	da07      	bge.n	8003c78 <Endpoint_Write_Stream_LE+0xe4>
			{
				if (BytesProcessed!=NULL) 
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <Endpoint_Write_Stream_LE+0xe4>
				{
					*BytesProcessed = BytesTransfered;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8bba      	ldrh	r2, [r7, #28]
 8003c72:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003c74:	2305      	movs	r3, #5
 8003c76:	e00c      	b.n	8003c92 <Endpoint_Write_Stream_LE+0xfe>
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 8003c78:	f000 f8e6 	bl	8003e48 <Endpoint_WaitUntilReady>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]
			if (ErrorCode) 
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <Endpoint_Write_Stream_LE+0xf6>
			{
				return ErrorCode;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	e003      	b.n	8003c92 <Endpoint_Write_Stream_LE+0xfe>
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1a3      	bne.n	8003bd8 <Endpoint_Write_Stream_LE+0x44>
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000e9c 	.word	0x20000e9c

08003ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	db0b      	blt.n	8003cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb2:	4908      	ldr	r1, [pc, #32]	; (8003cd4 <__NVIC_EnableIRQ+0x34>)
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	79fa      	ldrb	r2, [r7, #7]
 8003cbc:	f002 021f 	and.w	r2, r2, #31
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	db10      	blt.n	8003d0c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cea:	490b      	ldr	r1, [pc, #44]	; (8003d18 <__NVIC_DisableIRQ+0x40>)
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	79fa      	ldrb	r2, [r7, #7]
 8003cf4:	f002 021f 	and.w	r2, r2, #31
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfe:	3320      	adds	r3, #32
 8003d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d04:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003d08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000e100 	.word	0xe000e100

08003d1c <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <Endpoint_IsINReady+0x54>)
 8003d24:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003d28:	461a      	mov	r2, r3
 8003d2a:	232c      	movs	r3, #44	; 0x2c
 8003d2c:	fb03 f302 	mul.w	r3, r3, r2
 8003d30:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <Endpoint_IsINReady+0x54>)
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <Endpoint_IsINReady+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <Endpoint_IsINReady+0x40>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <Endpoint_IsINReady+0x42>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	b2db      	uxtb	r3, r3
	}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000e9c 	.word	0x20000e9c

08003d74 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <Endpoint_IsOUTReceived+0x40>)
 8003d7c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003d80:	461a      	mov	r2, r3
 8003d82:	232c      	movs	r3, #44	; 0x2c
 8003d84:	fb03 f302 	mul.w	r3, r3, r2
 8003d88:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <Endpoint_IsOUTReceived+0x40>)
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
	}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000e9c 	.word	0x20000e9c

08003db8 <Endpoint_GetEndpointDirection>:
	 *  \return The currently selected endpoint's direction, as a
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <Endpoint_GetEndpointDirection+0x34>)
 8003dc0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	232c      	movs	r3, #44	; 0x2c
 8003dc8:	fb03 f302 	mul.w	r3, r3, r2
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <Endpoint_GetEndpointDirection+0x34>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	607b      	str	r3, [r7, #4]
		return ep->Address & ENDPOINT_DIR_MASK;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ddc:	b2db      	uxtb	r3, r3
	}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000e9c 	.word	0x20000e9c

08003df0 <Endpoint_IsStalled>:
	 *  \return Boolean \c true if the currently selected endpoint is stalled,
	 *  \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
		bool status = false;
 8003df6:	2300      	movs	r3, #0
 8003df8:	71fb      	strb	r3, [r7, #7]
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <Endpoint_IsStalled+0x3c>)
 8003dfc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e00:	4619      	mov	r1, r3
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <Endpoint_IsStalled+0x3c>)
 8003e04:	232c      	movs	r3, #44	; 0x2c
 8003e06:	fb03 f301 	mul.w	r3, r3, r1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	089b      	lsrs	r3, r3, #2
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <Endpoint_IsStalled+0x2e>
		{
			status = true;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	71fb      	strb	r3, [r7, #7]
		}
		return status;
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000e9c 	.word	0x20000e9c

08003e30 <USB_Device_GetFrameNumber>:
 *  the frame number is incremented by one.
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
	return device.Driver->GetFrameNumber();
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <USB_Device_GetFrameNumber+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	4798      	blx	r3
 8003e3c:	4603      	mov	r3, r0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000e9c 	.word	0x20000e9c

08003e48 <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8003e4e:	2364      	movs	r3, #100	; 0x64
 8003e50:	71fb      	strb	r3, [r7, #7]
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8003e52:	f7ff ffed 	bl	8003e30 <USB_Device_GetFrameNumber>
 8003e56:	4603      	mov	r3, r0
 8003e58:	80bb      	strh	r3, [r7, #4]

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8003e5a:	f7ff ffad 	bl	8003db8 <Endpoint_GetEndpointDirection>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d106      	bne.n	8003e72 <Endpoint_WaitUntilReady+0x2a>
		{
			if (Endpoint_IsINReady())
 8003e64:	f7ff ff5a 	bl	8003d1c <Endpoint_IsINReady>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e02c      	b.n	8003ecc <Endpoint_WaitUntilReady+0x84>
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8003e72:	f7ff ff7f 	bl	8003d74 <Endpoint_IsOUTReceived>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e025      	b.n	8003ecc <Endpoint_WaitUntilReady+0x84>
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <Endpoint_WaitUntilReady+0x8c>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	70fb      	strb	r3, [r7, #3]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <Endpoint_WaitUntilReady+0x48>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e01d      	b.n	8003ecc <Endpoint_WaitUntilReady+0x84>
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d101      	bne.n	8003e9a <Endpoint_WaitUntilReady+0x52>
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e018      	b.n	8003ecc <Endpoint_WaitUntilReady+0x84>
		}
		else if (Endpoint_IsStalled())
 8003e9a:	f7ff ffa9 	bl	8003df0 <Endpoint_IsStalled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <Endpoint_WaitUntilReady+0x60>
		{
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e011      	b.n	8003ecc <Endpoint_WaitUntilReady+0x84>
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8003ea8:	f7ff ffc2 	bl	8003e30 <USB_Device_GetFrameNumber>
 8003eac:	4603      	mov	r3, r0
 8003eae:	803b      	strh	r3, [r7, #0]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8003eb0:	883a      	ldrh	r2, [r7, #0]
 8003eb2:	88bb      	ldrh	r3, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d008      	beq.n	8003eca <Endpoint_WaitUntilReady+0x82>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 8003eb8:	883b      	ldrh	r3, [r7, #0]
 8003eba:	80bb      	strh	r3, [r7, #4]

			if (!(TimeoutMSRem--))
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	71fa      	strb	r2, [r7, #7]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <Endpoint_WaitUntilReady+0x82>
			{
			  return ENDPOINT_READYWAIT_Timeout;
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e000      	b.n	8003ecc <Endpoint_WaitUntilReady+0x84>
			}
		}
	}
 8003eca:	e7c6      	b.n	8003e5a <Endpoint_WaitUntilReady+0x12>
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000c91 	.word	0x20000c91

08003ed8 <Endpoint_ClearIN>:
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
	}
}

void Endpoint_ClearIN(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <Endpoint_ClearIN+0xa0>)
 8003ee0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	232c      	movs	r3, #44	; 0x2c
 8003ee8:	fb03 f302 	mul.w	r3, r3, r2
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <Endpoint_ClearIN+0xa0>)
 8003eee:	4413      	add	r3, r2
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d007      	beq.n	8003f14 <Endpoint_ClearIN+0x3c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d100      	bne.n	8003f16 <Endpoint_ClearIN+0x3e>
		return;
 8003f14:	e02c      	b.n	8003f70 <Endpoint_ClearIN+0x98>
	ep->InInUse = true;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	8893      	ldrh	r3, [r2, #4]
 8003f1a:	f043 0310 	orr.w	r3, r3, #16
 8003f1e:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8003f36:	206b      	movs	r0, #107	; 0x6b
 8003f38:	f7ff fece 	bl	8003cd8 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <Endpoint_ClearIN+0xa0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6a91      	ldr	r1, [r2, #40]	; 0x28
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f4e:	4798      	blx	r3
 8003f50:	6038      	str	r0, [r7, #0]
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	1ad2      	subs	r2, r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8003f6a:	206b      	movs	r0, #107	; 0x6b
 8003f6c:	f7ff fe98 	bl	8003ca0 <__NVIC_EnableIRQ>

}
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000e9c 	.word	0x20000e9c

08003f7c <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed() {
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <Endpoint_IsReadWriteAllowed+0x60>)
 8003f84:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003f88:	461a      	mov	r2, r3
 8003f8a:	232c      	movs	r3, #44	; 0x2c
 8003f8c:	fb03 f302 	mul.w	r3, r3, r2
 8003f90:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <Endpoint_IsReadWriteAllowed+0x60>)
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	bf34      	ite	cc
 8003fb6:	2301      	movcc	r3, #1
 8003fb8:	2300      	movcs	r3, #0
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	e006      	b.n	8003fcc <Endpoint_IsReadWriteAllowed+0x50>
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf14      	ite	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	2300      	moveq	r3, #0
 8003fca:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000e9c 	.word	0x20000e9c

08003fe0 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003fea:	4b16      	ldr	r3, [pc, #88]	; (8004044 <Endpoint_Write_8+0x64>)
 8003fec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	232c      	movs	r3, #44	; 0x2c
 8003ff4:	fb03 f302 	mul.w	r3, r3, r2
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <Endpoint_Write_8+0x64>)
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	429a      	cmp	r2, r3
 800400e:	d20d      	bcs.n	800402c <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4413      	add	r3, r2
 800401a:	79fa      	ldrb	r2, [r7, #7]
 800401c:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	619a      	str	r2, [r3, #24]

	      Success = true;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <Endpoint_Write_8+0x24>
}
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000e9c 	.word	0x20000e9c

08004048 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8() {
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <Endpoint_Read_8+0x6c>)
 8004050:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004054:	461a      	mov	r2, r3
 8004056:	232c      	movs	r3, #44	; 0x2c
 8004058:	fb03 f302 	mul.w	r3, r3, r2
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <Endpoint_Read_8+0x6c>)
 800405e:	4413      	add	r3, r2
 8004060:	3304      	adds	r3, #4
 8004062:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8004064:	2300      	movs	r3, #0
 8004066:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	71bb      	strb	r3, [r7, #6]

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <Endpoint_Read_8+0x52>
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4413      	add	r3, r2
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	71bb      	strb	r3, [r7, #6]
		  EndPoint->OutOffset++;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	60da      	str	r2, [r3, #12]
		  EndPoint->OutBytesAvailable--;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	1e5a      	subs	r2, r3, #1
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	609a      	str	r2, [r3, #8]

		  Success = true;
 8004096:	2301      	movs	r3, #1
 8004098:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	f083 0301 	eor.w	r3, r3, #1
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e2      	bne.n	800406c <Endpoint_Read_8+0x24>
	 return data;
 80040a6:	79bb      	ldrb	r3, [r7, #6]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000e9c 	.word	0x20000e9c

080040b8 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <Endpoint_Write_32_LE+0x64>)
 80040c2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80040c6:	461a      	mov	r2, r3
 80040c8:	232c      	movs	r3, #44	; 0x2c
 80040ca:	fb03 f302 	mul.w	r3, r3, r2
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <Endpoint_Write_32_LE+0x64>)
 80040d0:	4413      	add	r3, r2
 80040d2:	3304      	adds	r3, #4
 80040d4:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	3b03      	subs	r3, #3
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d20d      	bcs.n	8004104 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	4413      	add	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
																		Data;
			EndPoint->InBytesAvailable+=4;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	619a      	str	r2, [r3, #24]

			Success = true;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	f083 0301 	eor.w	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e4      	bne.n	80040da <Endpoint_Write_32_LE+0x22>
}
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000e9c 	.word	0x20000e9c

08004120 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE() {
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8004126:	4b19      	ldr	r3, [pc, #100]	; (800418c <Endpoint_Read_32_LE+0x6c>)
 8004128:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800412c:	461a      	mov	r2, r3
 800412e:	232c      	movs	r3, #44	; 0x2c
 8004130:	fb03 f302 	mul.w	r3, r3, r2
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <Endpoint_Read_32_LE+0x6c>)
 8004136:	4413      	add	r3, r2
 8004138:	3304      	adds	r3, #4
 800413a:	607b      	str	r3, [r7, #4]
	bool Success = false;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d912      	bls.n	8004172 <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4413      	add	r3, r2
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	1d1a      	adds	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	1f1a      	subs	r2, r3, #4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	609a      	str	r2, [r3, #8]

			Success = true;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	f083 0301 	eor.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e2      	bne.n	8004144 <Endpoint_Read_32_LE+0x24>
	return data;
 800417e:	68bb      	ldr	r3, [r7, #8]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	20000e9c 	.word	0x20000e9c

08004190 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e092      	b.n	80042c8 <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 80041ba:	4b48      	ldr	r3, [pc, #288]	; (80042dc <Endpoint_ConfigureEndpointTable+0x14c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69dc      	ldr	r4, [r3, #28]
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	7818      	ldrb	r0, [r3, #0]
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	7919      	ldrb	r1, [r3, #4]
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	4613      	mov	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4413      	add	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4413      	add	r3, r2
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 80041f4:	885b      	ldrh	r3, [r3, #2]
 80041f6:	461a      	mov	r2, r3
 80041f8:	47a0      	blx	r4
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <Endpoint_ConfigureEndpointTable+0x74>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8004200:	2300      	movs	r3, #0
 8004202:	e067      	b.n	80042d4 <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8004204:	7bb9      	ldrb	r1, [r7, #14]
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	4613      	mov	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4413      	add	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	7818      	ldrb	r0, [r3, #0]
 8004218:	4a30      	ldr	r2, [pc, #192]	; (80042dc <Endpoint_ConfigureEndpointTable+0x14c>)
 800421a:	232c      	movs	r3, #44	; 0x2c
 800421c:	fb03 f301 	mul.w	r3, r3, r1
 8004220:	4413      	add	r3, r2
 8004222:	4602      	mov	r2, r0
 8004224:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8004226:	7bb8      	ldrb	r0, [r7, #14]
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	885b      	ldrh	r3, [r3, #2]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004240:	b2d9      	uxtb	r1, r3
 8004242:	4a26      	ldr	r2, [pc, #152]	; (80042dc <Endpoint_ConfigureEndpointTable+0x14c>)
 8004244:	232c      	movs	r3, #44	; 0x2c
 8004246:	fb03 f300 	mul.w	r3, r3, r0
 800424a:	441a      	add	r2, r3
 800424c:	8913      	ldrh	r3, [r2, #8]
 800424e:	f361 138c 	bfi	r3, r1, #6, #7
 8004252:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	4a21      	ldr	r2, [pc, #132]	; (80042dc <Endpoint_ConfigureEndpointTable+0x14c>)
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	441a      	add	r2, r3
 8004260:	7a13      	ldrb	r3, [r2, #8]
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8004268:	7bbb      	ldrb	r3, [r7, #14]
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <Endpoint_ConfigureEndpointTable+0x14c>)
 800426c:	212c      	movs	r1, #44	; 0x2c
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	441a      	add	r2, r3
 8004274:	8913      	ldrh	r3, [r2, #8]
 8004276:	f043 0302 	orr.w	r3, r3, #2
 800427a:	8113      	strh	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	b25b      	sxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	db15      	blt.n	80042c2 <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <Endpoint_ConfigureEndpointTable+0x14c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4413      	add	r3, r2
 80042ac:	7818      	ldrb	r0, [r3, #0]
 80042ae:	7bbb      	ldrb	r3, [r7, #14]
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <Endpoint_ConfigureEndpointTable+0x14c>)
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3310      	adds	r3, #16
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4619      	mov	r1, r3
 80042c0:	47a0      	blx	r4

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	3301      	adds	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	f4ff af68 	bcc.w	80041a2 <Endpoint_ConfigureEndpointTable+0x12>
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 80042d2:	2301      	movs	r3, #1
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd90      	pop	{r4, r7, pc}
 80042dc:	20000e9c 	.word	0x20000e9c

080042e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <__NVIC_GetPriorityGrouping+0x18>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ec:	0a1b      	lsrs	r3, r3, #8
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db0b      	blt.n	8004326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430e:	4908      	ldr	r1, [pc, #32]	; (8004330 <__NVIC_EnableIRQ+0x34>)
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	79fa      	ldrb	r2, [r7, #7]
 8004318:	f002 021f 	and.w	r2, r2, #31
 800431c:	2001      	movs	r0, #1
 800431e:	fa00 f202 	lsl.w	r2, r0, r2
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000e100 	.word	0xe000e100

08004334 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db10      	blt.n	8004368 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	490b      	ldr	r1, [pc, #44]	; (8004374 <__NVIC_DisableIRQ+0x40>)
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	79fa      	ldrb	r2, [r7, #7]
 8004350:	f002 021f 	and.w	r2, r2, #31
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	3320      	adds	r3, #32
 800435c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004360:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004364:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000e100 	.word	0xe000e100

08004378 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	2b00      	cmp	r3, #0
 8004388:	db0c      	blt.n	80043a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438a:	4909      	ldr	r1, [pc, #36]	; (80043b0 <__NVIC_ClearPendingIRQ+0x38>)
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	79fa      	ldrb	r2, [r7, #7]
 8004394:	f002 021f 	and.w	r2, r2, #31
 8004398:	2001      	movs	r0, #1
 800439a:	fa00 f202 	lsl.w	r2, r0, r2
 800439e:	3360      	adds	r3, #96	; 0x60
 80043a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	e000e100 	.word	0xe000e100

080043b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	6039      	str	r1, [r7, #0]
 80043be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	db0a      	blt.n	80043de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c8:	490d      	ldr	r1, [pc, #52]	; (8004400 <__NVIC_SetPriority+0x4c>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	0092      	lsls	r2, r2, #2
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	440b      	add	r3, r1
 80043d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80043dc:	e00a      	b.n	80043f4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043de:	4909      	ldr	r1, [pc, #36]	; (8004404 <__NVIC_SetPriority+0x50>)
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	3b04      	subs	r3, #4
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	0092      	lsls	r2, r2, #2
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	440b      	add	r3, r1
 80043f2:	761a      	strb	r2, [r3, #24]
  }
}
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000e100 	.word	0xe000e100
 8004404:	e000ed00 	.word	0xe000ed00

08004408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f1c3 0307 	rsb	r3, r3, #7
 8004422:	2b06      	cmp	r3, #6
 8004424:	bf28      	it	cs
 8004426:	2306      	movcs	r3, #6
 8004428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3306      	adds	r3, #6
 800442e:	2b06      	cmp	r3, #6
 8004430:	d902      	bls.n	8004438 <NVIC_EncodePriority+0x30>
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3b01      	subs	r3, #1
 8004436:	e000      	b.n	800443a <NVIC_EncodePriority+0x32>
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2201      	movs	r2, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	401a      	ands	r2, r3
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	1e59      	subs	r1, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800445c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800445e:	4618      	mov	r0, r3
 8004460:	3724      	adds	r7, #36	; 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	USBD_STATUS_t status = USBD_STATUS_SUCCESS;
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 8004478:	f7fd fe28 	bl	80020cc <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 800447c:	483d      	ldr	r0, [pc, #244]	; (8004574 <USBD_Init+0x108>)
 800447e:	2100      	movs	r1, #0
 8004480:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8004484:	f002 ff0a 	bl	800729c <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <USBD_Init+0x10c>)
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <USBD_Init+0x108>)
 8004490:	4a3a      	ldr	r2, [pc, #232]	; (800457c <USBD_Init+0x110>)
 8004492:	601a      	str	r2, [r3, #0]
	device.ep0_state = USBD_EP0_STATE_IDLE;
 8004494:	4b37      	ldr	r3, [pc, #220]	; (8004574 <USBD_Init+0x108>)
 8004496:	2201      	movs	r2, #1
 8004498:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <USBD_Init+0x108>)
 800449e:	4a38      	ldr	r2, [pc, #224]	; (8004580 <USBD_Init+0x114>)
 80044a0:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 80044a2:	4b34      	ldr	r3, [pc, #208]	; (8004574 <USBD_Init+0x108>)
 80044a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80044aa:	4b32      	ldr	r3, [pc, #200]	; (8004574 <USBD_Init+0x108>)
 80044ac:	4a35      	ldr	r2, [pc, #212]	; (8004584 <USBD_Init+0x118>)
 80044ae:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <USBD_Init+0x108>)
 80044b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044b6:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
 80044b8:	4a2e      	ldr	r2, [pc, #184]	; (8004574 <USBD_Init+0x108>)
 80044ba:	7913      	ldrb	r3, [r2, #4]
 80044bc:	f36f 13c7 	bfc	r3, #7, #1
 80044c0:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 80044c2:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <USBD_Init+0x108>)
 80044c4:	7a13      	ldrb	r3, [r2, #8]
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 80044cc:	4a29      	ldr	r2, [pc, #164]	; (8004574 <USBD_Init+0x108>)
 80044ce:	8913      	ldrh	r3, [r2, #8]
 80044d0:	f043 0302 	orr.w	r3, r3, #2
 80044d4:	8113      	strh	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 80044d6:	4a27      	ldr	r2, [pc, #156]	; (8004574 <USBD_Init+0x108>)
 80044d8:	8913      	ldrh	r3, [r2, #8]
 80044da:	2140      	movs	r1, #64	; 0x40
 80044dc:	f361 138c 	bfi	r3, r1, #6, #7
 80044e0:	8113      	strh	r3, [r2, #8]

	if ((handle->event_cb->control_request == 0) ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	695b      	ldr	r3, [r3, #20]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	689b      	ldr	r3, [r3, #8]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <USBD_Init+0x9a>
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e031      	b.n	800456a <USBD_Init+0xfe>
	}
	else
	{
	  device.events = handle->event_cb;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <USBD_Init+0x108>)
 800450c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8004510:	2001      	movs	r0, #1
 8004512:	f7fc fa49 	bl	80009a8 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <USBD_Init+0x11c>)
 800451a:	605a      	str	r2, [r3, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1b      	ldr	r2, [pc, #108]	; (800458c <USBD_Init+0x120>)
 8004520:	609a      	str	r2, [r3, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <USBD_Init+0x108>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4610      	mov	r0, r2
 800452c:	4798      	blx	r3
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]
	  if (USBD_STATUS_SUCCESS == status)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <USBD_Init+0xe2>
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();
 8004538:	f000 f888 	bl	800464c <USB_EnableUSBInterrupt>

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <USBD_Init+0x108>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2000      	movs	r0, #0
 8004544:	2100      	movs	r1, #0
 8004546:	2240      	movs	r2, #64	; 0x40
 8004548:	4798      	blx	r3
 800454a:	4603      	mov	r3, r0
 800454c:	73fb      	strb	r3, [r7, #15]
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <USBD_Init+0xfe>
	  {
	  XMC_USBD_Disable();
 8004554:	f7fd fdba 	bl	80020cc <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <USBD_Init+0x108>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4798      	blx	r3
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <USBD_Init+0xfe>
	  {
	    USB_DisableUSBInterrupt();
 8004566:	f000 f887 	bl	8004678 <USB_DisableUSBInterrupt>
	  }
	  }
	}


	return status;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000e9c 	.word	0x20000e9c
 8004578:	20000c91 	.word	0x20000c91
 800457c:	0800b3f0 	.word	0x0800b3f0
 8004580:	20000c9c 	.word	0x20000c9c
 8004584:	20000d9c 	.word	0x20000d9c
 8004588:	08004cad 	.word	0x08004cad
 800458c:	08004f09 	.word	0x08004f09

08004590 <USBD_Connect>:
 *
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <USBD_Connect+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	4798      	blx	r3
 800459c:	4603      	mov	r3, r0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000e9c 	.word	0x20000e9c

080045a8 <USBD_IsEnumDone>:
 *
 * Check with the USB device controller driver if the enumeration is done.
 * Returns 1 on completion of enumeration.
 */
uint32_t USBD_IsEnumDone(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  return device.Driver->IsEnumDone();
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <USBD_IsEnumDone+0x14>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	4798      	blx	r3
 80045b4:	4603      	mov	r3, r0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000e9c 	.word	0x20000e9c

080045c0 <USBD_SetEndpointBuffer>:
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80bb      	strh	r3, [r7, #4]
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da12      	bge.n	8004606 <USBD_SetEndpointBuffer+0x46>
  {
    device.Endpoints[number].InBuffer = buf;
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <USBD_SetEndpointBuffer+0x74>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3318      	adds	r3, #24
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	609a      	str	r2, [r3, #8]
    device.Endpoints[number].InBufferLength = len;
 80045f2:	88ba      	ldrh	r2, [r7, #4]
 80045f4:	490f      	ldr	r1, [pc, #60]	; (8004634 <USBD_SetEndpointBuffer+0x74>)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	202c      	movs	r0, #44	; 0x2c
 80045fa:	fb00 f303 	mul.w	r3, r0, r3
 80045fe:	440b      	add	r3, r1
 8004600:	3320      	adds	r3, #32
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	e011      	b.n	800462a <USBD_SetEndpointBuffer+0x6a>
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <USBD_SetEndpointBuffer+0x74>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	212c      	movs	r1, #44	; 0x2c
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	4413      	add	r3, r2
 8004612:	3310      	adds	r3, #16
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	605a      	str	r2, [r3, #4]
    device.Endpoints[number].OutBufferLength = len;
 8004618:	88ba      	ldrh	r2, [r7, #4]
 800461a:	4906      	ldr	r1, [pc, #24]	; (8004634 <USBD_SetEndpointBuffer+0x74>)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	202c      	movs	r0, #44	; 0x2c
 8004620:	fb00 f303 	mul.w	r3, r0, r3
 8004624:	440b      	add	r3, r1
 8004626:	3310      	adds	r3, #16
 8004628:	609a      	str	r2, [r3, #8]
  }

}
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20000e9c 	.word	0x20000e9c

08004638 <USB0_0_IRQHandler>:
 *
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <USB0_0_IRQHandler+0x10>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7fd fc93 	bl	8001f6c <XMC_USBD_IRQHandler>
}
 8004646:	bd80      	pop	{r7, pc}
 8004648:	2000004c 	.word	0x2000004c

0800464c <USB_EnableUSBInterrupt>:
 * Enables and sets the priority of USB Interrupt
 *
 * First the interrupt priority is set and then the interrupt is enabled in the NVIC.
 */
static void USB_EnableUSBInterrupt(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), USB_PRE_EMPTION_PRIORITY, 
 8004650:	f7ff fe46 	bl	80042e0 <__NVIC_GetPriorityGrouping>
 8004654:	4603      	mov	r3, r0
 8004656:	4618      	mov	r0, r3
 8004658:	213f      	movs	r1, #63	; 0x3f
 800465a:	2200      	movs	r2, #0
 800465c:	f7ff fed4 	bl	8004408 <NVIC_EncodePriority>
 8004660:	4603      	mov	r3, r0
 8004662:	206b      	movs	r0, #107	; 0x6b
 8004664:	4619      	mov	r1, r3
 8004666:	f7ff fea5 	bl	80043b4 <__NVIC_SetPriority>
  USB_SUB_PRIORITY));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 800466a:	206b      	movs	r0, #107	; 0x6b
 800466c:	f7ff fe84 	bl	8004378 <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 8004670:	206b      	movs	r0, #107	; 0x6b
 8004672:	f7ff fe43 	bl	80042fc <__NVIC_EnableIRQ>
}
 8004676:	bd80      	pop	{r7, pc}

08004678 <USB_DisableUSBInterrupt>:
 * Disables the USB interrupt in the NVIC.
 *
 * Before the interrupt gets disabled, it will clear the pending IRQs.
 */
static void USB_DisableUSBInterrupt(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 800467c:	206b      	movs	r0, #107	; 0x6b
 800467e:	f7ff fe7b 	bl	8004378 <__NVIC_ClearPendingIRQ>
  NVIC_DisableIRQ(USB0_0_IRQn);
 8004682:	206b      	movs	r0, #107	; 0x6b
 8004684:	f7ff fe56 	bl	8004334 <__NVIC_DisableIRQ>
}
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop

0800468c <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <USBD_HandleEP0_Stall+0x2c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2080      	movs	r0, #128	; 0x80
 8004698:	2101      	movs	r1, #1
 800469a:	4798      	blx	r3
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <USBD_HandleEP0_Stall+0x2a>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <USBD_HandleEP0_Stall+0x2c>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 80046aa:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <USBD_HandleEP0_Stall+0x2c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	2000      	movs	r0, #0
 80046b2:	2118      	movs	r1, #24
 80046b4:	4798      	blx	r3
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000e9c 	.word	0x20000e9c

080046bc <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
  uint32_t length = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
  uint32_t ret;
  void *buffer = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
  uint32_t status = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 80046ce:	4b95      	ldr	r3, [pc, #596]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 80046d0:	885b      	ldrh	r3, [r3, #2]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	61bb      	str	r3, [r7, #24]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80046da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <USBD_Handle_DeviceRequest+0x32>
  {
    device.events->control_request();
 80046e4:	4b90      	ldr	r3, [pc, #576]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80046e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4798      	blx	r3
  }

  if (1U == device.IsSetupRecieved)
 80046ee:	4b8e      	ldr	r3, [pc, #568]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80046f0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	f040 8228 	bne.w	8004b54 <USBD_Handle_DeviceRequest+0x498>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 8004704:	4b87      	ldr	r3, [pc, #540]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b0c      	cmp	r3, #12
 800470c:	f200 821f 	bhi.w	8004b4e <USBD_Handle_DeviceRequest+0x492>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <USBD_Handle_DeviceRequest+0x5c>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	080048b3 	.word	0x080048b3
 800471c:	0800474d 	.word	0x0800474d
 8004720:	08004b4f 	.word	0x08004b4f
 8004724:	08004a81 	.word	0x08004a81
 8004728:	08004b4f 	.word	0x08004b4f
 800472c:	080049ab 	.word	0x080049ab
 8004730:	080047f9 	.word	0x080047f9
 8004734:	08004a3b 	.word	0x08004a3b
 8004738:	080047e9 	.word	0x080047e9
 800473c:	080049ef 	.word	0x080049ef
 8004740:	08004879 	.word	0x08004879
 8004744:	08004a41 	.word	0x08004a41
 8004748:	08004b49 	.word	0x08004b49
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 800474c:	4b75      	ldr	r3, [pc, #468]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d134      	bne.n	80047c4 <USBD_Handle_DeviceRequest+0x108>
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 800475a:	4b72      	ldr	r3, [pc, #456]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 800475c:	889b      	ldrh	r3, [r3, #4]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8004766:	4b71      	ldr	r3, [pc, #452]	; (800492c <USBD_Handle_DeviceRequest+0x270>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b04      	cmp	r3, #4
 800476e:	d004      	beq.n	800477a <USBD_Handle_DeviceRequest+0xbe>
 8004770:	4b6c      	ldr	r3, [pc, #432]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 8004772:	889b      	ldrh	r3, [r3, #4]
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d121      	bne.n	80047be <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
 800477a:	4a6b      	ldr	r2, [pc, #428]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	212c      	movs	r1, #44	; 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	7a1b      	ldrb	r3, [r3, #8]
 8004788:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800478c:	b2db      	uxtb	r3, r3
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 800478e:	2b01      	cmp	r3, #1
 8004790:	d115      	bne.n	80047be <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 8004792:	4a65      	ldr	r2, [pc, #404]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	441a      	add	r2, r3
 800479e:	8913      	ldrh	r3, [r2, #8]
 80047a0:	f36f 0382 	bfc	r3, #2, #1
 80047a4:	8113      	strh	r3, [r2, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 80047a6:	4b60      	ldr	r3, [pc, #384]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	4a5d      	ldr	r2, [pc, #372]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 80047ae:	8892      	ldrh	r2, [r2, #4]
 80047b0:	b292      	uxth	r2, r2
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	4610      	mov	r0, r2
 80047b6:	2100      	movs	r1, #0
 80047b8:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 80047ba:	bf00      	nop
          }
          else
          {
            USBD_HandleEP0_Stall();
          }
          break;
 80047bc:	e1ca      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed", 0);
            }
          }
          else
          {
            USBD_HandleEP0_Stall();
 80047be:	f7ff ff65 	bl	800468c <USBD_HandleEP0_Stall>
          }
          break;
 80047c2:	e1c7      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80047c4:	4b57      	ldr	r3, [pc, #348]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <USBD_Handle_DeviceRequest+0x126>
        {
          device.remote_wakeup = 0U;
 80047d2:	4a55      	ldr	r2, [pc, #340]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80047d4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80047d8:	f36f 0382 	bfc	r3, #2, #1
 80047dc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
          break;
 80047e0:	e1b8      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        USBD_HandleEP0_Stall();
 80047e2:	f7ff ff53 	bl	800468c <USBD_HandleEP0_Stall>
        break;
 80047e6:	e1b5      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 80047e8:	4b4f      	ldr	r3, [pc, #316]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	2000      	movs	r0, #0
 80047f0:	494f      	ldr	r1, [pc, #316]	; (8004930 <USBD_Handle_DeviceRequest+0x274>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 80047f6:	e1ad      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80047fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <USBD_Handle_DeviceRequest+0x170>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8004804:	4b47      	ldr	r3, [pc, #284]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 8004806:	885b      	ldrh	r3, [r3, #2]
 8004808:	b29b      	uxth	r3, r3
 800480a:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 800480c:	4b45      	ldr	r3, [pc, #276]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	b29b      	uxth	r3, r3
 8004812:	60fb      	str	r3, [r7, #12]
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 8004814:	4b44      	ldr	r3, [pc, #272]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 8004816:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	b290      	uxth	r0, r2
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	b291      	uxth	r1, r2
 8004824:	1d3a      	adds	r2, r7, #4
 8004826:	4798      	blx	r3
 8004828:	4603      	mov	r3, r0
 800482a:	61fb      	str	r3, [r7, #28]
        }

        if (0U == length)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <USBD_Handle_DeviceRequest+0x17c>
        {
          USBD_HandleEP0_Stall();
 8004832:	f7ff ff2b 	bl	800468c <USBD_HandleEP0_Stall>

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;
 8004836:	e18d      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8004838:	4b3a      	ldr	r3, [pc, #232]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 800483a:	88db      	ldrh	r3, [r3, #6]
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	429a      	cmp	r2, r3
 8004844:	d803      	bhi.n	800484e <USBD_Handle_DeviceRequest+0x192>
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 8004846:	4b37      	ldr	r3, [pc, #220]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 8004848:	88db      	ldrh	r3, [r3, #6]
 800484a:	b29b      	uxth	r3, r3
 800484c:	61fb      	str	r3, [r7, #28]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 800484e:	4b36      	ldr	r3, [pc, #216]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	2000      	movs	r0, #0
 8004858:	4611      	mov	r1, r2
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	4798      	blx	r3
 800485e:	4603      	mov	r3, r0
 8004860:	60bb      	str	r3, [r7, #8]
          device.Endpoints[0].InDataLeft = length - ret;
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 800486a:	6293      	str	r3, [r2, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	4a2d      	ldr	r2, [pc, #180]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
        break;
 8004876:	e16d      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004878:	4b2c      	ldr	r3, [pc, #176]	; (800492c <USBD_Handle_DeviceRequest+0x270>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b04      	cmp	r3, #4
 8004880:	d10e      	bne.n	80048a0 <USBD_Handle_DeviceRequest+0x1e4>
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 8004888:	4a26      	ldr	r2, [pc, #152]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 800488a:	8892      	ldrh	r2, [r2, #4]
 800488c:	b292      	uxth	r2, r2
 800488e:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8004892:	4925      	ldr	r1, [pc, #148]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 8004894:	440a      	add	r2, r1
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 8004896:	2000      	movs	r0, #0
 8004898:	4611      	mov	r1, r2
 800489a:	2201      	movs	r2, #1
 800489c:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 800489e:	e159      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80048a0:	4b22      	ldr	r3, [pc, #136]	; (800492c <USBD_Handle_DeviceRequest+0x270>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d102      	bne.n	80048b0 <USBD_Handle_DeviceRequest+0x1f4>
        {
          USBD_HandleEP0_Stall();
 80048aa:	f7ff feef 	bl	800468c <USBD_HandleEP0_Stall>
          break;
 80048ae:	e151      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 80048b0:	e150      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d119      	bne.n	80048f4 <USBD_Handle_DeviceRequest+0x238>
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80048c2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80048c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80048d4:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80048d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	4313      	orrs	r3, r2
 80048e0:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	463a      	mov	r2, r7
 80048ea:	2000      	movs	r0, #0
 80048ec:	4611      	mov	r1, r2
 80048ee:	2202      	movs	r2, #2
 80048f0:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 80048f2:	e12f      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <USBD_Handle_DeviceRequest+0x268>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d118      	bne.n	8004934 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <USBD_Handle_DeviceRequest+0x270>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004908:	2b04      	cmp	r3, #4
 800490a:	d113      	bne.n	8004934 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <USBD_Handle_DeviceRequest+0x26c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	463a      	mov	r2, r7
 8004918:	2000      	movs	r0, #0
 800491a:	4611      	mov	r1, r2
 800491c:	2202      	movs	r2, #2
 800491e:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 8004920:	e118      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
 8004922:	bf00      	nop
 8004924:	20000c94 	.word	0x20000c94
 8004928:	20000e9c 	.word	0x20000e9c
 800492c:	20000c91 	.word	0x20000c91
 8004930:	20000fd5 	.word	0x20000fd5
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d130      	bne.n	80049a4 <USBD_Handle_DeviceRequest+0x2e8>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 8004942:	4b89      	ldr	r3, [pc, #548]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004944:	889b      	ldrh	r3, [r3, #4]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800494e:	4b87      	ldr	r3, [pc, #540]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b04      	cmp	r3, #4
 8004956:	d004      	beq.n	8004962 <USBD_Handle_DeviceRequest+0x2a6>
 8004958:	4b83      	ldr	r3, [pc, #524]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 800495a:	889b      	ldrh	r3, [r3, #4]
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d120      	bne.n	80049a4 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
 8004962:	4a83      	ldr	r2, [pc, #524]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	7a1b      	ldrb	r3, [r3, #8]
 8004970:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004974:	b2db      	uxtb	r3, r3
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8004976:	2b01      	cmp	r3, #1
 8004978:	d114      	bne.n	80049a4 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 800497a:	4a7d      	ldr	r2, [pc, #500]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	603b      	str	r3, [r7, #0]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8004992:	4b77      	ldr	r3, [pc, #476]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	463a      	mov	r2, r7
 800499a:	2000      	movs	r0, #0
 800499c:	4611      	mov	r1, r2
 800499e:	2202      	movs	r2, #2
 80049a0:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 80049a2:	e0d7      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default stall */
        USBD_HandleEP0_Stall();
 80049a4:	f7ff fe72 	bl	800468c <USBD_HandleEP0_Stall>
        break;
 80049a8:	e0d4      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetAddress:
        if (0U == value)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d103      	bne.n	80049b8 <USBD_Handle_DeviceRequest+0x2fc>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 80049b0:	4b6e      	ldr	r3, [pc, #440]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 80049b2:	2202      	movs	r2, #2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e002      	b.n	80049be <USBD_Handle_DeviceRequest+0x302>
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 80049b8:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 80049ba:	2203      	movs	r2, #3
 80049bc:	701a      	strb	r2, [r3, #0]
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 80049be:	4b6c      	ldr	r3, [pc, #432]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	4610      	mov	r0, r2
 80049ca:	2100      	movs	r1, #0
 80049cc:	4798      	blx	r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <USBD_Handle_DeviceRequest+0x330>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 80049d4:	4b66      	ldr	r3, [pc, #408]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 80049d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <USBD_Handle_DeviceRequest+0x330>
          {
            device.events->set_address();
 80049e0:	4b63      	ldr	r3, [pc, #396]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 80049e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	4798      	blx	r3
          }
        }
        break;
 80049ea:	e0b3      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
 80049ec:	e0b2      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4b5f      	ldr	r3, [pc, #380]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 80049f4:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
        if (NULL != device.events->config_changed)
 80049f8:	4b5d      	ldr	r3, [pc, #372]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 80049fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <USBD_Handle_DeviceRequest+0x352>
        {
          device.events->config_changed();
 8004a04:	4b5a      	ldr	r3, [pc, #360]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004a06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <USBD_Handle_DeviceRequest+0x360>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8004a14:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 8004a16:	2203      	movs	r2, #3
 8004a18:	701a      	strb	r2, [r3, #0]
          break;
 8004a1a:	e09b      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 8004a1c:	4b54      	ldr	r3, [pc, #336]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004a1e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <USBD_Handle_DeviceRequest+0x378>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8004a2c:	4b4f      	ldr	r3, [pc, #316]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USBD_HandleEP0_Stall();
        }
        break;
 8004a32:	e08f      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
        }
        else
        {
          USBD_HandleEP0_Stall();
 8004a34:	f7ff fe2a 	bl	800468c <USBD_HandleEP0_Stall>
        }
        break;
 8004a38:	e08c      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetDescriptor:
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
 8004a3a:	f7ff fe27 	bl	800468c <USBD_HandleEP0_Stall>
        break;
 8004a3e:	e089      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004a40:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d111      	bne.n	8004a6e <USBD_Handle_DeviceRequest+0x3b2>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004a4c:	885b      	ldrh	r3, [r3, #2]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 8004a52:	4b45      	ldr	r3, [pc, #276]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004a54:	889b      	ldrh	r3, [r3, #4]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	60fb      	str	r3, [r7, #12]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	b2d9      	uxtb	r1, r3
 8004a5e:	4a44      	ldr	r2, [pc, #272]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004a68:	460a      	mov	r2, r1
 8004a6a:	701a      	strb	r2, [r3, #0]
          break;
 8004a6c:	e072      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d102      	bne.n	8004a7e <USBD_Handle_DeviceRequest+0x3c2>
        {
          USBD_HandleEP0_Stall();
 8004a78:	f7ff fe08 	bl	800468c <USBD_HandleEP0_Stall>
          break;
 8004a7c:	e06a      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 8004a7e:	e069      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d102      	bne.n	8004a8c <USBD_Handle_DeviceRequest+0x3d0>
        {
          USBD_HandleEP0_Stall();
 8004a86:	f7ff fe01 	bl	800468c <USBD_HandleEP0_Stall>
          break;
 8004a8a:	e063      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004a8c:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d138      	bne.n	8004b08 <USBD_Handle_DeviceRequest+0x44c>
        {
          switch (value)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <USBD_Handle_DeviceRequest+0x3f6>
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d000      	beq.n	8004aa2 <USBD_Handle_DeviceRequest+0x3e6>
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
            default:
              break;
 8004aa0:	e031      	b.n	8004b06 <USBD_Handle_DeviceRequest+0x44a>
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 8004aa2:	4a33      	ldr	r2, [pc, #204]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004aa4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
              break;
 8004ab0:	e029      	b.n	8004b06 <USBD_Handle_DeviceRequest+0x44a>
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004ab4:	889b      	ldrh	r3, [r3, #4]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	617b      	str	r3, [r7, #20]
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 8004abe:	4a2c      	ldr	r2, [pc, #176]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	212c      	movs	r1, #44	; 0x2c
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	7a1b      	ldrb	r3, [r3, #8]
 8004acc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <USBD_Handle_DeviceRequest+0x420>
              {
                USBD_HandleEP0_Stall();
 8004ad6:	f7ff fdd9 	bl	800468c <USBD_HandleEP0_Stall>
 8004ada:	e013      	b.n	8004b04 <USBD_Handle_DeviceRequest+0x448>
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 8004adc:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	212c      	movs	r1, #44	; 0x2c
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8913      	ldrh	r3, [r2, #8]
 8004aea:	f043 0304 	orr.w	r3, r3, #4
 8004aee:	8113      	strh	r3, [r2, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 8004af0:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004af8:	8892      	ldrh	r2, [r2, #4]
 8004afa:	b292      	uxth	r2, r2
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	4610      	mov	r0, r2
 8004b00:	2101      	movs	r1, #1
 8004b02:	4798      	blx	r3
                {
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
 8004b04:	bf00      	nop
            default:
              break;
          }
          break;
 8004b06:	e025      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8004b08:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <USBD_Handle_DeviceRequest+0x4b0>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d117      	bne.n	8004b42 <USBD_Handle_DeviceRequest+0x486>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d114      	bne.n	8004b42 <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0303 	and.w	r3, r3, #3
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d10d      	bne.n	8004b42 <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <USBD_Handle_DeviceRequest+0x4ac>)
 8004b28:	889b      	ldrh	r3, [r3, #4]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	b2db      	uxtb	r3, r3
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <USBD_Handle_DeviceRequest+0x486>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 8004b32:	4a0f      	ldr	r2, [pc, #60]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b34:	8913      	ldrh	r3, [r2, #8]
 8004b36:	f043 0304 	orr.w	r3, r3, #4
 8004b3a:	8113      	strh	r3, [r2, #8]
            USBD_HandleEP0_Stall();
 8004b3c:	f7ff fda6 	bl	800468c <USBD_HandleEP0_Stall>
            break;
 8004b40:	e008      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default behaviour is stall */
        USBD_HandleEP0_Stall();
 8004b42:	f7ff fda3 	bl	800468c <USBD_HandleEP0_Stall>
        break;
 8004b46:	e005      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SynchFrame:
        /* Not yet supported */
        USBD_HandleEP0_Stall();
 8004b48:	f7ff fda0 	bl	800468c <USBD_HandleEP0_Stall>
        break;
 8004b4c:	e002      	b.n	8004b54 <USBD_Handle_DeviceRequest+0x498>

      default:
        USBD_HandleEP0_Stall();
 8004b4e:	f7ff fd9d 	bl	800468c <USBD_HandleEP0_Stall>
        break;
 8004b52:	bf00      	nop
    }
  }
  device.IsSetupRecieved = 0U;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b56:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8004b5a:	f022 0202 	bic.w	r2, r2, #2
 8004b5e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000c94 	.word	0x20000c94
 8004b6c:	20000c91 	.word	0x20000c91
 8004b70:	20000e9c 	.word	0x20000e9c

08004b74 <USBD_HandleEP0_IN>:
 * state.
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <USBD_HandleEP0_IN+0x48>)
 8004b7a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d10a      	bne.n	8004b98 <USBD_HandleEP0_IN+0x24>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 8004b82:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <USBD_HandleEP0_IN+0x48>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	2000      	movs	r0, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <USBD_HandleEP0_IN+0x48>)
 8004b90:	2205      	movs	r2, #5
 8004b92:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004b96:	e010      	b.n	8004bba <USBD_HandleEP0_IN+0x46>
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 8004b98:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <USBD_HandleEP0_IN+0x48>)
 8004b9a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d10b      	bne.n	8004bba <USBD_HandleEP0_IN+0x46>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <USBD_HandleEP0_IN+0x48>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <USBD_HandleEP0_IN+0x48>)
 8004baa:	7912      	ldrb	r2, [r2, #4]
 8004bac:	4610      	mov	r0, r2
 8004bae:	2118      	movs	r1, #24
 8004bb0:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8004bb2:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <USBD_HandleEP0_IN+0x48>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_IN: invalid ep0 state", 0);
  }
}
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000e9c 	.word	0x20000e9c

08004bc0 <USBD_HandleEP0_OUT>:
 * for new SETUP packets, when in \ref USBD_EP0_STATE_OUT_STATUS. When endpoint 0 is in
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <USBD_HandleEP0_OUT+0x50>)
 8004bc6:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d10d      	bne.n	8004bea <USBD_HandleEP0_OUT+0x2a>
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 8004bce:	f7ff fd75 	bl	80046bc <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <USBD_HandleEP0_OUT+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	2000      	movs	r0, #0
 8004bda:	2100      	movs	r1, #0
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <USBD_HandleEP0_OUT+0x50>)
 8004be2:	2203      	movs	r2, #3
 8004be4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004be8:	e010      	b.n	8004c0c <USBD_HandleEP0_OUT+0x4c>
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <USBD_HandleEP0_OUT+0x50>)
 8004bec:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d10b      	bne.n	8004c0c <USBD_HandleEP0_OUT+0x4c>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <USBD_HandleEP0_OUT+0x50>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <USBD_HandleEP0_OUT+0x50>)
 8004bfc:	7912      	ldrb	r2, [r2, #4]
 8004bfe:	4610      	mov	r0, r2
 8004c00:	2118      	movs	r1, #24
 8004c02:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <USBD_HandleEP0_OUT+0x50>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_OUT: invalid ep0 state", 0);
  }
}
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000e9c 	.word	0x20000e9c

08004c14 <USBD_HandleEP0_SETUP>:
 * equals zero, it starts processing the request and sends in status response including the switch to
 * USBD_EP0_STATE_IN_STATUS. When the host expects data from the device, the function processes the control
 * request and switches to USBD_EP0_STATE_IN_DATA state.
 */
static void USBD_HandleEP0_SETUP()
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <USBD_HandleEP0_SETUP+0x90>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	2000      	movs	r0, #0
 8004c22:	4921      	ldr	r1, [pc, #132]	; (8004ca8 <USBD_HandleEP0_SETUP+0x94>)
 8004c24:	2208      	movs	r2, #8
 8004c26:	4798      	blx	r3
 8004c28:	4603      	mov	r3, r0
 8004c2a:	607b      	str	r3, [r7, #4]
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <USBD_HandleEP0_SETUP+0x90>)
 8004c2e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8004c32:	f042 0202 	orr.w	r2, r2, #2
 8004c36:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d12d      	bne.n	8004c9c <USBD_HandleEP0_SETUP+0x88>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <USBD_HandleEP0_SETUP+0x94>)
 8004c42:	88db      	ldrh	r3, [r3, #6]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10d      	bne.n	8004c66 <USBD_HandleEP0_SETUP+0x52>
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <USBD_HandleEP0_SETUP+0x90>)
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 8004c52:	f7ff fd33 	bl	80046bc <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <USBD_HandleEP0_SETUP+0x90>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	2100      	movs	r1, #0
 8004c60:	2200      	movs	r2, #0
 8004c62:	4798      	blx	r3
 8004c64:	e01a      	b.n	8004c9c <USBD_HandleEP0_SETUP+0x88>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 8004c66:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <USBD_HandleEP0_SETUP+0x94>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	da06      	bge.n	8004c82 <USBD_HandleEP0_SETUP+0x6e>
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <USBD_HandleEP0_SETUP+0x90>)
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 8004c7c:	f7ff fd1e 	bl	80046bc <USBD_Handle_DeviceRequest>
 8004c80:	e00c      	b.n	8004c9c <USBD_HandleEP0_SETUP+0x88>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <USBD_HandleEP0_SETUP+0x90>)
 8004c84:	2204      	movs	r2, #4
 8004c86:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <USBD_HandleEP0_SETUP+0x90>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	4a05      	ldr	r2, [pc, #20]	; (8004ca8 <USBD_HandleEP0_SETUP+0x94>)
 8004c92:	88d2      	ldrh	r2, [r2, #6]
 8004c94:	b292      	uxth	r2, r2
 8004c96:	2000      	movs	r0, #0
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4798      	blx	r3
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_SETUP: read invalid setup packet size", 0);
  }
}
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000e9c 	.word	0x20000e9c
 8004ca8:	20000c94 	.word	0x20000c94

08004cac <USBD_SignalDeviceEventHandler>:
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  switch (event)
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	2b09      	cmp	r3, #9
 8004cba:	f200 811c 	bhi.w	8004ef6 <USBD_SignalDeviceEventHandler+0x24a>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <USBD_SignalDeviceEventHandler+0x18>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004e9f 	.word	0x08004e9f
 8004cc8:	08004e7f 	.word	0x08004e7f
 8004ccc:	08004e45 	.word	0x08004e45
 8004cd0:	08004e5f 	.word	0x08004e5f
 8004cd4:	08004ced 	.word	0x08004ced
 8004cd8:	08004ef7 	.word	0x08004ef7
 8004cdc:	08004ecb 	.word	0x08004ecb
 8004ce0:	08004ea7 	.word	0x08004ea7
 8004ce4:	08004ef7 	.word	0x08004ef7
 8004ce8:	08004e2b 	.word	0x08004e2b
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8004cec:	4b84      	ldr	r3, [pc, #528]	; (8004f00 <USBD_SignalDeviceEventHandler+0x254>)
 8004cee:	2202      	movs	r2, #2
 8004cf0:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8004cf2:	4b84      	ldr	r3, [pc, #528]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      device.remote_wakeup = (uint8_t)0;
 8004cfa:	4a82      	ldr	r2, [pc, #520]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004cfc:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8004d00:	f36f 0382 	bfc	r3, #2, #1
 8004d04:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 8004d08:	2307      	movs	r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e060      	b.n	8004dd0 <USBD_SignalDeviceEventHandler+0x124>
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f1c3 0307 	rsb	r3, r3, #7
 8004d14:	4a7b      	ldr	r2, [pc, #492]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004d16:	212c      	movs	r1, #44	; 0x2c
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	441a      	add	r2, r3
 8004d1e:	8913      	ldrh	r3, [r2, #8]
 8004d20:	f36f 1304 	bfc	r3, #4, #1
 8004d24:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f1c3 0307 	rsb	r3, r3, #7
 8004d2c:	4a75      	ldr	r2, [pc, #468]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	441a      	add	r2, r3
 8004d36:	8913      	ldrh	r3, [r2, #8]
 8004d38:	f36f 03c3 	bfc	r3, #3, #1
 8004d3c:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f1c3 0307 	rsb	r3, r3, #7
 8004d44:	4a6f      	ldr	r2, [pc, #444]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004d46:	212c      	movs	r1, #44	; 0x2c
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	441a      	add	r2, r3
 8004d4e:	8913      	ldrh	r3, [r2, #8]
 8004d50:	f36f 0382 	bfc	r3, #2, #1
 8004d54:	8113      	strh	r3, [r2, #8]
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	d036      	beq.n	8004dca <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f1c3 0307 	rsb	r3, r3, #7
 8004d62:	4a68      	ldr	r2, [pc, #416]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	7a1b      	ldrb	r3, [r3, #8]
 8004d6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d72:	b2db      	uxtb	r3, r3
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d028      	beq.n	8004dca <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8004d78:	4b62      	ldr	r3, [pc, #392]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	f1c2 0207 	rsb	r2, r2, #7
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8004d84:	495f      	ldr	r1, [pc, #380]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004d86:	202c      	movs	r0, #44	; 0x2c
 8004d88:	fb00 f202 	mul.w	r2, r0, r2
 8004d8c:	440a      	add	r2, r1
 8004d8e:	7912      	ldrb	r2, [r2, #4]
 8004d90:	4610      	mov	r0, r2
 8004d92:	4798      	blx	r3
 8004d94:	4603      	mov	r3, r0
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d117      	bne.n	8004dca <USBD_SignalDeviceEventHandler+0x11e>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f1c3 0307 	rsb	r3, r3, #7
 8004da0:	4a58      	ldr	r2, [pc, #352]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	441a      	add	r2, r3
 8004daa:	7a13      	ldrb	r3, [r2, #8]
 8004dac:	f36f 0300 	bfc	r3, #0, #1
 8004db0:	7213      	strb	r3, [r2, #8]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1c3 0307 	rsb	r3, r3, #7
 8004db8:	4a52      	ldr	r2, [pc, #328]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004dba:	212c      	movs	r1, #44	; 0x2c
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	441a      	add	r2, r3
 8004dc2:	8913      	ldrh	r3, [r2, #8]
 8004dc4:	f36f 0341 	bfc	r3, #1, #1
 8004dc8:	8113      	strh	r3, [r2, #8]
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d19b      	bne.n	8004d0e <USBD_SignalDeviceEventHandler+0x62>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 8004dd6:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8004dde:	2301      	movs	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e00a      	b.n	8004dfa <USBD_SignalDeviceEventHandler+0x14e>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f1c3 0301 	rsb	r3, r3, #1
 8004dea:	4a46      	ldr	r2, [pc, #280]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004dec:	4413      	add	r3, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f1      	bne.n	8004de4 <USBD_SignalDeviceEventHandler+0x138>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004e00:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e08:	7912      	ldrb	r2, [r2, #4]
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	2118      	movs	r1, #24
 8004e0e:	4798      	blx	r3
      if (NULL != device.events->reset)
 8004e10:	4b3c      	ldr	r3, [pc, #240]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <USBD_SignalDeviceEventHandler+0x17c>
      {
        device.events->reset();
 8004e1c:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	4798      	blx	r3
      }
      break;
 8004e26:	e067      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
 8004e28:	e066      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8004e2a:	4b36      	ldr	r3, [pc, #216]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <USBD_SignalDeviceEventHandler+0x196>
      {
        device.events->start_of_frame();
 8004e36:	4b33      	ldr	r3, [pc, #204]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4798      	blx	r3
      }
      break;
 8004e40:	e05a      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
 8004e42:	e059      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8004e44:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <USBD_SignalDeviceEventHandler+0x1b0>
      {
        device.events->connect();
 8004e50:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4798      	blx	r3
      }
      break;
 8004e5a:	e04d      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
 8004e5c:	e04c      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8004e5e:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <USBD_SignalDeviceEventHandler+0x254>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004e64:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <USBD_SignalDeviceEventHandler+0x1d0>
      {
        device.events->disconnect();
 8004e70:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4798      	blx	r3
      }
      break;
 8004e7a:	e03d      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
 8004e7c:	e03c      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8004e7e:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <USBD_SignalDeviceEventHandler+0x254>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <USBD_SignalDeviceEventHandler+0x1f0>
      {
        device.events->disconnect();
 8004e90:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004e92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4798      	blx	r3
      }
      break;
 8004e9a:	e02d      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
 8004e9c:	e02c      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8004e9e:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <USBD_SignalDeviceEventHandler+0x254>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
      break;
 8004ea4:	e028      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8004ea6:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004ea8:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <USBD_SignalDeviceEventHandler+0x254>)
 8004eae:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->wakeup)
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <USBD_SignalDeviceEventHandler+0x21c>
      {
        device.events->wakeup();
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	4798      	blx	r3
      }
      break;
 8004ec6:	e017      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
 8004ec8:	e016      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <USBD_SignalDeviceEventHandler+0x254>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004ed2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <USBD_SignalDeviceEventHandler+0x254>)
 8004ed8:	2205      	movs	r2, #5
 8004eda:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->suspend)
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004ede:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <USBD_SignalDeviceEventHandler+0x248>
      {
        device.events->suspend();
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <USBD_SignalDeviceEventHandler+0x258>)
 8004eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4798      	blx	r3
      }
      break;
 8004ef2:	e001      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
 8004ef4:	e000      	b.n	8004ef8 <USBD_SignalDeviceEventHandler+0x24c>
    default:
      break;
 8004ef6:	bf00      	nop
  }
}
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000c91 	.word	0x20000c91
 8004f04:	20000e9c 	.word	0x20000e9c

08004f08 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	460a      	mov	r2, r1
 8004f12:	71fb      	strb	r3, [r7, #7]
 8004f14:	4613      	mov	r3, r2
 8004f16:	71bb      	strb	r3, [r7, #6]
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	222c      	movs	r2, #44	; 0x2c
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	4a5e      	ldr	r2, [pc, #376]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004f26:	4413      	add	r3, r2
 8004f28:	3304      	adds	r3, #4
 8004f2a:	617b      	str	r3, [r7, #20]
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8004f2c:	4b5c      	ldr	r3, [pc, #368]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004f2e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004f32:	613b      	str	r3, [r7, #16]
  temp_dir = (uint32_t)device.CurrentDirection;
 8004f34:	4b5a      	ldr	r3, [pc, #360]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004f36:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8004f3a:	60fb      	str	r3, [r7, #12]
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	4b56      	ldr	r3, [pc, #344]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004f46:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004f54:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  /* choose what to do based on the event */
  switch (ep_event)
 8004f58:	79bb      	ldrb	r3, [r7, #6]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d013      	beq.n	8004f86 <USBD_SignalEndpointEvent_Handler+0x7e>
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d03a      	beq.n	8004fd8 <USBD_SignalEndpointEvent_Handler+0xd0>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d000      	beq.n	8004f68 <USBD_SignalEndpointEvent_Handler+0x60>
        default:
          break;
      }
      break;
    default:
      break;
 8004f66:	e08e      	b.n	8005086 <USBD_SignalEndpointEvent_Handler+0x17e>
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	8893      	ldrh	r3, [r2, #4]
 8004f6c:	f36f 03c3 	bfc	r3, #3, #1
 8004f70:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004f72:	4b4b      	ldr	r3, [pc, #300]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004f74:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d000      	beq.n	8004f7e <USBD_SignalEndpointEvent_Handler+0x76>
      {
        case 0:
          USBD_HandleEP0_SETUP();
          break;
        default:
          break;
 8004f7c:	e002      	b.n	8004f84 <USBD_SignalEndpointEvent_Handler+0x7c>
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_SETUP();
 8004f7e:	f7ff fe49 	bl	8004c14 <USBD_HandleEP0_SETUP>
          break;
 8004f82:	bf00      	nop
        default:
          break;
      }
      break;
 8004f84:	e07f      	b.n	8005086 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	8893      	ldrh	r3, [r2, #4]
 8004f8a:	f043 0320 	orr.w	r3, r3, #32
 8004f8e:	8093      	strh	r3, [r2, #4]
      if (ep->OutBytesAvailable == 0U)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d110      	bne.n	8004fba <USBD_SignalEndpointEvent_Handler+0xb2>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	60da      	str	r2, [r3, #12]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 8004f9e:	4b40      	ldr	r3, [pc, #256]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	7810      	ldrb	r0, [r2, #0]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	6911      	ldr	r1, [r2, #16]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	6952      	ldr	r2, [r2, #20]
 8004fb0:	4798      	blx	r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	609a      	str	r2, [r3, #8]
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	8893      	ldrh	r3, [r2, #4]
 8004fbe:	f36f 03c3 	bfc	r3, #3, #1
 8004fc2:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004fc4:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004fc6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d000      	beq.n	8004fd0 <USBD_SignalEndpointEvent_Handler+0xc8>
      {
        case 0:
          USBD_HandleEP0_OUT();
          break;
        default:
          break;
 8004fce:	e002      	b.n	8004fd6 <USBD_SignalEndpointEvent_Handler+0xce>
      }
      ep->OutInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_OUT();
 8004fd0:	f7ff fdf6 	bl	8004bc0 <USBD_HandleEP0_OUT>
          break;
 8004fd4:	bf00      	nop
        default:
          break;
      }
      break;
 8004fd6:	e056      	b.n	8005086 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d017      	beq.n	8005010 <USBD_SignalEndpointEvent_Handler+0x108>
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8004fe0:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	7810      	ldrb	r0, [r2, #0]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ff2:	4798      	blx	r3
 8004ff4:	60b8      	str	r0, [r7, #8]
        ep->InDataLeft -= (uint32_t)data_count;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	1ad2      	subs	r2, r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
        ep->InDataBuffer += (uint32_t)data_count;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	441a      	add	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800500e:	e03a      	b.n	8005086 <USBD_SignalEndpointEvent_Handler+0x17e>
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d121      	bne.n	8005062 <USBD_SignalEndpointEvent_Handler+0x15a>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01d      	beq.n	8005062 <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <USBD_SignalEndpointEvent_Handler+0x19c>)
 800502c:	88d2      	ldrh	r2, [r2, #6]
 800502e:	b292      	uxth	r2, r2
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8005030:	4293      	cmp	r3, r2
 8005032:	d016      	beq.n	8005062 <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	8892      	ldrh	r2, [r2, #4]
 800503c:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	fbb3 f1f2 	udiv	r1, r3, r2
 8005046:	fb02 f201 	mul.w	r2, r2, r1
 800504a:	1a9b      	subs	r3, r3, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <USBD_SignalEndpointEvent_Handler+0x15a>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	4610      	mov	r0, r2
 800505c:	2100      	movs	r1, #0
 800505e:	2200      	movs	r2, #0
 8005060:	4798      	blx	r3
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	619a      	str	r2, [r3, #24]
      ep->InInUse = (uint8_t)0;
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	8893      	ldrh	r3, [r2, #4]
 800506c:	f36f 1304 	bfc	r3, #4, #1
 8005070:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8005074:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d000      	beq.n	800507e <USBD_SignalEndpointEvent_Handler+0x176>
      {
        case 0:
          USBD_HandleEP0_IN();
          break;
        default:
          break;
 800507c:	e002      	b.n	8005084 <USBD_SignalEndpointEvent_Handler+0x17c>
      ep->InBytesAvailable = 0U;
      ep->InInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_IN();
 800507e:	f7ff fd79 	bl	8004b74 <USBD_HandleEP0_IN>
          break;
 8005082:	bf00      	nop
        default:
          break;
      }
      break;
 8005084:	bf00      	nop
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 800508c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	4b02      	ldr	r3, [pc, #8]	; (80050a0 <USBD_SignalEndpointEvent_Handler+0x198>)
 8005096:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
}
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000e9c 	.word	0x20000e9c
 80050a4:	20000c94 	.word	0x20000c94

080050a8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	db0c      	blt.n	80050d4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ba:	4909      	ldr	r1, [pc, #36]	; (80050e0 <__NVIC_ClearPendingIRQ+0x38>)
 80050bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	79fa      	ldrb	r2, [r7, #7]
 80050c4:	f002 021f 	and.w	r2, r2, #31
 80050c8:	2001      	movs	r0, #1
 80050ca:	fa00 f202 	lsl.w	r2, r0, r2
 80050ce:	3360      	adds	r3, #96	; 0x60
 80050d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e100 	.word	0xe000e100

080050e4 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	43db      	mvns	r3, r3
 8005116:	401a      	ands	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop

08005128 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800513a:	b2db      	uxtb	r3, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005158:	409a      	lsls	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	43db      	mvns	r3, r3
 80051a0:	401a      	ands	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop

080051b4 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80051c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80051ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf14      	ite	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	2300      	moveq	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	43db      	mvns	r3, r3
 800523c:	401a      	ands	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800525e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf14      	ite	ne
 8005282:	2301      	movne	r3, #1
 8005284:	2300      	moveq	r3, #0
 8005286:	b2db      	uxtb	r3, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <XMC_I2C_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	2110      	movs	r1, #16
 80052a6:	461a      	mov	r2, r3
 80052a8:	f7fd ffc0 	bl	800322c <XMC_USIC_CH_SetInterruptNodePointer>
}
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop

080052b4 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	4610      	mov	r0, r2
 8005302:	4619      	mov	r1, r3
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	f7fd ff6f 	bl	80031e8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff ff49 	bl	80051b4 <XMC_USIC_CH_TXFIFO_IsFull>
 8005322:	4603      	mov	r3, r0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff ff97 	bl	800526c <XMC_USIC_CH_RXFIFO_IsEmpty>
 800533e:	4603      	mov	r3, r0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7fb ff6b 	bl	8001230 <XMC_I2C_CH_GetReceivedData>
 800535a:	4603      	mov	r3, r0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f7fb fee7 	bl	800114c <XMC_I2C_CH_MasterTransmit>
}
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <I2C_MASTER_EnableEvent>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	f7fb ff65 	bl	8001264 <XMC_I2C_CH_EnableEvent>
}
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	f7fb ff73 	bl	800129c <XMC_I2C_CH_DisableEvent>
}
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fb fee5 	bl	8001198 <XMC_I2C_CH_MasterReceiveAck>
}
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb feff 	bl	80011e4 <XMC_I2C_CH_MasterReceiveNack>
}
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	2110      	movs	r1, #16
 80053fc:	f7ff ff66 	bl	80052cc <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7fb fe7b 	bl	8001100 <XMC_I2C_CH_MasterStop>
}
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	2104      	movs	r1, #4
 8005426:	f7ff ff51 	bl	80052cc <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	b29a      	uxth	r2, r3
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	461a      	mov	r2, r3
 800543a:	f7fb fdf9 	bl	8001030 <XMC_I2C_CH_MasterStart>
}
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	2108      	movs	r1, #8
 800545a:	f7ff ff37 	bl	80052cc <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	b29a      	uxth	r2, r3
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	461a      	mov	r2, r3
 800546e:	f7fb fe13 	bl	8001098 <XMC_I2C_CH_MasterRepeatedStart>
}
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d202      	bcs.n	8005490 <calculate_minfifosize+0x18>
  {
    result = a;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e001      	b.n	8005494 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	60fb      	str	r3, [r7, #12]
  }
  return (result);
 8005494:	68fb      	ldr	r3, [r7, #12]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop

080054a4 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	e001      	b.n	80054c4 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop

080054d0 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fee8 	bl	80052b4 <XMC_I2C_CH_GetStatusFlag>
 80054e4:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	4013      	ands	r3, r2
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	f7ff fee1 	bl	80052cc <XMC_I2C_CH_ClearStatusFlag>
}
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	460b      	mov	r3, r1
 800551e:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8005520:	2302      	movs	r3, #2
 8005522:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10d      	bne.n	800554c <I2C_MASTER_Transmit+0x3c>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 8005530:	7afa      	ldrb	r2, [r7, #11]
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	4611      	mov	r1, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f000 fb48 	bl	8005bd8 <I2C_MASTER_StartTransmitIRQ>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
 800554c:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop

08005558 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005570:	f7ff ffae 	bl	80054d0 <I2C_MASTER_GetFlagStatus>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d011      	beq.n	800559e <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005584:	f7ff fe02 	bl	800518c <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005592:	f7ff fdb7 	bl	8005104 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fd56 	bl	8006048 <I2C_MASTER_ProtocolHandler>
 800559c:	e105      	b.n	80057aa <I2C_MASTER_TransmitHandler+0x252>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8082 	bne.w	80056ac <I2C_MASTER_TransmitHandler+0x154>
  {
    if (handle->config->txFIFO_size > 0)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05a      	beq.n	800566a <I2C_MASTER_TransmitHandler+0x112>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d22e      	bcs.n	800561e <I2C_MASTER_TransmitHandler+0xc6>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80055c6:	f7ff feeb 	bl	80053a0 <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80055d4:	f7ff fdc8 	bl	8005168 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80055d8:	e017      	b.n	800560a <I2C_MASTER_TransmitHandler+0xb2>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d20f      	bcs.n	8005606 <I2C_MASTER_TransmitHandler+0xae>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7ff feb5 	bl	8005364 <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	60da      	str	r2, [r3, #12]
 8005604:	e001      	b.n	800560a <I2C_MASTER_TransmitHandler+0xb2>
          }
          else
          {
            break;
 8005606:	bf00      	nop
 8005608:	e0cf      	b.n	80057aa <I2C_MASTER_TransmitHandler+0x252>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fe80 	bl	8005310 <I2C_MASTER_IsTXFIFOFull>
 8005610:	4603      	mov	r3, r0
 8005612:	f083 0301 	eor.w	r3, r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1de      	bne.n	80055da <I2C_MASTER_TransmitHandler+0x82>
 800561c:	e0c5      	b.n	80057aa <I2C_MASTER_TransmitHandler+0x252>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005628:	f7ff fdb0 	bl	800518c <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005634:	b25b      	sxtb	r3, r3
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fd36 	bl	80050a8 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 800563c:	bf00      	nop
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fdca 	bl	80051dc <XMC_USIC_CH_TXFIFO_IsEmpty>
 8005648:	4603      	mov	r3, r0
 800564a:	f083 0301 	eor.w	r3, r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f4      	bne.n	800563e <I2C_MASTER_TransmitHandler+0xe6>

          if (ptr_runtime->bus_acquired == true)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80a4 	beq.w	80057aa <I2C_MASTER_TransmitHandler+0x252>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8a4 	bl	80057b0 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8005668:	e09f      	b.n	80057aa <I2C_MASTER_TransmitHandler+0x252>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	d20f      	bcs.n	8005696 <I2C_MASTER_TransmitHandler+0x13e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4413      	add	r3, r2
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4619      	mov	r1, r3
 8005686:	f7ff fe6d 	bl	8005364 <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	e089      	b.n	80057aa <I2C_MASTER_TransmitHandler+0x252>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8083 	beq.w	80057aa <I2C_MASTER_TransmitHandler+0x252>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f883 	bl	80057b0 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 80056aa:	e07e      	b.n	80057aa <I2C_MASTER_TransmitHandler+0x252>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d054      	beq.n	8005762 <I2C_MASTER_TransmitHandler+0x20a>
    {
      if ((handle->config->rxFIFO_size > 0))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <I2C_MASTER_TransmitHandler+0x198>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80056cc:	461a      	mov	r2, r3
 80056ce:	2301      	movs	r3, #1
 80056d0:	fa03 f202 	lsl.w	r2, r3, r2
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 80056dc:	4619      	mov	r1, r3
 80056de:	2301      	movs	r3, #1
 80056e0:	408b      	lsls	r3, r1
 80056e2:	4610      	mov	r0, r2
 80056e4:	4619      	mov	r1, r3
 80056e6:	f7ff fec7 	bl	8005478 <calculate_minfifosize>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	e001      	b.n	80056f4 <I2C_MASTER_TransmitHandler+0x19c>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 80056f0:	2302      	movs	r3, #2
 80056f2:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80056fe:	f7ff fd45 	bl	800518c <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8005702:	e023      	b.n	800574c <I2C_MASTER_TransmitHandler+0x1f4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d21c      	bcs.n	800574a <I2C_MASTER_TransmitHandler+0x1f2>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	d107      	bne.n	800572e <I2C_MASTER_TransmitHandler+0x1d6>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d103      	bne.n	800572e <I2C_MASTER_TransmitHandler+0x1d6>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff fe54 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 800572c:	e002      	b.n	8005734 <I2C_MASTER_TransmitHandler+0x1dc>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fe44 	bl	80053bc <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	429a      	cmp	r2, r3
 8005746:	d301      	bcc.n	800574c <I2C_MASTER_TransmitHandler+0x1f4>
          {
            break;
 8005748:	e00a      	b.n	8005760 <I2C_MASTER_TransmitHandler+0x208>
          }
        }
        else
        {
          break;
 800574a:	e009      	b.n	8005760 <I2C_MASTER_TransmitHandler+0x208>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fddf 	bl	8005310 <I2C_MASTER_IsTXFIFOFull>
 8005752:	4603      	mov	r3, r0
 8005754:	f083 0301 	eor.w	r3, r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1d2      	bne.n	8005704 <I2C_MASTER_TransmitHandler+0x1ac>
 800575e:	e017      	b.n	8005790 <I2C_MASTER_TransmitHandler+0x238>
 8005760:	e016      	b.n	8005790 <I2C_MASTER_TransmitHandler+0x238>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	d107      	bne.n	8005780 <I2C_MASTER_TransmitHandler+0x228>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d103      	bne.n	8005780 <I2C_MASTER_TransmitHandler+0x228>
      {
        I2C_MASTER_ReceiveNACK(handle);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fe2b 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 800577e:	e002      	b.n	8005786 <I2C_MASTER_TransmitHandler+0x22e>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fe1b 	bl	80053bc <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d104      	bne.n	80057aa <I2C_MASTER_TransmitHandler+0x252>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057a6:	f7ff fdfb 	bl	80053a0 <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057c4:	f7ff fdec 	bl	80053a0 <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>
  {
    ptr_runtime->bus_acquired = false;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fe07 	bl	80053ec <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 80057de:	bf00      	nop
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fc9f 	bl	8005128 <XMC_USIC_CH_GetTransmitBufferStatus>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b80      	cmp	r3, #128	; 0x80
 80057ee:	d0f7      	beq.n	80057e0 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x30>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x5a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	4798      	blx	r3
  }
}
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af04      	add	r7, sp, #16
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	460b      	mov	r3, r1
 800581e:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8005820:	2302      	movs	r3, #2
 8005822:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <I2C_MASTER_Receive+0x42>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
 8005830:	7afa      	ldrb	r2, [r7, #11]
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005840:	9302      	str	r3, [sp, #8]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	4611      	mov	r1, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	f000 fa2f 	bl	8005cac <I2C_MASTER_StartReceiveIRQ>
 800584e:	4603      	mov	r3, r0
 8005850:	75fb      	strb	r3, [r7, #23]
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <I2C_MASTER_lReceive_FIFOData>:
/***********************************************************************************************************************
     Rx FIFO data
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address,
                                     const uint32_t count)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	460b      	mov	r3, r1
 800586a:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	617b      	str	r3, [r7, #20]

  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fcea 	bl	8005250 <XMC_USIC_CH_RXFIFO_Flush>

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	f000 fc26 	bl	80060d0 <I2C_MASTER_lReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800588e:	f7ff fcb9 	bl	8005204 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d06e      	beq.n	8005976 <I2C_MASTER_lReceive_FIFOData+0x11a>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d013      	beq.n	80058cc <I2C_MASTER_lReceive_FIFOData+0x70>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d00d      	beq.n	80058cc <I2C_MASTER_lReceive_FIFOData+0x70>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058b6:	f7ff fd65 	bl	8005384 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058c4:	4610      	mov	r0, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	f7ff fce4 	bl	8005294 <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f000 f957 	bl	8005b84 <I2C_MASTER_lSendStart_Or_RepeatedStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058de:	2b02      	cmp	r3, #2
 80058e0:	f040 80a5 	bne.w	8005a2e <I2C_MASTER_lReceive_FIFOData+0x1d2>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02a      	beq.n	8005946 <I2C_MASTER_lReceive_FIFOData+0xea>
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80058f0:	e01f      	b.n	8005932 <I2C_MASTER_lReceive_FIFOData+0xd6>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d217      	bcs.n	800592e <I2C_MASTER_lReceive_FIFOData+0xd2>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	d107      	bne.n	800591c <I2C_MASTER_lReceive_FIFOData+0xc0>
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d103      	bne.n	800591c <I2C_MASTER_lReceive_FIFOData+0xc0>
      {
          I2C_MASTER_ReceiveNACK(handle);
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff fd5d 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 800591a:	e002      	b.n	8005922 <I2C_MASTER_lReceive_FIFOData+0xc6>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fd4d 	bl	80053bc <I2C_MASTER_ReceiveACK>
        }
      ptr_runtime->tx_data_index++;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	60da      	str	r2, [r3, #12]
 800592c:	e001      	b.n	8005932 <I2C_MASTER_lReceive_FIFOData+0xd6>
      }
      else
      {
        break;
 800592e:	bf00      	nop
 8005930:	e07d      	b.n	8005a2e <I2C_MASTER_lReceive_FIFOData+0x1d2>
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff fcec 	bl	8005310 <I2C_MASTER_IsTXFIFOFull>
 8005938:	4603      	mov	r3, r0
 800593a:	f083 0301 	eor.w	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1d6      	bne.n	80058f2 <I2C_MASTER_lReceive_FIFOData+0x96>
 8005944:	e073      	b.n	8005a2e <I2C_MASTER_lReceive_FIFOData+0x1d2>
    } /* end of while */
      }
      else
      {
        /* if it is last byte and send_nack true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	429a      	cmp	r2, r3
 8005952:	d107      	bne.n	8005964 <I2C_MASTER_lReceive_FIFOData+0x108>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d103      	bne.n	8005964 <I2C_MASTER_lReceive_FIFOData+0x108>
    {
      I2C_MASTER_ReceiveNACK(handle);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f7ff fd39 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005962:	e002      	b.n	800596a <I2C_MASTER_lReceive_FIFOData+0x10e>
    }
    else
    {
      I2C_MASTER_ReceiveACK(handle);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fd29 	bl	80053bc <I2C_MASTER_ReceiveACK>
    }
    ptr_runtime->tx_data_index++;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	60da      	str	r2, [r3, #12]
 8005974:	e05b      	b.n	8005a2e <I2C_MASTER_lReceive_FIFOData+0x1d2>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800597e:	2b00      	cmp	r3, #0
 8005980:	d031      	beq.n	80059e6 <I2C_MASTER_lReceive_FIFOData+0x18a>
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800598c:	f7ff fbfe 	bl	800518c <XMC_USIC_CH_TXFIFO_DisableEvent>
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8005990:	e01f      	b.n	80059d2 <I2C_MASTER_lReceive_FIFOData+0x176>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d217      	bcs.n	80059ce <I2C_MASTER_lReceive_FIFOData+0x172>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d107      	bne.n	80059bc <I2C_MASTER_lReceive_FIFOData+0x160>
               (ptr_runtime->send_nack == true))
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d103      	bne.n	80059bc <I2C_MASTER_lReceive_FIFOData+0x160>
               (ptr_runtime->send_nack == true))
          {
            I2C_MASTER_ReceiveNACK(handle);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fd0d 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 80059ba:	e002      	b.n	80059c2 <I2C_MASTER_lReceive_FIFOData+0x166>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff fcfd 	bl	80053bc <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	60da      	str	r2, [r3, #12]
 80059cc:	e001      	b.n	80059d2 <I2C_MASTER_lReceive_FIFOData+0x176>
        }
        else
        {
          break;
 80059ce:	bf00      	nop
 80059d0:	e02d      	b.n	8005a2e <I2C_MASTER_lReceive_FIFOData+0x1d2>
    if (handle->config->txFIFO_size > 0)
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fc9c 	bl	8005310 <I2C_MASTER_IsTXFIFOFull>
 80059d8:	4603      	mov	r3, r0
 80059da:	f083 0301 	eor.w	r3, r3, #1
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1d6      	bne.n	8005992 <I2C_MASTER_lReceive_FIFOData+0x136>
 80059e4:	e023      	b.n	8005a2e <I2C_MASTER_lReceive_FIFOData+0x1d2>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d21d      	bcs.n	8005a2e <I2C_MASTER_lReceive_FIFOData+0x1d2>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d107      	bne.n	8005a10 <I2C_MASTER_lReceive_FIFOData+0x1b4>
             (ptr_runtime->send_nack == true))
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d103      	bne.n	8005a10 <I2C_MASTER_lReceive_FIFOData+0x1b4>
             (ptr_runtime->send_nack == true))
        {
          I2C_MASTER_ReceiveNACK(handle);
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fce3 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005a0e:	e009      	b.n	8005a24 <I2C_MASTER_lReceive_FIFOData+0x1c8>
        }
        else
        {
          XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED |
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 8005a1a:	f7ff fc57 	bl	80052cc <XMC_I2C_CH_ClearStatusFlag>
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
          I2C_MASTER_ReceiveACK(handle);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fccc 	bl	80053bc <I2C_MASTER_ReceiveACK>
        }
        ptr_runtime->tx_data_index++;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	60da      	str	r2, [r3, #12]
      }
    } /* end of else */
   } /* end of  if(send_start == false) */
}
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <I2C_MASTER_lReceive_StdData>:
/***********************************************************************************************************************
    Standard receive mode
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	617b      	str	r3, [r7, #20]

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005a52:	f7ff fb47 	bl	80050e4 <XMC_USIC_CH_EnableEvent>
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
 8005a56:	7afb      	ldrb	r3, [r7, #11]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d042      	beq.n	8005ae2 <I2C_MASTER_lReceive_StdData+0xae>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d013      	beq.n	8005a90 <I2C_MASTER_lReceive_StdData+0x5c>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d00d      	beq.n	8005a90 <I2C_MASTER_lReceive_StdData+0x5c>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005a7a:	f7ff fc83 	bl	8005384 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f7ff fc02 	bl	8005294 <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f000 f875 	bl	8005b84 <I2C_MASTER_lSendStart_Or_RepeatedStart>

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d005      	beq.n	8005ab2 <I2C_MASTER_lReceive_StdData+0x7e>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d165      	bne.n	8005b7e <I2C_MASTER_lReceive_StdData+0x14a>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d107      	bne.n	8005ad0 <I2C_MASTER_lReceive_StdData+0x9c>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d103      	bne.n	8005ad0 <I2C_MASTER_lReceive_StdData+0x9c>
    {
        I2C_MASTER_ReceiveNACK(handle);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff fc83 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005ace:	e002      	b.n	8005ad6 <I2C_MASTER_lReceive_StdData+0xa2>
    }
    else
    {
    I2C_MASTER_ReceiveACK(handle);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fc73 	bl	80053bc <I2C_MASTER_ReceiveACK>
      }
    ptr_runtime->tx_data_index++;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	60da      	str	r2, [r3, #12]
 8005ae0:	e04d      	b.n	8005b7e <I2C_MASTER_lReceive_StdData+0x14a>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d117      	bne.n	8005b1e <I2C_MASTER_lReceive_StdData+0xea>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d107      	bne.n	8005b0c <I2C_MASTER_lReceive_StdData+0xd8>
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d103      	bne.n	8005b0c <I2C_MASTER_lReceive_StdData+0xd8>
      {
        I2C_MASTER_ReceiveNACK(handle);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fc65 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005b0a:	e002      	b.n	8005b12 <I2C_MASTER_lReceive_StdData+0xde>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff fc55 	bl	80053bc <I2C_MASTER_ReceiveACK>
      }

      ptr_runtime->tx_data_index++;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	60da      	str	r2, [r3, #12]
 8005b1c:	e02f      	b.n	8005b7e <I2C_MASTER_lReceive_StdData+0x14a>
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is enabled
***********************************************************************************************************************/
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b28:	f7ff fb30 	bl	800518c <XMC_USIC_CH_TXFIFO_DisableEvent>

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8005b2c:	e01e      	b.n	8005b6c <I2C_MASTER_lReceive_StdData+0x138>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d217      	bcs.n	8005b6a <I2C_MASTER_lReceive_StdData+0x136>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d107      	bne.n	8005b58 <I2C_MASTER_lReceive_StdData+0x124>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d103      	bne.n	8005b58 <I2C_MASTER_lReceive_StdData+0x124>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff fc3f 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005b56:	e002      	b.n	8005b5e <I2C_MASTER_lReceive_StdData+0x12a>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fc2f 	bl	80053bc <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	60da      	str	r2, [r3, #12]
 8005b68:	e000      	b.n	8005b6c <I2C_MASTER_lReceive_StdData+0x138>
        }
        else
        {
          break;
 8005b6a:	e008      	b.n	8005b7e <I2C_MASTER_lReceive_StdData+0x14a>
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fbcf 	bl	8005310 <I2C_MASTER_IsTXFIFOFull>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f083 0301 	eor.w	r3, r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1d7      	bne.n	8005b2e <I2C_MASTER_lReceive_StdData+0xfa>
          break;
        }
      } /* end of while */
    } /* end of else */
  } /* end of else */
} /* end of function */
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	71fb      	strb	r3, [r7, #7]
  if (handle->runtime->bus_acquired == true)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x30>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	4611      	mov	r1, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	f7ff fc49 	bl	8005444 <I2C_MASTER_SendRepeatedStart>
 8005bb2:	e00d      	b.n	8005bd0 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x4c>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	4611      	mov	r1, r2
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7ff fc20 	bl	8005410 <I2C_MASTER_SendStart>
  }
}
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop

08005bd8 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	460b      	mov	r3, r1
 8005be6:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
 8005be8:	2302      	movs	r3, #2
 8005bea:	75fb      	strb	r3, [r7, #23]
  ptr_runtime = handle->runtime;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
 8005bf4:	f083 0301 	eor.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <I2C_MASTER_StartTransmitIRQ+0x3a>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f083 0301 	eor.w	r3, r3, #1
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <I2C_MASTER_StartTransmitIRQ+0x46>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <I2C_MASTER_StartTransmitIRQ+0x46>
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <I2C_MASTER_StartTransmitIRQ+0x4c>
  {
  status = I2C_MASTER_STATUS_FAILURE;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
 8005c22:	e03e      	b.n	8005ca2 <I2C_MASTER_StartTransmitIRQ+0xca>
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2200      	movs	r2, #0
 8005c28:	619a      	str	r2, [r3, #24]

    if (ptr_runtime->tx_busy == false)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f083 0301 	eor.w	r3, r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d032      	beq.n	8005ca2 <I2C_MASTER_StartTransmitIRQ+0xca>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	601a      	str	r2, [r3, #0]
    ptr_runtime->tx_data_count = size;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	609a      	str	r2, [r3, #8]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	60da      	str	r2, [r3, #12]
    ptr_runtime->tx_busy = true;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    ptr_runtime->send_stop = send_stop;
 8005c56:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	61da      	str	r2, [r3, #28]

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c64:	f7ff fb8e 	bl	8005384 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	f7ff fb0d 	bl	8005294 <XMC_I2C_CH_SetInterruptNodePointer>

    if (send_start == true)
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <I2C_MASTER_StartTransmitIRQ+0xb4>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f7ff ff7d 	bl	8005b84 <I2C_MASTER_lSendStart_Or_RepeatedStart>
 8005c8a:	e008      	b.n	8005c9e <I2C_MASTER_StartTransmitIRQ+0xc6>
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7ff fa55 	bl	8005148 <XMC_USIC_CH_TriggerServiceRequest>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]
  }
  }
  return (status);
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <I2C_MASTER_StartReceiveIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	75fb      	strb	r3, [r7, #23]
  ptr_runtime = handle->runtime;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	613b      	str	r3, [r7, #16]

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <I2C_MASTER_StartReceiveIRQ+0x4c>
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	f083 0301 	eor.w	r3, r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d009      	beq.n	8005cec <I2C_MASTER_StartReceiveIRQ+0x40>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f083 0301 	eor.w	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <I2C_MASTER_StartReceiveIRQ+0x4c>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <I2C_MASTER_StartReceiveIRQ+0x4c>
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <I2C_MASTER_StartReceiveIRQ+0x52>
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
 8005cfc:	e043      	b.n	8005d86 <I2C_MASTER_StartReceiveIRQ+0xda>
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f083 0301 	eor.w	r3, r3, #1
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d03a      	beq.n	8005d86 <I2C_MASTER_StartReceiveIRQ+0xda>
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2201      	movs	r2, #1
 8005d14:	619a      	str	r2, [r3, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	605a      	str	r2, [r3, #4]
    ptr_runtime->rx_data_count = count;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	611a      	str	r2, [r3, #16]
    ptr_runtime->tx_data = data;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	601a      	str	r2, [r3, #0]
    ptr_runtime->tx_data_count = count;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	609a      	str	r2, [r3, #8]
    ptr_runtime->tx_busy = true;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    ptr_runtime->rx_busy = true;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    ptr_runtime->send_stop = send_stop;
 8005d3e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	61da      	str	r2, [r3, #28]
    ptr_runtime->send_nack = send_nack;
 8005d46:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
    ptr_runtime->rx_data_index = 0U;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2200      	movs	r2, #0
 8005d52:	615a      	str	r2, [r3, #20]
    ptr_runtime->tx_data_index = 0U;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2200      	movs	r2, #0
 8005d58:	60da      	str	r2, [r3, #12]

    if (handle->config->rxFIFO_size > 0)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <I2C_MASTER_StartReceiveIRQ+0xca>
    {
      I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f7ff fd74 	bl	800585c <I2C_MASTER_lReceive_FIFOData>
 8005d74:	e005      	b.n	8005d82 <I2C_MASTER_StartReceiveIRQ+0xd6>
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	f7ff fe59 	bl	8005a34 <I2C_MASTER_lReceive_StdData>
    }
    status = I2C_MASTER_STATUS_SUCCESS;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
  }
  }
  return (status);
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]

  if (ptr_runtime->rx_busy == true)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8111 	beq.w	8005fd2 <I2C_MASTER_ReceiveHandler+0x242>
  {
    if (handle->config->rxFIFO_size > 0)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80c7 	beq.w	8005f4c <I2C_MASTER_ReceiveHandler+0x1bc>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8005dbe:	e020      	b.n	8005e02 <I2C_MASTER_ReceiveHandler+0x72>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	18d4      	adds	r4, r2, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fabc 	bl	8005348 <I2C_MASTER_GetReceivedByte>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d10b      	bne.n	8005e02 <I2C_MASTER_ReceiveHandler+0x72>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8005dfc:	f7ff fa14 	bl	8005228 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 8005e00:	e008      	b.n	8005e14 <I2C_MASTER_ReceiveHandler+0x84>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fa92 	bl	800532c <I2C_MASTER_IsRXFIFOEmpty>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f083 0301 	eor.w	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1d5      	bne.n	8005dc0 <I2C_MASTER_ReceiveHandler+0x30>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d277      	bcs.n	8005f10 <I2C_MASTER_ReceiveHandler+0x180>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f000 f94f 	bl	80060d0 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d015      	beq.n	8005e6a <I2C_MASTER_ReceiveHandler+0xda>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e46:	461a      	mov	r2, r3
 8005e48:	2301      	movs	r3, #1
 8005e4a:	fa03 f202 	lsl.w	r2, r3, r2
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8005e56:	4619      	mov	r1, r3
 8005e58:	2301      	movs	r3, #1
 8005e5a:	408b      	lsls	r3, r1
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f7ff fb0a 	bl	8005478 <calculate_minfifosize>
 8005e64:	4603      	mov	r3, r0
 8005e66:	73bb      	strb	r3, [r7, #14]
 8005e68:	e001      	b.n	8005e6e <I2C_MASTER_ReceiveHandler+0xde>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	73bb      	strb	r3, [r7, #14]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d033      	beq.n	8005ee2 <I2C_MASTER_ReceiveHandler+0x152>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8005e7a:	e027      	b.n	8005ecc <I2C_MASTER_ReceiveHandler+0x13c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d220      	bcs.n	8005eca <I2C_MASTER_ReceiveHandler+0x13a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d107      	bne.n	8005ea6 <I2C_MASTER_ReceiveHandler+0x116>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d103      	bne.n	8005ea6 <I2C_MASTER_ReceiveHandler+0x116>
              {
                I2C_MASTER_ReceiveNACK(handle);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fa98 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005ea4:	e002      	b.n	8005eac <I2C_MASTER_ReceiveHandler+0x11c>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fa88 	bl	80053bc <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
 8005ebc:	7bfa      	ldrb	r2, [r7, #15]
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d303      	bcc.n	8005ecc <I2C_MASTER_ReceiveHandler+0x13c>
              {
                fifo_lindex = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73fb      	strb	r3, [r7, #15]
                break;
 8005ec8:	e00a      	b.n	8005ee0 <I2C_MASTER_ReceiveHandler+0x150>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 8005eca:	e009      	b.n	8005ee0 <I2C_MASTER_ReceiveHandler+0x150>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fa1f 	bl	8005310 <I2C_MASTER_IsTXFIFOFull>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ce      	bne.n	8005e7c <I2C_MASTER_ReceiveHandler+0xec>
 8005ede:	e017      	b.n	8005f10 <I2C_MASTER_ReceiveHandler+0x180>
 8005ee0:	e016      	b.n	8005f10 <I2C_MASTER_ReceiveHandler+0x180>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d107      	bne.n	8005f00 <I2C_MASTER_ReceiveHandler+0x170>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d103      	bne.n	8005f00 <I2C_MASTER_ReceiveHandler+0x170>
         {
           I2C_MASTER_ReceiveNACK(handle);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fa6b 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005efe:	e002      	b.n	8005f06 <I2C_MASTER_ReceiveHandler+0x176>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fa5b 	bl	80053bc <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	695a      	ldr	r2, [r3, #20]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d15a      	bne.n	8005fd2 <I2C_MASTER_ReceiveHandler+0x242>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8005f26:	f7ff f97f 	bl	8005228 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005f34:	f7ff f8e6 	bl	8005104 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d046      	beq.n	8005fd2 <I2C_MASTER_ReceiveHandler+0x242>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f847 	bl	8005fd8 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 8005f4a:	e042      	b.n	8005fd2 <I2C_MASTER_ReceiveHandler+0x242>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	18d4      	adds	r4, r2, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff f9f6 	bl	8005348 <I2C_MASTER_GetReceivedByte>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d21d      	bcs.n	8005fb2 <I2C_MASTER_ReceiveHandler+0x222>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d227      	bcs.n	8005fd2 <I2C_MASTER_ReceiveHandler+0x242>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d107      	bne.n	8005fa0 <I2C_MASTER_ReceiveHandler+0x210>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d103      	bne.n	8005fa0 <I2C_MASTER_ReceiveHandler+0x210>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fa1b 	bl	80053d4 <I2C_MASTER_ReceiveNACK>
 8005f9e:	e002      	b.n	8005fa6 <I2C_MASTER_ReceiveHandler+0x216>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fa0b 	bl	80053bc <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	60da      	str	r2, [r3, #12]
 8005fb0:	e00f      	b.n	8005fd2 <I2C_MASTER_ReceiveHandler+0x242>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005fbc:	f7ff f8a2 	bl	8005104 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <I2C_MASTER_ReceiveHandler+0x242>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f803 	bl	8005fd8 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd90      	pop	{r4, r7, pc}

08005fd8 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d10f      	bne.n	800600e <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x36>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8005fee:	bf00      	nop
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff f897 	bl	8005128 <XMC_USIC_CH_GetTransmitBufferStatus>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d0f7      	beq.n	8005ff0 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    I2C_MASTER_SendStop(handle);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff f9ef 	bl	80053ec <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 800600e:	bf00      	nop
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff f887 	bl	8005128 <XMC_USIC_CH_GetTransmitBufferStatus>
 800601a:	4603      	mov	r3, r0
 800601c:	2b80      	cmp	r3, #128	; 0x80
 800601e:	d0f7      	beq.n	8006010 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6a>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	4798      	blx	r3
  }
}
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f92d 	bl	80052b4 <XMC_I2C_CH_GetStatusFlag>
 800605a:	60f8      	str	r0, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <I2C_MASTER_ProtocolHandler+0x38>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	2120      	movs	r1, #32
 8006074:	f7ff fa3e 	bl	80054f4 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <I2C_MASTER_ProtocolHandler+0x5c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	2140      	movs	r1, #64	; 0x40
 8006098:	f7ff fa2c 	bl	80054f4 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00d      	beq.n	80060ca <I2C_MASTER_ProtocolHandler+0x82>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f403 7381 	and.w	r3, r3, #258	; 0x102
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060be:	f7ff fa19 	bl	80054f4 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	4798      	blx	r3
  }
}
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80060e2:	461a      	mov	r2, r3
 80060e4:	2301      	movs	r3, #1
 80060e6:	4093      	lsls	r3, r2
 80060e8:	75bb      	strb	r3, [r7, #22]

  if ((handle->config->txFIFO_size > 0))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <I2C_MASTER_lReconfigureRxFIFO+0x38>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80060fe:	461a      	mov	r2, r3
 8006100:	2301      	movs	r3, #1
 8006102:	4093      	lsls	r3, r2
 8006104:	75fb      	strb	r3, [r7, #23]
 8006106:	e001      	b.n	800610c <I2C_MASTER_lReconfigureRxFIFO+0x3c>
  }
  else
  {
    tx_fifo_size = 1U;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
 800610c:	7dfa      	ldrb	r2, [r7, #23]
 800610e:	7dbb      	ldrb	r3, [r7, #22]
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	f7ff f9b0 	bl	8005478 <calculate_minfifosize>
 8006118:	6138      	str	r0, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 800611a:	6838      	ldr	r0, [r7, #0]
 800611c:	6939      	ldr	r1, [r7, #16]
 800611e:	f7ff f9ab 	bl	8005478 <calculate_minfifosize>
 8006122:	4603      	mov	r3, r0
 8006124:	73fb      	strb	r3, [r7, #15]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800612e:	461a      	mov	r2, r3
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	3b01      	subs	r3, #1
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	f7ff f8d7 	bl	80052ec <I2C_MASTER_SetRXFIFOTriggerLimit>
}
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <__NVIC_GetPriorityGrouping+0x18>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006150:	0a1b      	lsrs	r3, r3, #8
}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800616a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616e:	2b00      	cmp	r3, #0
 8006170:	db0b      	blt.n	800618a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006172:	4908      	ldr	r1, [pc, #32]	; (8006194 <__NVIC_EnableIRQ+0x34>)
 8006174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	79fa      	ldrb	r2, [r7, #7]
 800617c:	f002 021f 	and.w	r2, r2, #31
 8006180:	2001      	movs	r0, #1
 8006182:	fa00 f202 	lsl.w	r2, r0, r2
 8006186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	e000e100 	.word	0xe000e100

08006198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db0a      	blt.n	80061c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ac:	490d      	ldr	r1, [pc, #52]	; (80061e4 <__NVIC_SetPriority+0x4c>)
 80061ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	0092      	lsls	r2, r2, #2
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	440b      	add	r3, r1
 80061bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80061c0:	e00a      	b.n	80061d8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c2:	4909      	ldr	r1, [pc, #36]	; (80061e8 <__NVIC_SetPriority+0x50>)
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	3b04      	subs	r3, #4
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	0092      	lsls	r2, r2, #2
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	440b      	add	r3, r1
 80061d6:	761a      	strb	r2, [r3, #24]
  }
}
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e000e100 	.word	0xe000e100
 80061e8:	e000ed00 	.word	0xe000ed00

080061ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b089      	sub	sp, #36	; 0x24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f1c3 0307 	rsb	r3, r3, #7
 8006206:	2b06      	cmp	r3, #6
 8006208:	bf28      	it	cs
 800620a:	2306      	movcs	r3, #6
 800620c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3306      	adds	r3, #6
 8006212:	2b06      	cmp	r3, #6
 8006214:	d902      	bls.n	800621c <NVIC_EncodePriority+0x30>
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3b01      	subs	r3, #1
 800621a:	e000      	b.n	800621e <NVIC_EncodePriority+0x32>
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2201      	movs	r2, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	1e5a      	subs	r2, r3, #1
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	401a      	ands	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2101      	movs	r1, #1
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	1e59      	subs	r1, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8006240:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8006242:	4618      	mov	r0, r3
 8006244:	3724      	adds	r7, #36	; 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop

08006250 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
 800625c:	4613      	mov	r3, r2
 800625e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006260:	78f8      	ldrb	r0, [r7, #3]
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	3306      	adds	r3, #6
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8006272:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006274:	431a      	orrs	r2, r3
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	1d83      	adds	r3, r0, #6
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop

0800628c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	f023 020f 	bic.w	r2, r3, #15
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop

080062fc <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	2104      	movs	r1, #4
 8006308:	f7ff ffe4 	bl	80062d4 <XMC_USIC_CH_SetMode>
}
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop

08006314 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(1000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)0, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006318:	4805      	ldr	r0, [pc, #20]	; (8006330 <I2C_MASTER_0_disable_io+0x1c>)
 800631a:	2100      	movs	r1, #0
 800631c:	2200      	movs	r2, #0
 800631e:	f7fa fd6d 	bl	8000dfc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)2, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006322:	4803      	ldr	r0, [pc, #12]	; (8006330 <I2C_MASTER_0_disable_io+0x1c>)
 8006324:	2102      	movs	r1, #2
 8006326:	2200      	movs	r2, #0
 8006328:	f7fa fd68 	bl	8000dfc <XMC_GPIO_SetMode>
}
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	48028500 	.word	0x48028500

08006334 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)0, I2C_MASTER_0_sda_pin_config.mode);
 8006338:	23c8      	movs	r3, #200	; 0xc8
 800633a:	4806      	ldr	r0, [pc, #24]	; (8006354 <I2C_MASTER_0_enable_io+0x20>)
 800633c:	2100      	movs	r1, #0
 800633e:	461a      	mov	r2, r3
 8006340:	f7fa fd5c 	bl	8000dfc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)2, I2C_MASTER_0_scl_pin_config.mode);
 8006344:	23c8      	movs	r3, #200	; 0xc8
 8006346:	4803      	ldr	r0, [pc, #12]	; (8006354 <I2C_MASTER_0_enable_io+0x20>)
 8006348:	2102      	movs	r1, #2
 800634a:	461a      	mov	r2, r3
 800634c:	f7fa fd56 	bl	8000dfc <XMC_GPIO_SetMode>
}
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	48028500 	.word	0x48028500

08006358 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 
  const uint32_t tx_fifo_events = (uint32_t)(0);
 800635e:	2300      	movs	r3, #0
 8006360:	607b      	str	r3, [r7, #4]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8006362:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8006366:	603b      	str	r3, [r7, #0]
  XMC_I2C_CH_Init(XMC_I2C2_CH0, &I2C_MASTER_0_channel_config);
 8006368:	4832      	ldr	r0, [pc, #200]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 800636a:	4933      	ldr	r1, [pc, #204]	; (8006438 <I2C_MASTER_0_init+0xe0>)
 800636c:	f7fa fdc8 	bl	8000f00 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH0, XMC_USIC_CH_INPUT_DX0, 1);
 8006370:	4830      	ldr	r0, [pc, #192]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 8006372:	2100      	movs	r1, #0
 8006374:	2201      	movs	r2, #1
 8006376:	f7ff ff6b 	bl	8006250 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH0, XMC_USIC_CH_INPUT_DX1, 0);
 800637a:	482e      	ldr	r0, [pc, #184]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 800637c:	2101      	movs	r1, #1
 800637e:	2200      	movs	r2, #0
 8006380:	f7ff ff66 	bl	8006250 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C2_CH0,
 8006384:	482b      	ldr	r0, [pc, #172]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 8006386:	2110      	movs	r1, #16
 8006388:	2204      	movs	r2, #4
 800638a:	2301      	movs	r3, #1
 800638c:	f7fc feda 	bl	8003144 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C2_CH0,
 8006390:	4828      	ldr	r0, [pc, #160]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 8006392:	2110      	movs	r1, #16
 8006394:	2203      	movs	r2, #3
 8006396:	f7fc ff65 	bl	8003264 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)3));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C2_CH0, tx_fifo_events);
 800639a:	4826      	ldr	r0, [pc, #152]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	f7ff ff75 	bl	800628c <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C2_CH0,
 80063a2:	4824      	ldr	r0, [pc, #144]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 80063a4:	2100      	movs	r1, #0
 80063a6:	2204      	movs	r2, #4
 80063a8:	230f      	movs	r3, #15
 80063aa:	f7fc fef3 	bl	8003194 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C2_CH0,
 80063ae:	4821      	ldr	r0, [pc, #132]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 80063b0:	2110      	movs	r1, #16
 80063b2:	2202      	movs	r2, #2
 80063b4:	f7fc ff74 	bl	80032a0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x2));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C2_CH0,
 80063b8:	481e      	ldr	r0, [pc, #120]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 80063ba:	2113      	movs	r1, #19
 80063bc:	2202      	movs	r2, #2
 80063be:	f7fc ff6f 	bl	80032a0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x2));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C2_CH0, rx_fifo_events);
 80063c2:	481c      	ldr	r0, [pc, #112]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	f7ff ff73 	bl	80062b0 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C2_CH0,
 80063ca:	481a      	ldr	r0, [pc, #104]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 80063cc:	2110      	movs	r1, #16
 80063ce:	2200      	movs	r2, #0
 80063d0:	f7fc ff2c 	bl	800322c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)0));
  XMC_I2C_CH_Start(XMC_I2C2_CH0);
 80063d4:	4817      	ldr	r0, [pc, #92]	; (8006434 <I2C_MASTER_0_init+0xdc>)
 80063d6:	f7ff ff91 	bl	80062fc <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)0, &I2C_MASTER_0_sda_pin_config);
 80063da:	4818      	ldr	r0, [pc, #96]	; (800643c <I2C_MASTER_0_init+0xe4>)
 80063dc:	2100      	movs	r1, #0
 80063de:	4a18      	ldr	r2, [pc, #96]	; (8006440 <I2C_MASTER_0_init+0xe8>)
 80063e0:	f7f9 ffe2 	bl	80003a8 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)2, &I2C_MASTER_0_scl_pin_config);
 80063e4:	4815      	ldr	r0, [pc, #84]	; (800643c <I2C_MASTER_0_init+0xe4>)
 80063e6:	2102      	movs	r1, #2
 80063e8:	4a16      	ldr	r2, [pc, #88]	; (8006444 <I2C_MASTER_0_init+0xec>)
 80063ea:	f7f9 ffdd 	bl	80003a8 <XMC_GPIO_Init>
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)99, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80063ee:	f7ff fea9 	bl	8006144 <__NVIC_GetPriorityGrouping>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4618      	mov	r0, r3
 80063f6:	213f      	movs	r1, #63	; 0x3f
 80063f8:	2200      	movs	r2, #0
 80063fa:	f7ff fef7 	bl	80061ec <NVIC_EncodePriority>
 80063fe:	4603      	mov	r3, r0
 8006400:	2063      	movs	r0, #99	; 0x63
 8006402:	4619      	mov	r1, r3
 8006404:	f7ff fec8 	bl	8006198 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)99);/* Rx interrupt priority settings */
 8006408:	2063      	movs	r0, #99	; 0x63
 800640a:	f7ff fea9 	bl	8006160 <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)98, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 800640e:	f7ff fe99 	bl	8006144 <__NVIC_GetPriorityGrouping>
 8006412:	4603      	mov	r3, r0
 8006414:	4618      	mov	r0, r3
 8006416:	213f      	movs	r1, #63	; 0x3f
 8006418:	2200      	movs	r2, #0
 800641a:	f7ff fee7 	bl	80061ec <NVIC_EncodePriority>
 800641e:	4603      	mov	r3, r0
 8006420:	2062      	movs	r0, #98	; 0x62
 8006422:	4619      	mov	r1, r3
 8006424:	f7ff feb8 	bl	8006198 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)98);}
 8006428:	2062      	movs	r0, #98	; 0x62
 800642a:	f7ff fe99 	bl	8006160 <__NVIC_EnableIRQ>
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	48024000 	.word	0x48024000
 8006438:	0800b5d4 	.word	0x0800b5d4
 800643c:	48028500 	.word	0x48028500
 8006440:	0800b5bc 	.word	0x0800b5bc
 8006444:	0800b5c8 	.word	0x0800b5c8

08006448 <USIC2_3_IRQHandler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <USIC2_3_IRQHandler+0xc>)
 800644e:	f7ff f883 	bl	8005558 <I2C_MASTER_TransmitHandler>
}
 8006452:	bd80      	pop	{r7, pc}
 8006454:	2000007c 	.word	0x2000007c

08006458 <USIC2_2_IRQHandler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
 800645c:	4801      	ldr	r0, [pc, #4]	; (8006464 <USIC2_2_IRQHandler+0xc>)
 800645e:	f7ff fc97 	bl	8005d90 <I2C_MASTER_ReceiveHandler>
}
 8006462:	bd80      	pop	{r7, pc}
 8006464:	2000007c 	.word	0x2000007c

08006468 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	7c1a      	ldrb	r2, [r3, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3304      	adds	r3, #4
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	f7f9 ff91 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6819      	ldr	r1, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7c1a      	ldrb	r2, [r3, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7c5b      	ldrb	r3, [r3, #17]
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	461a      	mov	r2, r3
 8006498:	f7fa fcf0 	bl	8000e7c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop

080064a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <__NVIC_SetPriorityGrouping+0x44>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064c4:	4013      	ands	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80064d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80064da:	4a04      	ldr	r2, [pc, #16]	; (80064ec <__NVIC_SetPriorityGrouping+0x44>)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	60d3      	str	r3, [r2, #12]
}
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	e000ed00 	.word	0xe000ed00

080064f0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80064f6:	2001      	movs	r0, #1
 80064f8:	f7ff ffd6 	bl	80064a8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80064fc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80064fe:	4b21      	ldr	r3, [pc, #132]	; (8006584 <SystemCoreSetup+0x94>)
 8006500:	4a21      	ldr	r2, [pc, #132]	; (8006588 <SystemCoreSetup+0x98>)
 8006502:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006504:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8006508:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800650a:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <SystemCoreSetup+0x94>)
 800650c:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <SystemCoreSetup+0x94>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006516:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <SystemCoreSetup+0x9c>)
 800651c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006520:	3314      	adds	r3, #20
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f023 030f 	bic.w	r3, r3, #15
 800652c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f043 0303 	orr.w	r3, r3, #3
 8006534:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8006536:	4b15      	ldr	r3, [pc, #84]	; (800658c <SystemCoreSetup+0x9c>)
 8006538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653c:	3314      	adds	r3, #20
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8006542:	4a10      	ldr	r2, [pc, #64]	; (8006584 <SystemCoreSetup+0x94>)
 8006544:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <SystemCoreSetup+0x94>)
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f023 0310 	bic.w	r3, r3, #16
 800654c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800654e:	4a0d      	ldr	r2, [pc, #52]	; (8006584 <SystemCoreSetup+0x94>)
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <SystemCoreSetup+0x94>)
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f023 0308 	bic.w	r3, r3, #8
 8006558:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800655a:	4a0a      	ldr	r2, [pc, #40]	; (8006584 <SystemCoreSetup+0x94>)
 800655c:	4b09      	ldr	r3, [pc, #36]	; (8006584 <SystemCoreSetup+0x94>)
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006564:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8006566:	4a07      	ldr	r2, [pc, #28]	; (8006584 <SystemCoreSetup+0x94>)
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <SystemCoreSetup+0x94>)
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006570:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8006572:	4a04      	ldr	r2, [pc, #16]	; (8006584 <SystemCoreSetup+0x94>)
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <SystemCoreSetup+0x94>)
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	e000ed00 	.word	0xe000ed00
 8006588:	08000000 	.word	0x08000000
 800658c:	58001000 	.word	0x58001000

08006590 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]

  return (status);
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80065b4:	4b02      	ldr	r3, [pc, #8]	; (80065c0 <OSCHP_GetFrequency+0x10>)
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	00b71b00 	.word	0x00b71b00

080065c4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80065c4:	b5b0      	push	{r4, r5, r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <SystemCoreClockSetup+0x50>)
 80065cc:	1d3c      	adds	r4, r7, #4
 80065ce:	461d      	mov	r5, r3
 80065d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80065d8:	1d3b      	adds	r3, r7, #4
 80065da:	4618      	mov	r0, r3
 80065dc:	f7f9 ffde 	bl	800059c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80065e0:	2000      	movs	r0, #0
 80065e2:	f7fa f919 	bl	8000818 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80065e6:	2000      	movs	r0, #0
 80065e8:	f7fa f8ce 	bl	8000788 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80065ec:	2004      	movs	r0, #4
 80065ee:	f7fa f99f 	bl	8000930 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80065f2:	2001      	movs	r0, #1
 80065f4:	2120      	movs	r1, #32
 80065f6:	f7fa f9e7 	bl	80009c8 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80065fa:	2000      	movs	r0, #0
 80065fc:	f7fa f8d8 	bl	80007b0 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8006600:	2001      	movs	r0, #1
 8006602:	f7fa f9bd 	bl	8000980 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8006606:	2001      	movs	r0, #1
 8006608:	f7fa f9a6 	bl	8000958 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bdb0      	pop	{r4, r5, r7, pc}
 8006612:	bf00      	nop
 8006614:	0800b644 	.word	0x0800b644

08006618 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800661e:	2300      	movs	r3, #0
 8006620:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8006622:	4819      	ldr	r0, [pc, #100]	; (8006688 <DAVE_Init+0x70>)
 8006624:	f7ff ffb4 	bl	8006590 <CLOCK_XMC4_Init>
 8006628:	4603      	mov	r3, r0
 800662a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance BTN_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BTN_1); 
 8006632:	4816      	ldr	r0, [pc, #88]	; (800668c <DAVE_Init+0x74>)
 8006634:	f7ff ff18 	bl	8006468 <DIGITAL_IO_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_2); 
 8006642:	4813      	ldr	r0, [pc, #76]	; (8006690 <DAVE_Init+0x78>)
 8006644:	f7ff ff10 	bl	8006468 <DIGITAL_IO_Init>
 8006648:	4603      	mov	r3, r0
 800664a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_1); 
 8006652:	4810      	ldr	r0, [pc, #64]	; (8006694 <DAVE_Init+0x7c>)
 8006654:	f7ff ff08 	bl	8006468 <DIGITAL_IO_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <DAVE_Init+0x54>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8006662:	480d      	ldr	r0, [pc, #52]	; (8006698 <DAVE_Init+0x80>)
 8006664:	f7fe ff1e 	bl	80054a4 <I2C_MASTER_Init>
 8006668:	4603      	mov	r3, r0
 800666a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <DAVE_Init+0x64>
  {
	 /**  Initialization of USBD_VCOM APP instance USBD_VCOM_0 */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&USBD_VCOM_0); 
 8006672:	480a      	ldr	r0, [pc, #40]	; (800669c <DAVE_Init+0x84>)
 8006674:	f7fd f92e 	bl	80038d4 <USBD_VCOM_Init>
 8006678:	4603      	mov	r3, r0
 800667a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800667c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000964 	.word	0x20000964
 800668c:	0800b608 	.word	0x0800b608
 8006690:	0800b61c 	.word	0x0800b61c
 8006694:	0800b630 	.word	0x0800b630
 8006698:	2000007c 	.word	0x2000007c
 800669c:	20000938 	.word	0x20000938

080066a0 <main>:
void delay(uint32_t);

volatile uint8_t tx_completion_0 = 0, rx_completion_0 = 0;

int main(void)
{
 80066a0:	b5b0      	push	{r4, r5, r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af04      	add	r7, sp, #16
	uint32_t i2c_master_fifo_xfer_status = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]

	DAVE_STATUS_t status;

	status = DAVE_Init();
 80066aa:	f7ff ffb5 	bl	8006618 <DAVE_Init>
 80066ae:	4603      	mov	r3, r0
 80066b0:	71fb      	strb	r3, [r7, #7]

	if(status != DAVE_STATUS_SUCCESS)
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d000      	beq.n	80066ba <main+0x1a>
	{
		while(true){}
 80066b8:	e7fe      	b.n	80066b8 <main+0x18>
	}

	USBD_VCOM_Connect();
 80066ba:	f7fd fa63 	bl	8003b84 <USBD_VCOM_Connect>

	while(!USBD_VCOM_IsEnumDone());
 80066be:	bf00      	nop
 80066c0:	f7fd f954 	bl	800396c <USBD_VCOM_IsEnumDone>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0fa      	beq.n	80066c0 <main+0x20>
	while(!cdc_event_flags.line_encoding_event_flag);
 80066ca:	bf00      	nop
 80066cc:	4b64      	ldr	r3, [pc, #400]	; (8006860 <main+0x1c0>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0fa      	beq.n	80066cc <main+0x2c>

	delay(0xffff);
 80066d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80066da:	f000 f8d3 	bl	8006884 <delay>

	while (true)
	{
		uint8_t i2c_data_x[1];
		uint8_t i2c_temp = INT_REG;
 80066de:	2300      	movs	r3, #0
 80066e0:	70fb      	strb	r3, [r7, #3]

		I2C_MASTER_Init(&I2C_MASTER_0);
 80066e2:	4860      	ldr	r0, [pc, #384]	; (8006864 <main+0x1c4>)
 80066e4:	f7fe fede 	bl	80054a4 <I2C_MASTER_Init>

		I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADR, &i2c_temp, 1, true);
 80066e8:	1cfc      	adds	r4, r7, #3
 80066ea:	2301      	movs	r3, #1
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	2301      	movs	r3, #1
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	485c      	ldr	r0, [pc, #368]	; (8006864 <main+0x1c4>)
 80066f4:	2101      	movs	r1, #1
 80066f6:	2230      	movs	r2, #48	; 0x30
 80066f8:	4623      	mov	r3, r4
 80066fa:	f7fe ff09 	bl	8005510 <I2C_MASTER_Transmit>
		while (tx_completion_0 == 0);
 80066fe:	bf00      	nop
 8006700:	4b59      	ldr	r3, [pc, #356]	; (8006868 <main+0x1c8>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0fa      	beq.n	8006700 <main+0x60>
		tx_completion_0 = 0;
 800670a:	4b57      	ldr	r3, [pc, #348]	; (8006868 <main+0x1c8>)
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]

		i2c_temp = TEMP_REG;
 8006710:	2305      	movs	r3, #5
 8006712:	70fb      	strb	r3, [r7, #3]

		I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADR, &i2c_temp, 1, false);
 8006714:	1cfc      	adds	r4, r7, #3
 8006716:	2301      	movs	r3, #1
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	4851      	ldr	r0, [pc, #324]	; (8006864 <main+0x1c4>)
 8006720:	2101      	movs	r1, #1
 8006722:	2230      	movs	r2, #48	; 0x30
 8006724:	4623      	mov	r3, r4
 8006726:	f7fe fef3 	bl	8005510 <I2C_MASTER_Transmit>
		while (tx_completion_0 == 0);
 800672a:	bf00      	nop
 800672c:	4b4e      	ldr	r3, [pc, #312]	; (8006868 <main+0x1c8>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0fa      	beq.n	800672c <main+0x8c>
		tx_completion_0 = 0;
 8006736:	4b4c      	ldr	r3, [pc, #304]	; (8006868 <main+0x1c8>)
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]

		I2C_MASTER_Receive(&I2C_MASTER_0,true, ADR, i2c_data_x, 2, true, true);
 800673c:	1d3c      	adds	r4, r7, #4
 800673e:	2302      	movs	r3, #2
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2301      	movs	r3, #1
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	2301      	movs	r3, #1
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	4846      	ldr	r0, [pc, #280]	; (8006864 <main+0x1c4>)
 800674c:	2101      	movs	r1, #1
 800674e:	2230      	movs	r2, #48	; 0x30
 8006750:	4623      	mov	r3, r4
 8006752:	f7ff f85d 	bl	8005810 <I2C_MASTER_Receive>
		while(rx_completion_0 == 0);
 8006756:	bf00      	nop
 8006758:	4b44      	ldr	r3, [pc, #272]	; (800686c <main+0x1cc>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0fa      	beq.n	8006758 <main+0xb8>
		rx_completion_0 = 0;
 8006762:	4b42      	ldr	r3, [pc, #264]	; (800686c <main+0x1cc>)
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]

		if (!i2c_master_fifo_xfer_status)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <main+0xd4>
		{
			i2c_master_fifo_xfer_status = TEST_SUCCESS;
 800676e:	2301      	movs	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	e001      	b.n	8006778 <main+0xd8>
		}
		else
		{
			i2c_master_fifo_xfer_status = TEST_FAILED;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
		}

		float temp = 0;
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]

		i2c_data_x[0] = i2c_data_x[0] & 0x1f;
 800677e:	793b      	ldrb	r3, [r7, #4]
 8006780:	f003 031f 	and.w	r3, r3, #31
 8006784:	b2db      	uxtb	r3, r3
 8006786:	713b      	strb	r3, [r7, #4]

		if ((i2c_data_x[0] & 0x10) == 0x10)
 8006788:	793b      	ldrb	r3, [r7, #4]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	d018      	beq.n	80067c4 <main+0x124>
		{
			i2c_data_x[0] = i2c_data_x[1] & 0x0f;
 8006792:	797b      	ldrb	r3, [r7, #5]
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	b2db      	uxtb	r3, r3
 800679a:	713b      	strb	r3, [r7, #4]
			temp = 256 - ((i2c_data_x[0]*16) + (i2c_data_x[1]/16));
 800679c:	793b      	ldrb	r3, [r7, #4]
 800679e:	461a      	mov	r2, r3
 80067a0:	4613      	mov	r3, r2
 80067a2:	071b      	lsls	r3, r3, #28
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	461a      	mov	r2, r3
 80067aa:	797b      	ldrb	r3, [r7, #5]
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067be:	edc7 7a02 	vstr	s15, [r7, #8]
 80067c2:	e02b      	b.n	800681c <main+0x17c>
		}
		else
		{
			temp = (i2c_data_x[0]*16.0) + (i2c_data_x[1]/16.0);
 80067c4:	793b      	ldrb	r3, [r7, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f9d8 	bl	8006b7c <__aeabi_i2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4610      	mov	r0, r2
 80067d2:	4619      	mov	r1, r3
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <main+0x1d0>)
 80067da:	f000 fa35 	bl	8006c48 <__aeabi_dmul>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4614      	mov	r4, r2
 80067e4:	461d      	mov	r5, r3
 80067e6:	797b      	ldrb	r3, [r7, #5]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 f9c7 	bl	8006b7c <__aeabi_i2d>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4610      	mov	r0, r2
 80067f4:	4619      	mov	r1, r3
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <main+0x1d0>)
 80067fc:	f000 fb4e 	bl	8006e9c <__aeabi_ddiv>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4620      	mov	r0, r4
 8006806:	4629      	mov	r1, r5
 8006808:	f000 f86c 	bl	80068e4 <__adddf3>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	f000 fc2a 	bl	800706c <__aeabi_d2f>
 8006818:	4603      	mov	r3, r0
 800681a:	60bb      	str	r3, [r7, #8]
		}

		sprintf(mb, "T1 = %d || T2 = %d\n", i2c_data_x[0], i2c_data_x[1]);
 800681c:	793b      	ldrb	r3, [r7, #4]
 800681e:	461a      	mov	r2, r3
 8006820:	797b      	ldrb	r3, [r7, #5]
 8006822:	4814      	ldr	r0, [pc, #80]	; (8006874 <main+0x1d4>)
 8006824:	4914      	ldr	r1, [pc, #80]	; (8006878 <main+0x1d8>)
 8006826:	f000 fd87 	bl	8007338 <sprintf>
		USBD_VCOM_SendString((int8_t*)mb);
 800682a:	4812      	ldr	r0, [pc, #72]	; (8006874 <main+0x1d4>)
 800682c:	f7fd f8b2 	bl	8003994 <USBD_VCOM_SendString>
		CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 8006830:	4812      	ldr	r0, [pc, #72]	; (800687c <main+0x1dc>)
 8006832:	f7fc ffdb 	bl	80037ec <CDC_Device_USBTask>

		sprintf(mb, "%f \n", temp);
 8006836:	68b8      	ldr	r0, [r7, #8]
 8006838:	f000 f9b2 	bl	8006ba0 <__aeabi_f2d>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	480c      	ldr	r0, [pc, #48]	; (8006874 <main+0x1d4>)
 8006842:	490f      	ldr	r1, [pc, #60]	; (8006880 <main+0x1e0>)
 8006844:	f000 fd78 	bl	8007338 <sprintf>
		USBD_VCOM_SendString((int8_t*)mb);
 8006848:	480a      	ldr	r0, [pc, #40]	; (8006874 <main+0x1d4>)
 800684a:	f7fd f8a3 	bl	8003994 <USBD_VCOM_SendString>
		CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 800684e:	480b      	ldr	r0, [pc, #44]	; (800687c <main+0x1dc>)
 8006850:	f7fc ffcc 	bl	80037ec <CDC_Device_USBTask>

		delay(0xffffff);
 8006854:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006858:	f000 f814 	bl	8006884 <delay>
	}
 800685c:	e73f      	b.n	80066de <main+0x3e>
 800685e:	bf00      	nop
 8006860:	20000bec 	.word	0x20000bec
 8006864:	2000007c 	.word	0x2000007c
 8006868:	20000968 	.word	0x20000968
 800686c:	20000969 	.word	0x20000969
 8006870:	40300000 	.word	0x40300000
 8006874:	20000fe0 	.word	0x20000fe0
 8006878:	0800b658 	.word	0x0800b658
 800687c:	20000c70 	.word	0x20000c70
 8006880:	0800b66c 	.word	0x0800b66c

08006884 <delay>:
	return 1;
}

void delay(uint32_t cnt)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	volatile uint32_t count = cnt;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]
	while (--count)
 8006890:	bf00      	nop
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3b01      	subs	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1fa      	bne.n	8006892 <delay+0xe>
	{

	}
}
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop

080068a8 <EndOfTransmit>:

void EndOfTransmit(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
	tx_completion_0 = 1;
 80068ac:	4b03      	ldr	r3, [pc, #12]	; (80068bc <EndOfTransmit+0x14>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
}
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000968 	.word	0x20000968

080068c0 <EndOfReceive>:

void EndOfReceive(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
	rx_completion_0 = 1;
 80068c4:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <EndOfReceive+0x14>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
}
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000969 	.word	0x20000969

080068d8 <__aeabi_drsub>:
 80068d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80068dc:	e002      	b.n	80068e4 <__adddf3>
 80068de:	bf00      	nop

080068e0 <__aeabi_dsub>:
 80068e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080068e4 <__adddf3>:
 80068e4:	b530      	push	{r4, r5, lr}
 80068e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80068ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80068ee:	ea94 0f05 	teq	r4, r5
 80068f2:	bf08      	it	eq
 80068f4:	ea90 0f02 	teqeq	r0, r2
 80068f8:	bf1f      	itttt	ne
 80068fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80068fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006902:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006906:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800690a:	f000 80e2 	beq.w	8006ad2 <__adddf3+0x1ee>
 800690e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006912:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006916:	bfb8      	it	lt
 8006918:	426d      	neglt	r5, r5
 800691a:	dd0c      	ble.n	8006936 <__adddf3+0x52>
 800691c:	442c      	add	r4, r5
 800691e:	ea80 0202 	eor.w	r2, r0, r2
 8006922:	ea81 0303 	eor.w	r3, r1, r3
 8006926:	ea82 0000 	eor.w	r0, r2, r0
 800692a:	ea83 0101 	eor.w	r1, r3, r1
 800692e:	ea80 0202 	eor.w	r2, r0, r2
 8006932:	ea81 0303 	eor.w	r3, r1, r3
 8006936:	2d36      	cmp	r5, #54	; 0x36
 8006938:	bf88      	it	hi
 800693a:	bd30      	pophi	{r4, r5, pc}
 800693c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006940:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006944:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006948:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800694c:	d002      	beq.n	8006954 <__adddf3+0x70>
 800694e:	4240      	negs	r0, r0
 8006950:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006954:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006958:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800695c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006960:	d002      	beq.n	8006968 <__adddf3+0x84>
 8006962:	4252      	negs	r2, r2
 8006964:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006968:	ea94 0f05 	teq	r4, r5
 800696c:	f000 80a7 	beq.w	8006abe <__adddf3+0x1da>
 8006970:	f1a4 0401 	sub.w	r4, r4, #1
 8006974:	f1d5 0e20 	rsbs	lr, r5, #32
 8006978:	db0d      	blt.n	8006996 <__adddf3+0xb2>
 800697a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800697e:	fa22 f205 	lsr.w	r2, r2, r5
 8006982:	1880      	adds	r0, r0, r2
 8006984:	f141 0100 	adc.w	r1, r1, #0
 8006988:	fa03 f20e 	lsl.w	r2, r3, lr
 800698c:	1880      	adds	r0, r0, r2
 800698e:	fa43 f305 	asr.w	r3, r3, r5
 8006992:	4159      	adcs	r1, r3
 8006994:	e00e      	b.n	80069b4 <__adddf3+0xd0>
 8006996:	f1a5 0520 	sub.w	r5, r5, #32
 800699a:	f10e 0e20 	add.w	lr, lr, #32
 800699e:	2a01      	cmp	r2, #1
 80069a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80069a4:	bf28      	it	cs
 80069a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80069aa:	fa43 f305 	asr.w	r3, r3, r5
 80069ae:	18c0      	adds	r0, r0, r3
 80069b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80069b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80069b8:	d507      	bpl.n	80069ca <__adddf3+0xe6>
 80069ba:	f04f 0e00 	mov.w	lr, #0
 80069be:	f1dc 0c00 	rsbs	ip, ip, #0
 80069c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80069c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80069ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80069ce:	d31b      	bcc.n	8006a08 <__adddf3+0x124>
 80069d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80069d4:	d30c      	bcc.n	80069f0 <__adddf3+0x10c>
 80069d6:	0849      	lsrs	r1, r1, #1
 80069d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80069dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80069e0:	f104 0401 	add.w	r4, r4, #1
 80069e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80069e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80069ec:	f080 809a 	bcs.w	8006b24 <__adddf3+0x240>
 80069f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80069f4:	bf08      	it	eq
 80069f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80069fa:	f150 0000 	adcs.w	r0, r0, #0
 80069fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a02:	ea41 0105 	orr.w	r1, r1, r5
 8006a06:	bd30      	pop	{r4, r5, pc}
 8006a08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006a0c:	4140      	adcs	r0, r0
 8006a0e:	eb41 0101 	adc.w	r1, r1, r1
 8006a12:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a16:	f1a4 0401 	sub.w	r4, r4, #1
 8006a1a:	d1e9      	bne.n	80069f0 <__adddf3+0x10c>
 8006a1c:	f091 0f00 	teq	r1, #0
 8006a20:	bf04      	itt	eq
 8006a22:	4601      	moveq	r1, r0
 8006a24:	2000      	moveq	r0, #0
 8006a26:	fab1 f381 	clz	r3, r1
 8006a2a:	bf08      	it	eq
 8006a2c:	3320      	addeq	r3, #32
 8006a2e:	f1a3 030b 	sub.w	r3, r3, #11
 8006a32:	f1b3 0220 	subs.w	r2, r3, #32
 8006a36:	da0c      	bge.n	8006a52 <__adddf3+0x16e>
 8006a38:	320c      	adds	r2, #12
 8006a3a:	dd08      	ble.n	8006a4e <__adddf3+0x16a>
 8006a3c:	f102 0c14 	add.w	ip, r2, #20
 8006a40:	f1c2 020c 	rsb	r2, r2, #12
 8006a44:	fa01 f00c 	lsl.w	r0, r1, ip
 8006a48:	fa21 f102 	lsr.w	r1, r1, r2
 8006a4c:	e00c      	b.n	8006a68 <__adddf3+0x184>
 8006a4e:	f102 0214 	add.w	r2, r2, #20
 8006a52:	bfd8      	it	le
 8006a54:	f1c2 0c20 	rsble	ip, r2, #32
 8006a58:	fa01 f102 	lsl.w	r1, r1, r2
 8006a5c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006a60:	bfdc      	itt	le
 8006a62:	ea41 010c 	orrle.w	r1, r1, ip
 8006a66:	4090      	lslle	r0, r2
 8006a68:	1ae4      	subs	r4, r4, r3
 8006a6a:	bfa2      	ittt	ge
 8006a6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006a70:	4329      	orrge	r1, r5
 8006a72:	bd30      	popge	{r4, r5, pc}
 8006a74:	ea6f 0404 	mvn.w	r4, r4
 8006a78:	3c1f      	subs	r4, #31
 8006a7a:	da1c      	bge.n	8006ab6 <__adddf3+0x1d2>
 8006a7c:	340c      	adds	r4, #12
 8006a7e:	dc0e      	bgt.n	8006a9e <__adddf3+0x1ba>
 8006a80:	f104 0414 	add.w	r4, r4, #20
 8006a84:	f1c4 0220 	rsb	r2, r4, #32
 8006a88:	fa20 f004 	lsr.w	r0, r0, r4
 8006a8c:	fa01 f302 	lsl.w	r3, r1, r2
 8006a90:	ea40 0003 	orr.w	r0, r0, r3
 8006a94:	fa21 f304 	lsr.w	r3, r1, r4
 8006a98:	ea45 0103 	orr.w	r1, r5, r3
 8006a9c:	bd30      	pop	{r4, r5, pc}
 8006a9e:	f1c4 040c 	rsb	r4, r4, #12
 8006aa2:	f1c4 0220 	rsb	r2, r4, #32
 8006aa6:	fa20 f002 	lsr.w	r0, r0, r2
 8006aaa:	fa01 f304 	lsl.w	r3, r1, r4
 8006aae:	ea40 0003 	orr.w	r0, r0, r3
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	bd30      	pop	{r4, r5, pc}
 8006ab6:	fa21 f004 	lsr.w	r0, r1, r4
 8006aba:	4629      	mov	r1, r5
 8006abc:	bd30      	pop	{r4, r5, pc}
 8006abe:	f094 0f00 	teq	r4, #0
 8006ac2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006ac6:	bf06      	itte	eq
 8006ac8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006acc:	3401      	addeq	r4, #1
 8006ace:	3d01      	subne	r5, #1
 8006ad0:	e74e      	b.n	8006970 <__adddf3+0x8c>
 8006ad2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006ad6:	bf18      	it	ne
 8006ad8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006adc:	d029      	beq.n	8006b32 <__adddf3+0x24e>
 8006ade:	ea94 0f05 	teq	r4, r5
 8006ae2:	bf08      	it	eq
 8006ae4:	ea90 0f02 	teqeq	r0, r2
 8006ae8:	d005      	beq.n	8006af6 <__adddf3+0x212>
 8006aea:	ea54 0c00 	orrs.w	ip, r4, r0
 8006aee:	bf04      	itt	eq
 8006af0:	4619      	moveq	r1, r3
 8006af2:	4610      	moveq	r0, r2
 8006af4:	bd30      	pop	{r4, r5, pc}
 8006af6:	ea91 0f03 	teq	r1, r3
 8006afa:	bf1e      	ittt	ne
 8006afc:	2100      	movne	r1, #0
 8006afe:	2000      	movne	r0, #0
 8006b00:	bd30      	popne	{r4, r5, pc}
 8006b02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006b06:	d105      	bne.n	8006b14 <__adddf3+0x230>
 8006b08:	0040      	lsls	r0, r0, #1
 8006b0a:	4149      	adcs	r1, r1
 8006b0c:	bf28      	it	cs
 8006b0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006b12:	bd30      	pop	{r4, r5, pc}
 8006b14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006b18:	bf3c      	itt	cc
 8006b1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006b1e:	bd30      	popcc	{r4, r5, pc}
 8006b20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006b24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006b28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b2c:	f04f 0000 	mov.w	r0, #0
 8006b30:	bd30      	pop	{r4, r5, pc}
 8006b32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006b36:	bf1a      	itte	ne
 8006b38:	4619      	movne	r1, r3
 8006b3a:	4610      	movne	r0, r2
 8006b3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006b40:	bf1c      	itt	ne
 8006b42:	460b      	movne	r3, r1
 8006b44:	4602      	movne	r2, r0
 8006b46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006b4a:	bf06      	itte	eq
 8006b4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006b50:	ea91 0f03 	teqeq	r1, r3
 8006b54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006b58:	bd30      	pop	{r4, r5, pc}
 8006b5a:	bf00      	nop

08006b5c <__aeabi_ui2d>:
 8006b5c:	f090 0f00 	teq	r0, #0
 8006b60:	bf04      	itt	eq
 8006b62:	2100      	moveq	r1, #0
 8006b64:	4770      	bxeq	lr
 8006b66:	b530      	push	{r4, r5, lr}
 8006b68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006b6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006b70:	f04f 0500 	mov.w	r5, #0
 8006b74:	f04f 0100 	mov.w	r1, #0
 8006b78:	e750      	b.n	8006a1c <__adddf3+0x138>
 8006b7a:	bf00      	nop

08006b7c <__aeabi_i2d>:
 8006b7c:	f090 0f00 	teq	r0, #0
 8006b80:	bf04      	itt	eq
 8006b82:	2100      	moveq	r1, #0
 8006b84:	4770      	bxeq	lr
 8006b86:	b530      	push	{r4, r5, lr}
 8006b88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006b8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006b90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006b94:	bf48      	it	mi
 8006b96:	4240      	negmi	r0, r0
 8006b98:	f04f 0100 	mov.w	r1, #0
 8006b9c:	e73e      	b.n	8006a1c <__adddf3+0x138>
 8006b9e:	bf00      	nop

08006ba0 <__aeabi_f2d>:
 8006ba0:	0042      	lsls	r2, r0, #1
 8006ba2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8006baa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006bae:	bf1f      	itttt	ne
 8006bb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006bb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006bb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006bbc:	4770      	bxne	lr
 8006bbe:	f092 0f00 	teq	r2, #0
 8006bc2:	bf14      	ite	ne
 8006bc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006bc8:	4770      	bxeq	lr
 8006bca:	b530      	push	{r4, r5, lr}
 8006bcc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006bd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006bd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006bd8:	e720      	b.n	8006a1c <__adddf3+0x138>
 8006bda:	bf00      	nop

08006bdc <__aeabi_ul2d>:
 8006bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8006be0:	bf08      	it	eq
 8006be2:	4770      	bxeq	lr
 8006be4:	b530      	push	{r4, r5, lr}
 8006be6:	f04f 0500 	mov.w	r5, #0
 8006bea:	e00a      	b.n	8006c02 <__aeabi_l2d+0x16>

08006bec <__aeabi_l2d>:
 8006bec:	ea50 0201 	orrs.w	r2, r0, r1
 8006bf0:	bf08      	it	eq
 8006bf2:	4770      	bxeq	lr
 8006bf4:	b530      	push	{r4, r5, lr}
 8006bf6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006bfa:	d502      	bpl.n	8006c02 <__aeabi_l2d+0x16>
 8006bfc:	4240      	negs	r0, r0
 8006bfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c02:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c06:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006c0e:	f43f aedc 	beq.w	80069ca <__adddf3+0xe6>
 8006c12:	f04f 0203 	mov.w	r2, #3
 8006c16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c1a:	bf18      	it	ne
 8006c1c:	3203      	addne	r2, #3
 8006c1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c22:	bf18      	it	ne
 8006c24:	3203      	addne	r2, #3
 8006c26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006c2a:	f1c2 0320 	rsb	r3, r2, #32
 8006c2e:	fa00 fc03 	lsl.w	ip, r0, r3
 8006c32:	fa20 f002 	lsr.w	r0, r0, r2
 8006c36:	fa01 fe03 	lsl.w	lr, r1, r3
 8006c3a:	ea40 000e 	orr.w	r0, r0, lr
 8006c3e:	fa21 f102 	lsr.w	r1, r1, r2
 8006c42:	4414      	add	r4, r2
 8006c44:	e6c1      	b.n	80069ca <__adddf3+0xe6>
 8006c46:	bf00      	nop

08006c48 <__aeabi_dmul>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006c4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006c52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006c56:	bf1d      	ittte	ne
 8006c58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006c5c:	ea94 0f0c 	teqne	r4, ip
 8006c60:	ea95 0f0c 	teqne	r5, ip
 8006c64:	f000 f8de 	bleq	8006e24 <__aeabi_dmul+0x1dc>
 8006c68:	442c      	add	r4, r5
 8006c6a:	ea81 0603 	eor.w	r6, r1, r3
 8006c6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006c72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006c76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006c7a:	bf18      	it	ne
 8006c7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006c80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c88:	d038      	beq.n	8006cfc <__aeabi_dmul+0xb4>
 8006c8a:	fba0 ce02 	umull	ip, lr, r0, r2
 8006c8e:	f04f 0500 	mov.w	r5, #0
 8006c92:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006c96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006c9a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006c9e:	f04f 0600 	mov.w	r6, #0
 8006ca2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006ca6:	f09c 0f00 	teq	ip, #0
 8006caa:	bf18      	it	ne
 8006cac:	f04e 0e01 	orrne.w	lr, lr, #1
 8006cb0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006cb4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006cb8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006cbc:	d204      	bcs.n	8006cc8 <__aeabi_dmul+0x80>
 8006cbe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006cc2:	416d      	adcs	r5, r5
 8006cc4:	eb46 0606 	adc.w	r6, r6, r6
 8006cc8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006ccc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006cd0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006cd4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006cd8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006cdc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006ce0:	bf88      	it	hi
 8006ce2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006ce6:	d81e      	bhi.n	8006d26 <__aeabi_dmul+0xde>
 8006ce8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006cec:	bf08      	it	eq
 8006cee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006cf2:	f150 0000 	adcs.w	r0, r0, #0
 8006cf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006d00:	ea46 0101 	orr.w	r1, r6, r1
 8006d04:	ea40 0002 	orr.w	r0, r0, r2
 8006d08:	ea81 0103 	eor.w	r1, r1, r3
 8006d0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006d10:	bfc2      	ittt	gt
 8006d12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d1a:	bd70      	popgt	{r4, r5, r6, pc}
 8006d1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d20:	f04f 0e00 	mov.w	lr, #0
 8006d24:	3c01      	subs	r4, #1
 8006d26:	f300 80ab 	bgt.w	8006e80 <__aeabi_dmul+0x238>
 8006d2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006d2e:	bfde      	ittt	le
 8006d30:	2000      	movle	r0, #0
 8006d32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006d36:	bd70      	pople	{r4, r5, r6, pc}
 8006d38:	f1c4 0400 	rsb	r4, r4, #0
 8006d3c:	3c20      	subs	r4, #32
 8006d3e:	da35      	bge.n	8006dac <__aeabi_dmul+0x164>
 8006d40:	340c      	adds	r4, #12
 8006d42:	dc1b      	bgt.n	8006d7c <__aeabi_dmul+0x134>
 8006d44:	f104 0414 	add.w	r4, r4, #20
 8006d48:	f1c4 0520 	rsb	r5, r4, #32
 8006d4c:	fa00 f305 	lsl.w	r3, r0, r5
 8006d50:	fa20 f004 	lsr.w	r0, r0, r4
 8006d54:	fa01 f205 	lsl.w	r2, r1, r5
 8006d58:	ea40 0002 	orr.w	r0, r0, r2
 8006d5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006d60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006d64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006d68:	fa21 f604 	lsr.w	r6, r1, r4
 8006d6c:	eb42 0106 	adc.w	r1, r2, r6
 8006d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006d74:	bf08      	it	eq
 8006d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	f1c4 040c 	rsb	r4, r4, #12
 8006d80:	f1c4 0520 	rsb	r5, r4, #32
 8006d84:	fa00 f304 	lsl.w	r3, r0, r4
 8006d88:	fa20 f005 	lsr.w	r0, r0, r5
 8006d8c:	fa01 f204 	lsl.w	r2, r1, r4
 8006d90:	ea40 0002 	orr.w	r0, r0, r2
 8006d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006d98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006d9c:	f141 0100 	adc.w	r1, r1, #0
 8006da0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006da4:	bf08      	it	eq
 8006da6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	f1c4 0520 	rsb	r5, r4, #32
 8006db0:	fa00 f205 	lsl.w	r2, r0, r5
 8006db4:	ea4e 0e02 	orr.w	lr, lr, r2
 8006db8:	fa20 f304 	lsr.w	r3, r0, r4
 8006dbc:	fa01 f205 	lsl.w	r2, r1, r5
 8006dc0:	ea43 0302 	orr.w	r3, r3, r2
 8006dc4:	fa21 f004 	lsr.w	r0, r1, r4
 8006dc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006dcc:	fa21 f204 	lsr.w	r2, r1, r4
 8006dd0:	ea20 0002 	bic.w	r0, r0, r2
 8006dd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006dd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006ddc:	bf08      	it	eq
 8006dde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	f094 0f00 	teq	r4, #0
 8006de8:	d10f      	bne.n	8006e0a <__aeabi_dmul+0x1c2>
 8006dea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006dee:	0040      	lsls	r0, r0, #1
 8006df0:	eb41 0101 	adc.w	r1, r1, r1
 8006df4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006df8:	bf08      	it	eq
 8006dfa:	3c01      	subeq	r4, #1
 8006dfc:	d0f7      	beq.n	8006dee <__aeabi_dmul+0x1a6>
 8006dfe:	ea41 0106 	orr.w	r1, r1, r6
 8006e02:	f095 0f00 	teq	r5, #0
 8006e06:	bf18      	it	ne
 8006e08:	4770      	bxne	lr
 8006e0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006e0e:	0052      	lsls	r2, r2, #1
 8006e10:	eb43 0303 	adc.w	r3, r3, r3
 8006e14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006e18:	bf08      	it	eq
 8006e1a:	3d01      	subeq	r5, #1
 8006e1c:	d0f7      	beq.n	8006e0e <__aeabi_dmul+0x1c6>
 8006e1e:	ea43 0306 	orr.w	r3, r3, r6
 8006e22:	4770      	bx	lr
 8006e24:	ea94 0f0c 	teq	r4, ip
 8006e28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006e2c:	bf18      	it	ne
 8006e2e:	ea95 0f0c 	teqne	r5, ip
 8006e32:	d00c      	beq.n	8006e4e <__aeabi_dmul+0x206>
 8006e34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006e38:	bf18      	it	ne
 8006e3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006e3e:	d1d1      	bne.n	8006de4 <__aeabi_dmul+0x19c>
 8006e40:	ea81 0103 	eor.w	r1, r1, r3
 8006e44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e48:	f04f 0000 	mov.w	r0, #0
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
 8006e4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006e52:	bf06      	itte	eq
 8006e54:	4610      	moveq	r0, r2
 8006e56:	4619      	moveq	r1, r3
 8006e58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006e5c:	d019      	beq.n	8006e92 <__aeabi_dmul+0x24a>
 8006e5e:	ea94 0f0c 	teq	r4, ip
 8006e62:	d102      	bne.n	8006e6a <__aeabi_dmul+0x222>
 8006e64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006e68:	d113      	bne.n	8006e92 <__aeabi_dmul+0x24a>
 8006e6a:	ea95 0f0c 	teq	r5, ip
 8006e6e:	d105      	bne.n	8006e7c <__aeabi_dmul+0x234>
 8006e70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006e74:	bf1c      	itt	ne
 8006e76:	4610      	movne	r0, r2
 8006e78:	4619      	movne	r1, r3
 8006e7a:	d10a      	bne.n	8006e92 <__aeabi_dmul+0x24a>
 8006e7c:	ea81 0103 	eor.w	r1, r1, r3
 8006e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006e88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e8c:	f04f 0000 	mov.w	r0, #0
 8006e90:	bd70      	pop	{r4, r5, r6, pc}
 8006e92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006e96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}

08006e9c <__aeabi_ddiv>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006ea2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006ea6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006eaa:	bf1d      	ittte	ne
 8006eac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006eb0:	ea94 0f0c 	teqne	r4, ip
 8006eb4:	ea95 0f0c 	teqne	r5, ip
 8006eb8:	f000 f8a7 	bleq	800700a <__aeabi_ddiv+0x16e>
 8006ebc:	eba4 0405 	sub.w	r4, r4, r5
 8006ec0:	ea81 0e03 	eor.w	lr, r1, r3
 8006ec4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006ec8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006ecc:	f000 8088 	beq.w	8006fe0 <__aeabi_ddiv+0x144>
 8006ed0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006ed4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006ed8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006edc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006ee0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006ee4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006ee8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006eec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006ef0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006ef4:	429d      	cmp	r5, r3
 8006ef6:	bf08      	it	eq
 8006ef8:	4296      	cmpeq	r6, r2
 8006efa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006efe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006f02:	d202      	bcs.n	8006f0a <__aeabi_ddiv+0x6e>
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f0a:	1ab6      	subs	r6, r6, r2
 8006f0c:	eb65 0503 	sbc.w	r5, r5, r3
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006f1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f26:	bf22      	ittt	cs
 8006f28:	1ab6      	subcs	r6, r6, r2
 8006f2a:	4675      	movcs	r5, lr
 8006f2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f36:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f3e:	bf22      	ittt	cs
 8006f40:	1ab6      	subcs	r6, r6, r2
 8006f42:	4675      	movcs	r5, lr
 8006f44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f56:	bf22      	ittt	cs
 8006f58:	1ab6      	subcs	r6, r6, r2
 8006f5a:	4675      	movcs	r5, lr
 8006f5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f66:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f6e:	bf22      	ittt	cs
 8006f70:	1ab6      	subcs	r6, r6, r2
 8006f72:	4675      	movcs	r5, lr
 8006f74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006f78:	ea55 0e06 	orrs.w	lr, r5, r6
 8006f7c:	d018      	beq.n	8006fb0 <__aeabi_ddiv+0x114>
 8006f7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006f82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006f86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006f8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006f8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006f92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006f96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006f9a:	d1c0      	bne.n	8006f1e <__aeabi_ddiv+0x82>
 8006f9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006fa0:	d10b      	bne.n	8006fba <__aeabi_ddiv+0x11e>
 8006fa2:	ea41 0100 	orr.w	r1, r1, r0
 8006fa6:	f04f 0000 	mov.w	r0, #0
 8006faa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006fae:	e7b6      	b.n	8006f1e <__aeabi_ddiv+0x82>
 8006fb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006fb4:	bf04      	itt	eq
 8006fb6:	4301      	orreq	r1, r0
 8006fb8:	2000      	moveq	r0, #0
 8006fba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006fbe:	bf88      	it	hi
 8006fc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006fc4:	f63f aeaf 	bhi.w	8006d26 <__aeabi_dmul+0xde>
 8006fc8:	ebb5 0c03 	subs.w	ip, r5, r3
 8006fcc:	bf04      	itt	eq
 8006fce:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006fd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006fd6:	f150 0000 	adcs.w	r0, r0, #0
 8006fda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006fe4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006fe8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006fec:	bfc2      	ittt	gt
 8006fee:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006ff2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006ff6:	bd70      	popgt	{r4, r5, r6, pc}
 8006ff8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ffc:	f04f 0e00 	mov.w	lr, #0
 8007000:	3c01      	subs	r4, #1
 8007002:	e690      	b.n	8006d26 <__aeabi_dmul+0xde>
 8007004:	ea45 0e06 	orr.w	lr, r5, r6
 8007008:	e68d      	b.n	8006d26 <__aeabi_dmul+0xde>
 800700a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800700e:	ea94 0f0c 	teq	r4, ip
 8007012:	bf08      	it	eq
 8007014:	ea95 0f0c 	teqeq	r5, ip
 8007018:	f43f af3b 	beq.w	8006e92 <__aeabi_dmul+0x24a>
 800701c:	ea94 0f0c 	teq	r4, ip
 8007020:	d10a      	bne.n	8007038 <__aeabi_ddiv+0x19c>
 8007022:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007026:	f47f af34 	bne.w	8006e92 <__aeabi_dmul+0x24a>
 800702a:	ea95 0f0c 	teq	r5, ip
 800702e:	f47f af25 	bne.w	8006e7c <__aeabi_dmul+0x234>
 8007032:	4610      	mov	r0, r2
 8007034:	4619      	mov	r1, r3
 8007036:	e72c      	b.n	8006e92 <__aeabi_dmul+0x24a>
 8007038:	ea95 0f0c 	teq	r5, ip
 800703c:	d106      	bne.n	800704c <__aeabi_ddiv+0x1b0>
 800703e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007042:	f43f aefd 	beq.w	8006e40 <__aeabi_dmul+0x1f8>
 8007046:	4610      	mov	r0, r2
 8007048:	4619      	mov	r1, r3
 800704a:	e722      	b.n	8006e92 <__aeabi_dmul+0x24a>
 800704c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007050:	bf18      	it	ne
 8007052:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007056:	f47f aec5 	bne.w	8006de4 <__aeabi_dmul+0x19c>
 800705a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800705e:	f47f af0d 	bne.w	8006e7c <__aeabi_dmul+0x234>
 8007062:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007066:	f47f aeeb 	bne.w	8006e40 <__aeabi_dmul+0x1f8>
 800706a:	e712      	b.n	8006e92 <__aeabi_dmul+0x24a>

0800706c <__aeabi_d2f>:
 800706c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007070:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007074:	bf24      	itt	cs
 8007076:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800707a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800707e:	d90d      	bls.n	800709c <__aeabi_d2f+0x30>
 8007080:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007084:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007088:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800708c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007090:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007094:	bf08      	it	eq
 8007096:	f020 0001 	biceq.w	r0, r0, #1
 800709a:	4770      	bx	lr
 800709c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80070a0:	d121      	bne.n	80070e6 <__aeabi_d2f+0x7a>
 80070a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80070a6:	bfbc      	itt	lt
 80070a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80070ac:	4770      	bxlt	lr
 80070ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80070b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80070b6:	f1c2 0218 	rsb	r2, r2, #24
 80070ba:	f1c2 0c20 	rsb	ip, r2, #32
 80070be:	fa10 f30c 	lsls.w	r3, r0, ip
 80070c2:	fa20 f002 	lsr.w	r0, r0, r2
 80070c6:	bf18      	it	ne
 80070c8:	f040 0001 	orrne.w	r0, r0, #1
 80070cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80070d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80070d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80070d8:	ea40 000c 	orr.w	r0, r0, ip
 80070dc:	fa23 f302 	lsr.w	r3, r3, r2
 80070e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070e4:	e7cc      	b.n	8007080 <__aeabi_d2f+0x14>
 80070e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80070ea:	d107      	bne.n	80070fc <__aeabi_d2f+0x90>
 80070ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80070f0:	bf1e      	ittt	ne
 80070f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80070f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80070fa:	4770      	bxne	lr
 80070fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007100:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007104:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop

0800710c <__errno>:
 800710c:	4b01      	ldr	r3, [pc, #4]	; (8007114 <__errno+0x8>)
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	200004b0 	.word	0x200004b0

08007118 <__libc_init_array>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	4e0f      	ldr	r6, [pc, #60]	; (8007158 <__libc_init_array+0x40>)
 800711c:	4d0f      	ldr	r5, [pc, #60]	; (800715c <__libc_init_array+0x44>)
 800711e:	1b76      	subs	r6, r6, r5
 8007120:	10b6      	asrs	r6, r6, #2
 8007122:	bf18      	it	ne
 8007124:	2400      	movne	r4, #0
 8007126:	d005      	beq.n	8007134 <__libc_init_array+0x1c>
 8007128:	3401      	adds	r4, #1
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	42a6      	cmp	r6, r4
 8007132:	d1f9      	bne.n	8007128 <__libc_init_array+0x10>
 8007134:	4e0a      	ldr	r6, [pc, #40]	; (8007160 <__libc_init_array+0x48>)
 8007136:	4d0b      	ldr	r5, [pc, #44]	; (8007164 <__libc_init_array+0x4c>)
 8007138:	1b76      	subs	r6, r6, r5
 800713a:	f7fc f943 	bl	80033c4 <_init>
 800713e:	10b6      	asrs	r6, r6, #2
 8007140:	bf18      	it	ne
 8007142:	2400      	movne	r4, #0
 8007144:	d006      	beq.n	8007154 <__libc_init_array+0x3c>
 8007146:	3401      	adds	r4, #1
 8007148:	f855 3b04 	ldr.w	r3, [r5], #4
 800714c:	4798      	blx	r3
 800714e:	42a6      	cmp	r6, r4
 8007150:	d1f9      	bne.n	8007146 <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	bd70      	pop	{r4, r5, r6, pc}
 8007156:	bf00      	nop
 8007158:	200008fc 	.word	0x200008fc
 800715c:	200008fc 	.word	0x200008fc
 8007160:	200008fc 	.word	0x200008fc
 8007164:	200008fc 	.word	0x200008fc

08007168 <memcpy>:
 8007168:	4684      	mov	ip, r0
 800716a:	ea41 0300 	orr.w	r3, r1, r0
 800716e:	f013 0303 	ands.w	r3, r3, #3
 8007172:	d16d      	bne.n	8007250 <memcpy+0xe8>
 8007174:	3a40      	subs	r2, #64	; 0x40
 8007176:	d341      	bcc.n	80071fc <memcpy+0x94>
 8007178:	f851 3b04 	ldr.w	r3, [r1], #4
 800717c:	f840 3b04 	str.w	r3, [r0], #4
 8007180:	f851 3b04 	ldr.w	r3, [r1], #4
 8007184:	f840 3b04 	str.w	r3, [r0], #4
 8007188:	f851 3b04 	ldr.w	r3, [r1], #4
 800718c:	f840 3b04 	str.w	r3, [r0], #4
 8007190:	f851 3b04 	ldr.w	r3, [r1], #4
 8007194:	f840 3b04 	str.w	r3, [r0], #4
 8007198:	f851 3b04 	ldr.w	r3, [r1], #4
 800719c:	f840 3b04 	str.w	r3, [r0], #4
 80071a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071a4:	f840 3b04 	str.w	r3, [r0], #4
 80071a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80071ac:	f840 3b04 	str.w	r3, [r0], #4
 80071b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071b4:	f840 3b04 	str.w	r3, [r0], #4
 80071b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80071bc:	f840 3b04 	str.w	r3, [r0], #4
 80071c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071c4:	f840 3b04 	str.w	r3, [r0], #4
 80071c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80071cc:	f840 3b04 	str.w	r3, [r0], #4
 80071d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071d4:	f840 3b04 	str.w	r3, [r0], #4
 80071d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80071dc:	f840 3b04 	str.w	r3, [r0], #4
 80071e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071e4:	f840 3b04 	str.w	r3, [r0], #4
 80071e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80071ec:	f840 3b04 	str.w	r3, [r0], #4
 80071f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071f4:	f840 3b04 	str.w	r3, [r0], #4
 80071f8:	3a40      	subs	r2, #64	; 0x40
 80071fa:	d2bd      	bcs.n	8007178 <memcpy+0x10>
 80071fc:	3230      	adds	r2, #48	; 0x30
 80071fe:	d311      	bcc.n	8007224 <memcpy+0xbc>
 8007200:	f851 3b04 	ldr.w	r3, [r1], #4
 8007204:	f840 3b04 	str.w	r3, [r0], #4
 8007208:	f851 3b04 	ldr.w	r3, [r1], #4
 800720c:	f840 3b04 	str.w	r3, [r0], #4
 8007210:	f851 3b04 	ldr.w	r3, [r1], #4
 8007214:	f840 3b04 	str.w	r3, [r0], #4
 8007218:	f851 3b04 	ldr.w	r3, [r1], #4
 800721c:	f840 3b04 	str.w	r3, [r0], #4
 8007220:	3a10      	subs	r2, #16
 8007222:	d2ed      	bcs.n	8007200 <memcpy+0x98>
 8007224:	320c      	adds	r2, #12
 8007226:	d305      	bcc.n	8007234 <memcpy+0xcc>
 8007228:	f851 3b04 	ldr.w	r3, [r1], #4
 800722c:	f840 3b04 	str.w	r3, [r0], #4
 8007230:	3a04      	subs	r2, #4
 8007232:	d2f9      	bcs.n	8007228 <memcpy+0xc0>
 8007234:	3204      	adds	r2, #4
 8007236:	d008      	beq.n	800724a <memcpy+0xe2>
 8007238:	07d2      	lsls	r2, r2, #31
 800723a:	bf1c      	itt	ne
 800723c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8007240:	f800 3b01 	strbne.w	r3, [r0], #1
 8007244:	d301      	bcc.n	800724a <memcpy+0xe2>
 8007246:	880b      	ldrh	r3, [r1, #0]
 8007248:	8003      	strh	r3, [r0, #0]
 800724a:	4660      	mov	r0, ip
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	2a08      	cmp	r2, #8
 8007252:	d313      	bcc.n	800727c <memcpy+0x114>
 8007254:	078b      	lsls	r3, r1, #30
 8007256:	d08d      	beq.n	8007174 <memcpy+0xc>
 8007258:	f010 0303 	ands.w	r3, r0, #3
 800725c:	d08a      	beq.n	8007174 <memcpy+0xc>
 800725e:	f1c3 0304 	rsb	r3, r3, #4
 8007262:	1ad2      	subs	r2, r2, r3
 8007264:	07db      	lsls	r3, r3, #31
 8007266:	bf1c      	itt	ne
 8007268:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800726c:	f800 3b01 	strbne.w	r3, [r0], #1
 8007270:	d380      	bcc.n	8007174 <memcpy+0xc>
 8007272:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007276:	f820 3b02 	strh.w	r3, [r0], #2
 800727a:	e77b      	b.n	8007174 <memcpy+0xc>
 800727c:	3a04      	subs	r2, #4
 800727e:	d3d9      	bcc.n	8007234 <memcpy+0xcc>
 8007280:	3a01      	subs	r2, #1
 8007282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007286:	f800 3b01 	strb.w	r3, [r0], #1
 800728a:	d2f9      	bcs.n	8007280 <memcpy+0x118>
 800728c:	780b      	ldrb	r3, [r1, #0]
 800728e:	7003      	strb	r3, [r0, #0]
 8007290:	784b      	ldrb	r3, [r1, #1]
 8007292:	7043      	strb	r3, [r0, #1]
 8007294:	788b      	ldrb	r3, [r1, #2]
 8007296:	7083      	strb	r3, [r0, #2]
 8007298:	4660      	mov	r0, ip
 800729a:	4770      	bx	lr

0800729c <memset>:
 800729c:	b470      	push	{r4, r5, r6}
 800729e:	0784      	lsls	r4, r0, #30
 80072a0:	d046      	beq.n	8007330 <memset+0x94>
 80072a2:	1e54      	subs	r4, r2, #1
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	d041      	beq.n	800732c <memset+0x90>
 80072a8:	b2cd      	uxtb	r5, r1
 80072aa:	4603      	mov	r3, r0
 80072ac:	e002      	b.n	80072b4 <memset+0x18>
 80072ae:	1e62      	subs	r2, r4, #1
 80072b0:	b3e4      	cbz	r4, 800732c <memset+0x90>
 80072b2:	4614      	mov	r4, r2
 80072b4:	f803 5b01 	strb.w	r5, [r3], #1
 80072b8:	079a      	lsls	r2, r3, #30
 80072ba:	d1f8      	bne.n	80072ae <memset+0x12>
 80072bc:	2c03      	cmp	r4, #3
 80072be:	d92e      	bls.n	800731e <memset+0x82>
 80072c0:	b2cd      	uxtb	r5, r1
 80072c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80072c6:	2c0f      	cmp	r4, #15
 80072c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80072cc:	d919      	bls.n	8007302 <memset+0x66>
 80072ce:	f103 0210 	add.w	r2, r3, #16
 80072d2:	4626      	mov	r6, r4
 80072d4:	3e10      	subs	r6, #16
 80072d6:	2e0f      	cmp	r6, #15
 80072d8:	f842 5c10 	str.w	r5, [r2, #-16]
 80072dc:	f842 5c0c 	str.w	r5, [r2, #-12]
 80072e0:	f842 5c08 	str.w	r5, [r2, #-8]
 80072e4:	f842 5c04 	str.w	r5, [r2, #-4]
 80072e8:	f102 0210 	add.w	r2, r2, #16
 80072ec:	d8f2      	bhi.n	80072d4 <memset+0x38>
 80072ee:	f1a4 0210 	sub.w	r2, r4, #16
 80072f2:	f022 020f 	bic.w	r2, r2, #15
 80072f6:	f004 040f 	and.w	r4, r4, #15
 80072fa:	3210      	adds	r2, #16
 80072fc:	2c03      	cmp	r4, #3
 80072fe:	4413      	add	r3, r2
 8007300:	d90d      	bls.n	800731e <memset+0x82>
 8007302:	461e      	mov	r6, r3
 8007304:	4622      	mov	r2, r4
 8007306:	3a04      	subs	r2, #4
 8007308:	2a03      	cmp	r2, #3
 800730a:	f846 5b04 	str.w	r5, [r6], #4
 800730e:	d8fa      	bhi.n	8007306 <memset+0x6a>
 8007310:	1f22      	subs	r2, r4, #4
 8007312:	f022 0203 	bic.w	r2, r2, #3
 8007316:	3204      	adds	r2, #4
 8007318:	4413      	add	r3, r2
 800731a:	f004 0403 	and.w	r4, r4, #3
 800731e:	b12c      	cbz	r4, 800732c <memset+0x90>
 8007320:	b2c9      	uxtb	r1, r1
 8007322:	441c      	add	r4, r3
 8007324:	f803 1b01 	strb.w	r1, [r3], #1
 8007328:	42a3      	cmp	r3, r4
 800732a:	d1fb      	bne.n	8007324 <memset+0x88>
 800732c:	bc70      	pop	{r4, r5, r6}
 800732e:	4770      	bx	lr
 8007330:	4614      	mov	r4, r2
 8007332:	4603      	mov	r3, r0
 8007334:	e7c2      	b.n	80072bc <memset+0x20>
 8007336:	bf00      	nop

08007338 <sprintf>:
 8007338:	b40e      	push	{r1, r2, r3}
 800733a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733c:	b09c      	sub	sp, #112	; 0x70
 800733e:	ab21      	add	r3, sp, #132	; 0x84
 8007340:	490f      	ldr	r1, [pc, #60]	; (8007380 <sprintf+0x48>)
 8007342:	f853 2b04 	ldr.w	r2, [r3], #4
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	4605      	mov	r5, r0
 800734a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800734e:	6808      	ldr	r0, [r1, #0]
 8007350:	9502      	str	r5, [sp, #8]
 8007352:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007356:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800735a:	a902      	add	r1, sp, #8
 800735c:	9506      	str	r5, [sp, #24]
 800735e:	f8ad 7014 	strh.w	r7, [sp, #20]
 8007362:	9404      	str	r4, [sp, #16]
 8007364:	9407      	str	r4, [sp, #28]
 8007366:	f8ad 6016 	strh.w	r6, [sp, #22]
 800736a:	f000 f839 	bl	80073e0 <_svfprintf_r>
 800736e:	9b02      	ldr	r3, [sp, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	b01c      	add	sp, #112	; 0x70
 8007376:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800737a:	b003      	add	sp, #12
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	200004b0 	.word	0x200004b0

08007384 <strlen>:
 8007384:	f020 0103 	bic.w	r1, r0, #3
 8007388:	f010 0003 	ands.w	r0, r0, #3
 800738c:	f1c0 0000 	rsb	r0, r0, #0
 8007390:	f851 3b04 	ldr.w	r3, [r1], #4
 8007394:	f100 0c04 	add.w	ip, r0, #4
 8007398:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800739c:	f06f 0200 	mvn.w	r2, #0
 80073a0:	bf1c      	itt	ne
 80073a2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80073a6:	4313      	orrne	r3, r2
 80073a8:	f04f 0c01 	mov.w	ip, #1
 80073ac:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80073b0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80073b4:	eba3 020c 	sub.w	r2, r3, ip
 80073b8:	ea22 0203 	bic.w	r2, r2, r3
 80073bc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80073c0:	bf04      	itt	eq
 80073c2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80073c6:	3004      	addeq	r0, #4
 80073c8:	d0f4      	beq.n	80073b4 <strlen+0x30>
 80073ca:	f1c2 0100 	rsb	r1, r2, #0
 80073ce:	ea02 0201 	and.w	r2, r2, r1
 80073d2:	fab2 f282 	clz	r2, r2
 80073d6:	f1c2 021f 	rsb	r2, r2, #31
 80073da:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80073de:	4770      	bx	lr

080073e0 <_svfprintf_r>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	b0c3      	sub	sp, #268	; 0x10c
 80073e6:	4689      	mov	r9, r1
 80073e8:	920a      	str	r2, [sp, #40]	; 0x28
 80073ea:	930e      	str	r3, [sp, #56]	; 0x38
 80073ec:	9008      	str	r0, [sp, #32]
 80073ee:	f002 fa3f 	bl	8009870 <_localeconv_r>
 80073f2:	6803      	ldr	r3, [r0, #0]
 80073f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff ffc4 	bl	8007384 <strlen>
 80073fc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007400:	9018      	str	r0, [sp, #96]	; 0x60
 8007402:	061a      	lsls	r2, r3, #24
 8007404:	d504      	bpl.n	8007410 <_svfprintf_r+0x30>
 8007406:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f001 80a1 	beq.w	8008552 <_svfprintf_r+0x1172>
 8007410:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8007678 <_svfprintf_r+0x298>
 8007414:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8007418:	2300      	movs	r3, #0
 800741a:	af32      	add	r7, sp, #200	; 0xc8
 800741c:	9313      	str	r3, [sp, #76]	; 0x4c
 800741e:	9327      	str	r3, [sp, #156]	; 0x9c
 8007420:	9326      	str	r3, [sp, #152]	; 0x98
 8007422:	9316      	str	r3, [sp, #88]	; 0x58
 8007424:	9319      	str	r3, [sp, #100]	; 0x64
 8007426:	930b      	str	r3, [sp, #44]	; 0x2c
 8007428:	9725      	str	r7, [sp, #148]	; 0x94
 800742a:	463c      	mov	r4, r7
 800742c:	464e      	mov	r6, r9
 800742e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007430:	782b      	ldrb	r3, [r5, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 80a9 	beq.w	800758a <_svfprintf_r+0x1aa>
 8007438:	2b25      	cmp	r3, #37	; 0x25
 800743a:	d102      	bne.n	8007442 <_svfprintf_r+0x62>
 800743c:	e0a5      	b.n	800758a <_svfprintf_r+0x1aa>
 800743e:	2b25      	cmp	r3, #37	; 0x25
 8007440:	d003      	beq.n	800744a <_svfprintf_r+0x6a>
 8007442:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f9      	bne.n	800743e <_svfprintf_r+0x5e>
 800744a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744c:	1aeb      	subs	r3, r5, r3
 800744e:	b173      	cbz	r3, 800746e <_svfprintf_r+0x8e>
 8007450:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007452:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007454:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007456:	6020      	str	r0, [r4, #0]
 8007458:	3201      	adds	r2, #1
 800745a:	4419      	add	r1, r3
 800745c:	2a07      	cmp	r2, #7
 800745e:	6063      	str	r3, [r4, #4]
 8007460:	9127      	str	r1, [sp, #156]	; 0x9c
 8007462:	9226      	str	r2, [sp, #152]	; 0x98
 8007464:	dc72      	bgt.n	800754c <_svfprintf_r+0x16c>
 8007466:	3408      	adds	r4, #8
 8007468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800746a:	441a      	add	r2, r3
 800746c:	920b      	str	r2, [sp, #44]	; 0x2c
 800746e:	782b      	ldrb	r3, [r5, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 87c9 	beq.w	8008408 <_svfprintf_r+0x1028>
 8007476:	2300      	movs	r3, #0
 8007478:	1c69      	adds	r1, r5, #1
 800747a:	786d      	ldrb	r5, [r5, #1]
 800747c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8007480:	461a      	mov	r2, r3
 8007482:	930c      	str	r3, [sp, #48]	; 0x30
 8007484:	9307      	str	r3, [sp, #28]
 8007486:	f04f 3aff 	mov.w	sl, #4294967295
 800748a:	1c4b      	adds	r3, r1, #1
 800748c:	f1a5 0120 	sub.w	r1, r5, #32
 8007490:	2958      	cmp	r1, #88	; 0x58
 8007492:	f200 83e4 	bhi.w	8007c5e <_svfprintf_r+0x87e>
 8007496:	e8df f011 	tbh	[pc, r1, lsl #1]
 800749a:	0277      	.short	0x0277
 800749c:	03e203e2 	.word	0x03e203e2
 80074a0:	03e2037b 	.word	0x03e2037b
 80074a4:	03e203e2 	.word	0x03e203e2
 80074a8:	03e203e2 	.word	0x03e203e2
 80074ac:	02f703e2 	.word	0x02f703e2
 80074b0:	03e20214 	.word	0x03e20214
 80074b4:	021801fb 	.word	0x021801fb
 80074b8:	038203e2 	.word	0x038203e2
 80074bc:	02c102c1 	.word	0x02c102c1
 80074c0:	02c102c1 	.word	0x02c102c1
 80074c4:	02c102c1 	.word	0x02c102c1
 80074c8:	02c102c1 	.word	0x02c102c1
 80074cc:	03e202c1 	.word	0x03e202c1
 80074d0:	03e203e2 	.word	0x03e203e2
 80074d4:	03e203e2 	.word	0x03e203e2
 80074d8:	03e203e2 	.word	0x03e203e2
 80074dc:	03e203e2 	.word	0x03e203e2
 80074e0:	02d003e2 	.word	0x02d003e2
 80074e4:	03e20391 	.word	0x03e20391
 80074e8:	03e20391 	.word	0x03e20391
 80074ec:	03e203e2 	.word	0x03e203e2
 80074f0:	037403e2 	.word	0x037403e2
 80074f4:	03e203e2 	.word	0x03e203e2
 80074f8:	03e2030c 	.word	0x03e2030c
 80074fc:	03e203e2 	.word	0x03e203e2
 8007500:	03e203e2 	.word	0x03e203e2
 8007504:	03e2032a 	.word	0x03e2032a
 8007508:	034403e2 	.word	0x034403e2
 800750c:	03e203e2 	.word	0x03e203e2
 8007510:	03e203e2 	.word	0x03e203e2
 8007514:	03e203e2 	.word	0x03e203e2
 8007518:	03e203e2 	.word	0x03e203e2
 800751c:	03e203e2 	.word	0x03e203e2
 8007520:	0233035f 	.word	0x0233035f
 8007524:	03910391 	.word	0x03910391
 8007528:	03050391 	.word	0x03050391
 800752c:	03e20233 	.word	0x03e20233
 8007530:	02ed03e2 	.word	0x02ed03e2
 8007534:	028503e2 	.word	0x028503e2
 8007538:	03cb0202 	.word	0x03cb0202
 800753c:	03e2027e 	.word	0x03e2027e
 8007540:	03e20299 	.word	0x03e20299
 8007544:	03e2007a 	.word	0x03e2007a
 8007548:	025103e2 	.word	0x025103e2
 800754c:	9808      	ldr	r0, [sp, #32]
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	4631      	mov	r1, r6
 8007552:	aa25      	add	r2, sp, #148	; 0x94
 8007554:	f002 ff9e 	bl	800a494 <__ssprint_r>
 8007558:	b950      	cbnz	r0, 8007570 <_svfprintf_r+0x190>
 800755a:	463c      	mov	r4, r7
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	e783      	b.n	8007468 <_svfprintf_r+0x88>
 8007560:	9808      	ldr	r0, [sp, #32]
 8007562:	4631      	mov	r1, r6
 8007564:	aa25      	add	r2, sp, #148	; 0x94
 8007566:	f002 ff95 	bl	800a494 <__ssprint_r>
 800756a:	2800      	cmp	r0, #0
 800756c:	f000 818c 	beq.w	8007888 <_svfprintf_r+0x4a8>
 8007570:	46b1      	mov	r9, r6
 8007572:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007576:	f013 0f40 	tst.w	r3, #64	; 0x40
 800757a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757c:	bf18      	it	ne
 800757e:	f04f 33ff 	movne.w	r3, #4294967295
 8007582:	4618      	mov	r0, r3
 8007584:	b043      	add	sp, #268	; 0x10c
 8007586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800758c:	e76f      	b.n	800746e <_svfprintf_r+0x8e>
 800758e:	930a      	str	r3, [sp, #40]	; 0x28
 8007590:	9b07      	ldr	r3, [sp, #28]
 8007592:	0698      	lsls	r0, r3, #26
 8007594:	f140 82b4 	bpl.w	8007b00 <_svfprintf_r+0x720>
 8007598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800759a:	f103 0907 	add.w	r9, r3, #7
 800759e:	f029 0307 	bic.w	r3, r9, #7
 80075a2:	f103 0208 	add.w	r2, r3, #8
 80075a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075aa:	920e      	str	r2, [sp, #56]	; 0x38
 80075ac:	2301      	movs	r3, #1
 80075ae:	f04f 0c00 	mov.w	ip, #0
 80075b2:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 80075b6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80075ba:	f1ba 0f00 	cmp.w	sl, #0
 80075be:	db03      	blt.n	80075c8 <_svfprintf_r+0x1e8>
 80075c0:	9a07      	ldr	r2, [sp, #28]
 80075c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075c6:	9207      	str	r2, [sp, #28]
 80075c8:	ea58 0209 	orrs.w	r2, r8, r9
 80075cc:	f040 8357 	bne.w	8007c7e <_svfprintf_r+0x89e>
 80075d0:	f1ba 0f00 	cmp.w	sl, #0
 80075d4:	f000 845c 	beq.w	8007e90 <_svfprintf_r+0xab0>
 80075d8:	2b01      	cmp	r3, #1
 80075da:	f000 835a 	beq.w	8007c92 <_svfprintf_r+0x8b2>
 80075de:	2b02      	cmp	r3, #2
 80075e0:	f000 849a 	beq.w	8007f18 <_svfprintf_r+0xb38>
 80075e4:	4639      	mov	r1, r7
 80075e6:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 80075ea:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 80075ee:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 80075f2:	f008 0307 	and.w	r3, r8, #7
 80075f6:	4681      	mov	r9, r0
 80075f8:	4690      	mov	r8, r2
 80075fa:	3330      	adds	r3, #48	; 0x30
 80075fc:	ea58 0209 	orrs.w	r2, r8, r9
 8007600:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8007604:	d1ef      	bne.n	80075e6 <_svfprintf_r+0x206>
 8007606:	9a07      	ldr	r2, [sp, #28]
 8007608:	9110      	str	r1, [sp, #64]	; 0x40
 800760a:	07d2      	lsls	r2, r2, #31
 800760c:	f100 856e 	bmi.w	80080ec <_svfprintf_r+0xd0c>
 8007610:	1a7b      	subs	r3, r7, r1
 8007612:	930d      	str	r3, [sp, #52]	; 0x34
 8007614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007616:	4592      	cmp	sl, r2
 8007618:	4653      	mov	r3, sl
 800761a:	bfb8      	it	lt
 800761c:	4613      	movlt	r3, r2
 800761e:	9309      	str	r3, [sp, #36]	; 0x24
 8007620:	2300      	movs	r3, #0
 8007622:	9312      	str	r3, [sp, #72]	; 0x48
 8007624:	f1bc 0f00 	cmp.w	ip, #0
 8007628:	d002      	beq.n	8007630 <_svfprintf_r+0x250>
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	3301      	adds	r3, #1
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	9b07      	ldr	r3, [sp, #28]
 8007632:	f013 0302 	ands.w	r3, r3, #2
 8007636:	930f      	str	r3, [sp, #60]	; 0x3c
 8007638:	d002      	beq.n	8007640 <_svfprintf_r+0x260>
 800763a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763c:	3302      	adds	r3, #2
 800763e:	9309      	str	r3, [sp, #36]	; 0x24
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8007646:	f040 8317 	bne.w	8007c78 <_svfprintf_r+0x898>
 800764a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800764c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800764e:	ebc2 0803 	rsb	r8, r2, r3
 8007652:	f1b8 0f00 	cmp.w	r8, #0
 8007656:	f340 830f 	ble.w	8007c78 <_svfprintf_r+0x898>
 800765a:	f1b8 0f10 	cmp.w	r8, #16
 800765e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007660:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007662:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8007680 <_svfprintf_r+0x2a0>
 8007666:	dd30      	ble.n	80076ca <_svfprintf_r+0x2ea>
 8007668:	4653      	mov	r3, sl
 800766a:	f04f 0b10 	mov.w	fp, #16
 800766e:	46c2      	mov	sl, r8
 8007670:	46a8      	mov	r8, r5
 8007672:	461d      	mov	r5, r3
 8007674:	e00d      	b.n	8007692 <_svfprintf_r+0x2b2>
 8007676:	bf00      	nop
	...
 8007680:	0800b678 	.word	0x0800b678
 8007684:	f1aa 0a10 	sub.w	sl, sl, #16
 8007688:	f1ba 0f10 	cmp.w	sl, #16
 800768c:	f104 0408 	add.w	r4, r4, #8
 8007690:	dd17      	ble.n	80076c2 <_svfprintf_r+0x2e2>
 8007692:	3201      	adds	r2, #1
 8007694:	3110      	adds	r1, #16
 8007696:	2a07      	cmp	r2, #7
 8007698:	9127      	str	r1, [sp, #156]	; 0x9c
 800769a:	9226      	str	r2, [sp, #152]	; 0x98
 800769c:	e884 0820 	stmia.w	r4, {r5, fp}
 80076a0:	ddf0      	ble.n	8007684 <_svfprintf_r+0x2a4>
 80076a2:	9808      	ldr	r0, [sp, #32]
 80076a4:	4631      	mov	r1, r6
 80076a6:	aa25      	add	r2, sp, #148	; 0x94
 80076a8:	f002 fef4 	bl	800a494 <__ssprint_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f47f af5f 	bne.w	8007570 <_svfprintf_r+0x190>
 80076b2:	f1aa 0a10 	sub.w	sl, sl, #16
 80076b6:	f1ba 0f10 	cmp.w	sl, #16
 80076ba:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80076bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076be:	463c      	mov	r4, r7
 80076c0:	dce7      	bgt.n	8007692 <_svfprintf_r+0x2b2>
 80076c2:	462b      	mov	r3, r5
 80076c4:	4645      	mov	r5, r8
 80076c6:	46d0      	mov	r8, sl
 80076c8:	469a      	mov	sl, r3
 80076ca:	3201      	adds	r2, #1
 80076cc:	eb08 0b01 	add.w	fp, r8, r1
 80076d0:	2a07      	cmp	r2, #7
 80076d2:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80076d6:	9226      	str	r2, [sp, #152]	; 0x98
 80076d8:	f8c4 a000 	str.w	sl, [r4]
 80076dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80076e0:	f300 847e 	bgt.w	8007fe0 <_svfprintf_r+0xc00>
 80076e4:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 80076e8:	3408      	adds	r4, #8
 80076ea:	f1bc 0f00 	cmp.w	ip, #0
 80076ee:	d00f      	beq.n	8007710 <_svfprintf_r+0x330>
 80076f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076f2:	3301      	adds	r3, #1
 80076f4:	f10b 0b01 	add.w	fp, fp, #1
 80076f8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 80076fc:	2201      	movs	r2, #1
 80076fe:	2b07      	cmp	r3, #7
 8007700:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007704:	9326      	str	r3, [sp, #152]	; 0x98
 8007706:	e884 0006 	stmia.w	r4, {r1, r2}
 800770a:	f300 83ea 	bgt.w	8007ee2 <_svfprintf_r+0xb02>
 800770e:	3408      	adds	r4, #8
 8007710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007712:	b173      	cbz	r3, 8007732 <_svfprintf_r+0x352>
 8007714:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007716:	3301      	adds	r3, #1
 8007718:	f10b 0b02 	add.w	fp, fp, #2
 800771c:	a91e      	add	r1, sp, #120	; 0x78
 800771e:	2202      	movs	r2, #2
 8007720:	2b07      	cmp	r3, #7
 8007722:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007726:	9326      	str	r3, [sp, #152]	; 0x98
 8007728:	e884 0006 	stmia.w	r4, {r1, r2}
 800772c:	f300 83cd 	bgt.w	8007eca <_svfprintf_r+0xaea>
 8007730:	3408      	adds	r4, #8
 8007732:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8007736:	f000 8315 	beq.w	8007d64 <_svfprintf_r+0x984>
 800773a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800773c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800773e:	ebc2 0a03 	rsb	sl, r2, r3
 8007742:	f1ba 0f00 	cmp.w	sl, #0
 8007746:	dd3c      	ble.n	80077c2 <_svfprintf_r+0x3e2>
 8007748:	f1ba 0f10 	cmp.w	sl, #16
 800774c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800774e:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 8007bb4 <_svfprintf_r+0x7d4>
 8007752:	dd2b      	ble.n	80077ac <_svfprintf_r+0x3cc>
 8007754:	4649      	mov	r1, r9
 8007756:	465b      	mov	r3, fp
 8007758:	46a9      	mov	r9, r5
 800775a:	f04f 0810 	mov.w	r8, #16
 800775e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007762:	460d      	mov	r5, r1
 8007764:	e006      	b.n	8007774 <_svfprintf_r+0x394>
 8007766:	f1aa 0a10 	sub.w	sl, sl, #16
 800776a:	f1ba 0f10 	cmp.w	sl, #16
 800776e:	f104 0408 	add.w	r4, r4, #8
 8007772:	dd17      	ble.n	80077a4 <_svfprintf_r+0x3c4>
 8007774:	3201      	adds	r2, #1
 8007776:	3310      	adds	r3, #16
 8007778:	2a07      	cmp	r2, #7
 800777a:	9327      	str	r3, [sp, #156]	; 0x9c
 800777c:	9226      	str	r2, [sp, #152]	; 0x98
 800777e:	e884 0120 	stmia.w	r4, {r5, r8}
 8007782:	ddf0      	ble.n	8007766 <_svfprintf_r+0x386>
 8007784:	4658      	mov	r0, fp
 8007786:	4631      	mov	r1, r6
 8007788:	aa25      	add	r2, sp, #148	; 0x94
 800778a:	f002 fe83 	bl	800a494 <__ssprint_r>
 800778e:	2800      	cmp	r0, #0
 8007790:	f47f aeee 	bne.w	8007570 <_svfprintf_r+0x190>
 8007794:	f1aa 0a10 	sub.w	sl, sl, #16
 8007798:	f1ba 0f10 	cmp.w	sl, #16
 800779c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800779e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077a0:	463c      	mov	r4, r7
 80077a2:	dce7      	bgt.n	8007774 <_svfprintf_r+0x394>
 80077a4:	469b      	mov	fp, r3
 80077a6:	462b      	mov	r3, r5
 80077a8:	464d      	mov	r5, r9
 80077aa:	4699      	mov	r9, r3
 80077ac:	3201      	adds	r2, #1
 80077ae:	44d3      	add	fp, sl
 80077b0:	2a07      	cmp	r2, #7
 80077b2:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80077b6:	9226      	str	r2, [sp, #152]	; 0x98
 80077b8:	e884 0600 	stmia.w	r4, {r9, sl}
 80077bc:	f300 8379 	bgt.w	8007eb2 <_svfprintf_r+0xad2>
 80077c0:	3408      	adds	r4, #8
 80077c2:	9b07      	ldr	r3, [sp, #28]
 80077c4:	05d9      	lsls	r1, r3, #23
 80077c6:	f100 8270 	bmi.w	8007caa <_svfprintf_r+0x8ca>
 80077ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077d0:	6022      	str	r2, [r4, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	448b      	add	fp, r1
 80077d6:	2b07      	cmp	r3, #7
 80077d8:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80077dc:	6061      	str	r1, [r4, #4]
 80077de:	9326      	str	r3, [sp, #152]	; 0x98
 80077e0:	f300 834a 	bgt.w	8007e78 <_svfprintf_r+0xa98>
 80077e4:	3408      	adds	r4, #8
 80077e6:	9b07      	ldr	r3, [sp, #28]
 80077e8:	075a      	lsls	r2, r3, #29
 80077ea:	d541      	bpl.n	8007870 <_svfprintf_r+0x490>
 80077ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f0:	1a9d      	subs	r5, r3, r2
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	dd3c      	ble.n	8007870 <_svfprintf_r+0x490>
 80077f6:	2d10      	cmp	r5, #16
 80077f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077fa:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8007bb8 <_svfprintf_r+0x7d8>
 80077fe:	dd23      	ble.n	8007848 <_svfprintf_r+0x468>
 8007800:	f04f 0810 	mov.w	r8, #16
 8007804:	465a      	mov	r2, fp
 8007806:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800780a:	e004      	b.n	8007816 <_svfprintf_r+0x436>
 800780c:	3d10      	subs	r5, #16
 800780e:	2d10      	cmp	r5, #16
 8007810:	f104 0408 	add.w	r4, r4, #8
 8007814:	dd17      	ble.n	8007846 <_svfprintf_r+0x466>
 8007816:	3301      	adds	r3, #1
 8007818:	3210      	adds	r2, #16
 800781a:	2b07      	cmp	r3, #7
 800781c:	9227      	str	r2, [sp, #156]	; 0x9c
 800781e:	9326      	str	r3, [sp, #152]	; 0x98
 8007820:	f8c4 a000 	str.w	sl, [r4]
 8007824:	f8c4 8004 	str.w	r8, [r4, #4]
 8007828:	ddf0      	ble.n	800780c <_svfprintf_r+0x42c>
 800782a:	4648      	mov	r0, r9
 800782c:	4631      	mov	r1, r6
 800782e:	aa25      	add	r2, sp, #148	; 0x94
 8007830:	f002 fe30 	bl	800a494 <__ssprint_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	f47f ae9b 	bne.w	8007570 <_svfprintf_r+0x190>
 800783a:	3d10      	subs	r5, #16
 800783c:	2d10      	cmp	r5, #16
 800783e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007840:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007842:	463c      	mov	r4, r7
 8007844:	dce7      	bgt.n	8007816 <_svfprintf_r+0x436>
 8007846:	4693      	mov	fp, r2
 8007848:	3301      	adds	r3, #1
 800784a:	44ab      	add	fp, r5
 800784c:	2b07      	cmp	r3, #7
 800784e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007852:	9326      	str	r3, [sp, #152]	; 0x98
 8007854:	f8c4 a000 	str.w	sl, [r4]
 8007858:	6065      	str	r5, [r4, #4]
 800785a:	dd09      	ble.n	8007870 <_svfprintf_r+0x490>
 800785c:	9808      	ldr	r0, [sp, #32]
 800785e:	4631      	mov	r1, r6
 8007860:	aa25      	add	r2, sp, #148	; 0x94
 8007862:	f002 fe17 	bl	800a494 <__ssprint_r>
 8007866:	2800      	cmp	r0, #0
 8007868:	f47f ae82 	bne.w	8007570 <_svfprintf_r+0x190>
 800786c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007874:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007876:	428a      	cmp	r2, r1
 8007878:	bfac      	ite	ge
 800787a:	189b      	addge	r3, r3, r2
 800787c:	185b      	addlt	r3, r3, r1
 800787e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007880:	f1bb 0f00 	cmp.w	fp, #0
 8007884:	f47f ae6c 	bne.w	8007560 <_svfprintf_r+0x180>
 8007888:	2300      	movs	r3, #0
 800788a:	9326      	str	r3, [sp, #152]	; 0x98
 800788c:	463c      	mov	r4, r7
 800788e:	e5ce      	b.n	800742e <_svfprintf_r+0x4e>
 8007890:	4619      	mov	r1, r3
 8007892:	9807      	ldr	r0, [sp, #28]
 8007894:	781d      	ldrb	r5, [r3, #0]
 8007896:	f040 0004 	orr.w	r0, r0, #4
 800789a:	9007      	str	r0, [sp, #28]
 800789c:	e5f5      	b.n	800748a <_svfprintf_r+0xaa>
 800789e:	930a      	str	r3, [sp, #40]	; 0x28
 80078a0:	9b07      	ldr	r3, [sp, #28]
 80078a2:	f013 0320 	ands.w	r3, r3, #32
 80078a6:	f000 810e 	beq.w	8007ac6 <_svfprintf_r+0x6e6>
 80078aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ac:	f103 0907 	add.w	r9, r3, #7
 80078b0:	f029 0307 	bic.w	r3, r9, #7
 80078b4:	f103 0208 	add.w	r2, r3, #8
 80078b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078bc:	920e      	str	r2, [sp, #56]	; 0x38
 80078be:	2300      	movs	r3, #0
 80078c0:	e675      	b.n	80075ae <_svfprintf_r+0x1ce>
 80078c2:	781d      	ldrb	r5, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	222b      	movs	r2, #43	; 0x2b
 80078c8:	e5df      	b.n	800748a <_svfprintf_r+0xaa>
 80078ca:	781d      	ldrb	r5, [r3, #0]
 80078cc:	2d2a      	cmp	r5, #42	; 0x2a
 80078ce:	f103 0101 	add.w	r1, r3, #1
 80078d2:	f000 87ba 	beq.w	800884a <_svfprintf_r+0x146a>
 80078d6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80078da:	2809      	cmp	r0, #9
 80078dc:	460b      	mov	r3, r1
 80078de:	f04f 0a00 	mov.w	sl, #0
 80078e2:	f63f add3 	bhi.w	800748c <_svfprintf_r+0xac>
 80078e6:	f813 5b01 	ldrb.w	r5, [r3], #1
 80078ea:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 80078ee:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80078f2:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80078f6:	2809      	cmp	r0, #9
 80078f8:	d9f5      	bls.n	80078e6 <_svfprintf_r+0x506>
 80078fa:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 80078fe:	e5c5      	b.n	800748c <_svfprintf_r+0xac>
 8007900:	930a      	str	r3, [sp, #40]	; 0x28
 8007902:	9b07      	ldr	r3, [sp, #28]
 8007904:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007908:	069b      	lsls	r3, r3, #26
 800790a:	f140 80a1 	bpl.w	8007a50 <_svfprintf_r+0x670>
 800790e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007910:	f103 0907 	add.w	r9, r3, #7
 8007914:	f029 0907 	bic.w	r9, r9, #7
 8007918:	e9d9 2300 	ldrd	r2, r3, [r9]
 800791c:	f109 0108 	add.w	r1, r9, #8
 8007920:	910e      	str	r1, [sp, #56]	; 0x38
 8007922:	4690      	mov	r8, r2
 8007924:	4699      	mov	r9, r3
 8007926:	2a00      	cmp	r2, #0
 8007928:	f173 0300 	sbcs.w	r3, r3, #0
 800792c:	f2c0 840e 	blt.w	800814c <_svfprintf_r+0xd6c>
 8007930:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8007934:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007938:	2301      	movs	r3, #1
 800793a:	e63e      	b.n	80075ba <_svfprintf_r+0x1da>
 800793c:	930a      	str	r3, [sp, #40]	; 0x28
 800793e:	4b9b      	ldr	r3, [pc, #620]	; (8007bac <_svfprintf_r+0x7cc>)
 8007940:	9316      	str	r3, [sp, #88]	; 0x58
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007948:	069b      	lsls	r3, r3, #26
 800794a:	f140 80f3 	bpl.w	8007b34 <_svfprintf_r+0x754>
 800794e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007950:	f103 0907 	add.w	r9, r3, #7
 8007954:	f029 0307 	bic.w	r3, r9, #7
 8007958:	e9d3 8900 	ldrd	r8, r9, [r3]
 800795c:	f103 0208 	add.w	r2, r3, #8
 8007960:	920e      	str	r2, [sp, #56]	; 0x38
 8007962:	9b07      	ldr	r3, [sp, #28]
 8007964:	07d9      	lsls	r1, r3, #31
 8007966:	f140 80f5 	bpl.w	8007b54 <_svfprintf_r+0x774>
 800796a:	ea58 0309 	orrs.w	r3, r8, r9
 800796e:	f000 80f1 	beq.w	8007b54 <_svfprintf_r+0x774>
 8007972:	9a07      	ldr	r2, [sp, #28]
 8007974:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
 8007978:	2330      	movs	r3, #48	; 0x30
 800797a:	f042 0202 	orr.w	r2, r2, #2
 800797e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007982:	9207      	str	r2, [sp, #28]
 8007984:	2302      	movs	r3, #2
 8007986:	e612      	b.n	80075ae <_svfprintf_r+0x1ce>
 8007988:	781d      	ldrb	r5, [r3, #0]
 800798a:	4619      	mov	r1, r3
 800798c:	2a00      	cmp	r2, #0
 800798e:	f47f ad7c 	bne.w	800748a <_svfprintf_r+0xaa>
 8007992:	2220      	movs	r2, #32
 8007994:	e579      	b.n	800748a <_svfprintf_r+0xaa>
 8007996:	9907      	ldr	r1, [sp, #28]
 8007998:	f041 0120 	orr.w	r1, r1, #32
 800799c:	9107      	str	r1, [sp, #28]
 800799e:	781d      	ldrb	r5, [r3, #0]
 80079a0:	4619      	mov	r1, r3
 80079a2:	e572      	b.n	800748a <_svfprintf_r+0xaa>
 80079a4:	930a      	str	r3, [sp, #40]	; 0x28
 80079a6:	9b07      	ldr	r3, [sp, #28]
 80079a8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80079ac:	069a      	lsls	r2, r3, #26
 80079ae:	f140 84ae 	bpl.w	800830e <_svfprintf_r+0xf2e>
 80079b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079b6:	ea4f 79e1 	mov.w	r9, r1, asr #31
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	4608      	mov	r0, r1
 80079be:	4688      	mov	r8, r1
 80079c0:	3204      	adds	r2, #4
 80079c2:	4649      	mov	r1, r9
 80079c4:	920e      	str	r2, [sp, #56]	; 0x38
 80079c6:	e9c3 0100 	strd	r0, r1, [r3]
 80079ca:	e530      	b.n	800742e <_svfprintf_r+0x4e>
 80079cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ce:	930a      	str	r3, [sp, #40]	; 0x28
 80079d0:	6813      	ldr	r3, [r2, #0]
 80079d2:	9310      	str	r3, [sp, #64]	; 0x40
 80079d4:	f04f 0b00 	mov.w	fp, #0
 80079d8:	f88d b077 	strb.w	fp, [sp, #119]	; 0x77
 80079dc:	f102 0904 	add.w	r9, r2, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8648 	beq.w	8008676 <_svfprintf_r+0x1296>
 80079e6:	f1ba 0f00 	cmp.w	sl, #0
 80079ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80079ec:	f2c0 85f6 	blt.w	80085dc <_svfprintf_r+0x11fc>
 80079f0:	4659      	mov	r1, fp
 80079f2:	4652      	mov	r2, sl
 80079f4:	f002 f9ce 	bl	8009d94 <memchr>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f000 8679 	beq.w	80086f0 <_svfprintf_r+0x1310>
 80079fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a00:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007a04:	1ac3      	subs	r3, r0, r3
 8007a06:	930d      	str	r3, [sp, #52]	; 0x34
 8007a08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007a0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a10:	9309      	str	r3, [sp, #36]	; 0x24
 8007a12:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8007a16:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8007a1a:	e603      	b.n	8007624 <_svfprintf_r+0x244>
 8007a1c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8007a20:	2100      	movs	r1, #0
 8007a22:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007a26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007a2a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007a2e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8007a32:	2809      	cmp	r0, #9
 8007a34:	d9f5      	bls.n	8007a22 <_svfprintf_r+0x642>
 8007a36:	910c      	str	r1, [sp, #48]	; 0x30
 8007a38:	e528      	b.n	800748c <_svfprintf_r+0xac>
 8007a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a3c:	9b07      	ldr	r3, [sp, #28]
 8007a3e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007a42:	f043 0310 	orr.w	r3, r3, #16
 8007a46:	9307      	str	r3, [sp, #28]
 8007a48:	9b07      	ldr	r3, [sp, #28]
 8007a4a:	069b      	lsls	r3, r3, #26
 8007a4c:	f53f af5f 	bmi.w	800790e <_svfprintf_r+0x52e>
 8007a50:	9b07      	ldr	r3, [sp, #28]
 8007a52:	06d8      	lsls	r0, r3, #27
 8007a54:	f100 836b 	bmi.w	800812e <_svfprintf_r+0xd4e>
 8007a58:	9b07      	ldr	r3, [sp, #28]
 8007a5a:	0659      	lsls	r1, r3, #25
 8007a5c:	f140 8367 	bpl.w	800812e <_svfprintf_r+0xd4e>
 8007a60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a62:	f9b1 8000 	ldrsh.w	r8, [r1]
 8007a66:	3104      	adds	r1, #4
 8007a68:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	464b      	mov	r3, r9
 8007a70:	910e      	str	r1, [sp, #56]	; 0x38
 8007a72:	e758      	b.n	8007926 <_svfprintf_r+0x546>
 8007a74:	781d      	ldrb	r5, [r3, #0]
 8007a76:	9907      	ldr	r1, [sp, #28]
 8007a78:	2d6c      	cmp	r5, #108	; 0x6c
 8007a7a:	f000 84d1 	beq.w	8008420 <_svfprintf_r+0x1040>
 8007a7e:	f041 0110 	orr.w	r1, r1, #16
 8007a82:	9107      	str	r1, [sp, #28]
 8007a84:	4619      	mov	r1, r3
 8007a86:	e500      	b.n	800748a <_svfprintf_r+0xaa>
 8007a88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007a8a:	6829      	ldr	r1, [r5, #0]
 8007a8c:	910c      	str	r1, [sp, #48]	; 0x30
 8007a8e:	4608      	mov	r0, r1
 8007a90:	2800      	cmp	r0, #0
 8007a92:	4629      	mov	r1, r5
 8007a94:	f101 0104 	add.w	r1, r1, #4
 8007a98:	f2c0 84c9 	blt.w	800842e <_svfprintf_r+0x104e>
 8007a9c:	910e      	str	r1, [sp, #56]	; 0x38
 8007a9e:	781d      	ldrb	r5, [r3, #0]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	e4f2      	b.n	800748a <_svfprintf_r+0xaa>
 8007aa4:	9907      	ldr	r1, [sp, #28]
 8007aa6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007aaa:	9107      	str	r1, [sp, #28]
 8007aac:	781d      	ldrb	r5, [r3, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	e4eb      	b.n	800748a <_svfprintf_r+0xaa>
 8007ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab4:	9b07      	ldr	r3, [sp, #28]
 8007ab6:	f043 0310 	orr.w	r3, r3, #16
 8007aba:	9307      	str	r3, [sp, #28]
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	f013 0320 	ands.w	r3, r3, #32
 8007ac2:	f47f aef2 	bne.w	80078aa <_svfprintf_r+0x4ca>
 8007ac6:	9a07      	ldr	r2, [sp, #28]
 8007ac8:	f012 0210 	ands.w	r2, r2, #16
 8007acc:	f040 831c 	bne.w	8008108 <_svfprintf_r+0xd28>
 8007ad0:	9b07      	ldr	r3, [sp, #28]
 8007ad2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007ad6:	f000 8317 	beq.w	8008108 <_svfprintf_r+0xd28>
 8007ada:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007adc:	4613      	mov	r3, r2
 8007ade:	460a      	mov	r2, r1
 8007ae0:	3204      	adds	r2, #4
 8007ae2:	f8b1 8000 	ldrh.w	r8, [r1]
 8007ae6:	920e      	str	r2, [sp, #56]	; 0x38
 8007ae8:	f04f 0900 	mov.w	r9, #0
 8007aec:	e55f      	b.n	80075ae <_svfprintf_r+0x1ce>
 8007aee:	930a      	str	r3, [sp, #40]	; 0x28
 8007af0:	9b07      	ldr	r3, [sp, #28]
 8007af2:	f043 0310 	orr.w	r3, r3, #16
 8007af6:	9307      	str	r3, [sp, #28]
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	0698      	lsls	r0, r3, #26
 8007afc:	f53f ad4c 	bmi.w	8007598 <_svfprintf_r+0x1b8>
 8007b00:	9b07      	ldr	r3, [sp, #28]
 8007b02:	06d9      	lsls	r1, r3, #27
 8007b04:	f100 8309 	bmi.w	800811a <_svfprintf_r+0xd3a>
 8007b08:	9b07      	ldr	r3, [sp, #28]
 8007b0a:	065a      	lsls	r2, r3, #25
 8007b0c:	f140 8305 	bpl.w	800811a <_svfprintf_r+0xd3a>
 8007b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b12:	f8b2 8000 	ldrh.w	r8, [r2]
 8007b16:	3204      	adds	r2, #4
 8007b18:	f04f 0900 	mov.w	r9, #0
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	920e      	str	r2, [sp, #56]	; 0x38
 8007b20:	e545      	b.n	80075ae <_svfprintf_r+0x1ce>
 8007b22:	930a      	str	r3, [sp, #40]	; 0x28
 8007b24:	4b22      	ldr	r3, [pc, #136]	; (8007bb0 <_svfprintf_r+0x7d0>)
 8007b26:	9316      	str	r3, [sp, #88]	; 0x58
 8007b28:	9b07      	ldr	r3, [sp, #28]
 8007b2a:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007b2e:	069b      	lsls	r3, r3, #26
 8007b30:	f53f af0d 	bmi.w	800794e <_svfprintf_r+0x56e>
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	06d8      	lsls	r0, r3, #27
 8007b38:	f140 83da 	bpl.w	80082f0 <_svfprintf_r+0xf10>
 8007b3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b3e:	4613      	mov	r3, r2
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4698      	mov	r8, r3
 8007b44:	9b07      	ldr	r3, [sp, #28]
 8007b46:	3204      	adds	r2, #4
 8007b48:	07d9      	lsls	r1, r3, #31
 8007b4a:	920e      	str	r2, [sp, #56]	; 0x38
 8007b4c:	f04f 0900 	mov.w	r9, #0
 8007b50:	f53f af0b 	bmi.w	800796a <_svfprintf_r+0x58a>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e52a      	b.n	80075ae <_svfprintf_r+0x1ce>
 8007b58:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b5c:	680a      	ldr	r2, [r1, #0]
 8007b5e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 8007b62:	2300      	movs	r3, #0
 8007b64:	2201      	movs	r2, #1
 8007b66:	3104      	adds	r1, #4
 8007b68:	469c      	mov	ip, r3
 8007b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b6c:	910e      	str	r1, [sp, #56]	; 0x38
 8007b6e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8007b72:	ab28      	add	r3, sp, #160	; 0xa0
 8007b74:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8007b78:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8007b7c:	920d      	str	r2, [sp, #52]	; 0x34
 8007b7e:	9310      	str	r3, [sp, #64]	; 0x40
 8007b80:	e556      	b.n	8007630 <_svfprintf_r+0x250>
 8007b82:	9907      	ldr	r1, [sp, #28]
 8007b84:	f041 0108 	orr.w	r1, r1, #8
 8007b88:	9107      	str	r1, [sp, #28]
 8007b8a:	781d      	ldrb	r5, [r3, #0]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	e47c      	b.n	800748a <_svfprintf_r+0xaa>
 8007b90:	9907      	ldr	r1, [sp, #28]
 8007b92:	f041 0101 	orr.w	r1, r1, #1
 8007b96:	9107      	str	r1, [sp, #28]
 8007b98:	781d      	ldrb	r5, [r3, #0]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	e475      	b.n	800748a <_svfprintf_r+0xaa>
 8007b9e:	9907      	ldr	r1, [sp, #28]
 8007ba0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007ba4:	9107      	str	r1, [sp, #28]
 8007ba6:	781d      	ldrb	r5, [r3, #0]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	e46e      	b.n	800748a <_svfprintf_r+0xaa>
 8007bac:	0800b6ac 	.word	0x0800b6ac
 8007bb0:	0800b698 	.word	0x0800b698
 8007bb4:	0800b6cc 	.word	0x0800b6cc
 8007bb8:	0800b678 	.word	0x0800b678
 8007bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007bc4:	f013 0f08 	tst.w	r3, #8
 8007bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bca:	46d3      	mov	fp, sl
 8007bcc:	f103 0907 	add.w	r9, r3, #7
 8007bd0:	f000 8384 	beq.w	80082dc <_svfprintf_r+0xefc>
 8007bd4:	f029 0307 	bic.w	r3, r9, #7
 8007bd8:	ed93 7b00 	vldr	d7, [r3]
 8007bdc:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8007be0:	f103 0208 	add.w	r2, r3, #8
 8007be4:	920e      	str	r2, [sp, #56]	; 0x38
 8007be6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007bea:	f002 fc15 	bl	800a418 <__fpclassifyd>
 8007bee:	2801      	cmp	r0, #1
 8007bf0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007bf4:	f040 8358 	bne.w	80082a8 <_svfprintf_r+0xec8>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f003 f8dc 	bl	800adb8 <__aeabi_dcmplt>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f040 856d 	bne.w	80086e0 <_svfprintf_r+0x1300>
 8007c06:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8007c0a:	9b07      	ldr	r3, [sp, #28]
 8007c0c:	4abd      	ldr	r2, [pc, #756]	; (8007f04 <_svfprintf_r+0xb24>)
 8007c0e:	f8df e300 	ldr.w	lr, [pc, #768]	; 8007f10 <_svfprintf_r+0xb30>
 8007c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c16:	9307      	str	r3, [sp, #28]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	2103      	movs	r1, #3
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	2d47      	cmp	r5, #71	; 0x47
 8007c20:	bfd8      	it	le
 8007c22:	4673      	movle	r3, lr
 8007c24:	9109      	str	r1, [sp, #36]	; 0x24
 8007c26:	9011      	str	r0, [sp, #68]	; 0x44
 8007c28:	9310      	str	r3, [sp, #64]	; 0x40
 8007c2a:	910d      	str	r1, [sp, #52]	; 0x34
 8007c2c:	9012      	str	r0, [sp, #72]	; 0x48
 8007c2e:	e4f9      	b.n	8007624 <_svfprintf_r+0x244>
 8007c30:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007c32:	9907      	ldr	r1, [sp, #28]
 8007c34:	930a      	str	r3, [sp, #40]	; 0x28
 8007c36:	2230      	movs	r2, #48	; 0x30
 8007c38:	6803      	ldr	r3, [r0, #0]
 8007c3a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007c3e:	4602      	mov	r2, r0
 8007c40:	2578      	movs	r5, #120	; 0x78
 8007c42:	f041 0102 	orr.w	r1, r1, #2
 8007c46:	3204      	adds	r2, #4
 8007c48:	4698      	mov	r8, r3
 8007c4a:	4baf      	ldr	r3, [pc, #700]	; (8007f08 <_svfprintf_r+0xb28>)
 8007c4c:	9316      	str	r3, [sp, #88]	; 0x58
 8007c4e:	9107      	str	r1, [sp, #28]
 8007c50:	920e      	str	r2, [sp, #56]	; 0x38
 8007c52:	f04f 0900 	mov.w	r9, #0
 8007c56:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	e4a7      	b.n	80075ae <_svfprintf_r+0x1ce>
 8007c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c60:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	f000 83cf 	beq.w	8008408 <_svfprintf_r+0x1028>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	469c      	mov	ip, r3
 8007c70:	9209      	str	r2, [sp, #36]	; 0x24
 8007c72:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
 8007c76:	e77a      	b.n	8007b6e <_svfprintf_r+0x78e>
 8007c78:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007c7c:	e535      	b.n	80076ea <_svfprintf_r+0x30a>
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	f47f acad 	bne.w	80075de <_svfprintf_r+0x1fe>
 8007c84:	f1b9 0f00 	cmp.w	r9, #0
 8007c88:	bf08      	it	eq
 8007c8a:	f1b8 0f0a 	cmpeq.w	r8, #10
 8007c8e:	f080 820d 	bcs.w	80080ac <_svfprintf_r+0xccc>
 8007c92:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
 8007c96:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007c9a:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 8007c9e:	ebcb 0307 	rsb	r3, fp, r7
 8007ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca4:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8007ca8:	e4b4      	b.n	8007614 <_svfprintf_r+0x234>
 8007caa:	2d65      	cmp	r5, #101	; 0x65
 8007cac:	f340 80a0 	ble.w	8007df0 <_svfprintf_r+0xa10>
 8007cb0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f003 f874 	bl	800ada4 <__aeabi_dcmpeq>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f000 8144 	beq.w	8007f4a <_svfprintf_r+0xb6a>
 8007cc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cc4:	4a91      	ldr	r2, [pc, #580]	; (8007f0c <_svfprintf_r+0xb2c>)
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f10b 0b01 	add.w	fp, fp, #1
 8007cce:	2201      	movs	r2, #1
 8007cd0:	2b07      	cmp	r3, #7
 8007cd2:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007cd6:	9326      	str	r3, [sp, #152]	; 0x98
 8007cd8:	6062      	str	r2, [r4, #4]
 8007cda:	f300 833d 	bgt.w	8008358 <_svfprintf_r+0xf78>
 8007cde:	3408      	adds	r4, #8
 8007ce0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	db03      	blt.n	8007cf0 <_svfprintf_r+0x910>
 8007ce8:	9b07      	ldr	r3, [sp, #28]
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	f57f ad7b 	bpl.w	80077e6 <_svfprintf_r+0x406>
 8007cf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cf6:	6022      	str	r2, [r4, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	448b      	add	fp, r1
 8007cfc:	2b07      	cmp	r3, #7
 8007cfe:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007d02:	6061      	str	r1, [r4, #4]
 8007d04:	9326      	str	r3, [sp, #152]	; 0x98
 8007d06:	f300 8399 	bgt.w	800843c <_svfprintf_r+0x105c>
 8007d0a:	3408      	adds	r4, #8
 8007d0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d0e:	1e5d      	subs	r5, r3, #1
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	f77f ad68 	ble.w	80077e6 <_svfprintf_r+0x406>
 8007d16:	2d10      	cmp	r5, #16
 8007d18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d1a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007f14 <_svfprintf_r+0xb34>
 8007d1e:	f340 81b9 	ble.w	8008094 <_svfprintf_r+0xcb4>
 8007d22:	f04f 0810 	mov.w	r8, #16
 8007d26:	465a      	mov	r2, fp
 8007d28:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d2c:	e004      	b.n	8007d38 <_svfprintf_r+0x958>
 8007d2e:	3408      	adds	r4, #8
 8007d30:	3d10      	subs	r5, #16
 8007d32:	2d10      	cmp	r5, #16
 8007d34:	f340 81ad 	ble.w	8008092 <_svfprintf_r+0xcb2>
 8007d38:	3301      	adds	r3, #1
 8007d3a:	3210      	adds	r2, #16
 8007d3c:	2b07      	cmp	r3, #7
 8007d3e:	9227      	str	r2, [sp, #156]	; 0x9c
 8007d40:	9326      	str	r3, [sp, #152]	; 0x98
 8007d42:	f8c4 9000 	str.w	r9, [r4]
 8007d46:	f8c4 8004 	str.w	r8, [r4, #4]
 8007d4a:	ddf0      	ble.n	8007d2e <_svfprintf_r+0x94e>
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	4631      	mov	r1, r6
 8007d50:	aa25      	add	r2, sp, #148	; 0x94
 8007d52:	f002 fb9f 	bl	800a494 <__ssprint_r>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f47f ac0a 	bne.w	8007570 <_svfprintf_r+0x190>
 8007d5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007d5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d60:	463c      	mov	r4, r7
 8007d62:	e7e5      	b.n	8007d30 <_svfprintf_r+0x950>
 8007d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d68:	ebc2 0a03 	rsb	sl, r2, r3
 8007d6c:	f1ba 0f00 	cmp.w	sl, #0
 8007d70:	f77f ace3 	ble.w	800773a <_svfprintf_r+0x35a>
 8007d74:	f1ba 0f10 	cmp.w	sl, #16
 8007d78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d7a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8007f14 <_svfprintf_r+0xb34>
 8007d7e:	dd2b      	ble.n	8007dd8 <_svfprintf_r+0x9f8>
 8007d80:	4649      	mov	r1, r9
 8007d82:	465b      	mov	r3, fp
 8007d84:	46a9      	mov	r9, r5
 8007d86:	f04f 0810 	mov.w	r8, #16
 8007d8a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007d8e:	460d      	mov	r5, r1
 8007d90:	e006      	b.n	8007da0 <_svfprintf_r+0x9c0>
 8007d92:	f1aa 0a10 	sub.w	sl, sl, #16
 8007d96:	f1ba 0f10 	cmp.w	sl, #16
 8007d9a:	f104 0408 	add.w	r4, r4, #8
 8007d9e:	dd17      	ble.n	8007dd0 <_svfprintf_r+0x9f0>
 8007da0:	3201      	adds	r2, #1
 8007da2:	3310      	adds	r3, #16
 8007da4:	2a07      	cmp	r2, #7
 8007da6:	9327      	str	r3, [sp, #156]	; 0x9c
 8007da8:	9226      	str	r2, [sp, #152]	; 0x98
 8007daa:	e884 0120 	stmia.w	r4, {r5, r8}
 8007dae:	ddf0      	ble.n	8007d92 <_svfprintf_r+0x9b2>
 8007db0:	4658      	mov	r0, fp
 8007db2:	4631      	mov	r1, r6
 8007db4:	aa25      	add	r2, sp, #148	; 0x94
 8007db6:	f002 fb6d 	bl	800a494 <__ssprint_r>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	f47f abd8 	bne.w	8007570 <_svfprintf_r+0x190>
 8007dc0:	f1aa 0a10 	sub.w	sl, sl, #16
 8007dc4:	f1ba 0f10 	cmp.w	sl, #16
 8007dc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007dca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007dcc:	463c      	mov	r4, r7
 8007dce:	dce7      	bgt.n	8007da0 <_svfprintf_r+0x9c0>
 8007dd0:	469b      	mov	fp, r3
 8007dd2:	462b      	mov	r3, r5
 8007dd4:	464d      	mov	r5, r9
 8007dd6:	4699      	mov	r9, r3
 8007dd8:	3201      	adds	r2, #1
 8007dda:	44d3      	add	fp, sl
 8007ddc:	2a07      	cmp	r2, #7
 8007dde:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007de2:	9226      	str	r2, [sp, #152]	; 0x98
 8007de4:	e884 0600 	stmia.w	r4, {r9, sl}
 8007de8:	f300 8251 	bgt.w	800828e <_svfprintf_r+0xeae>
 8007dec:	3408      	adds	r4, #8
 8007dee:	e4a4      	b.n	800773a <_svfprintf_r+0x35a>
 8007df0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007df2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	f340 821f 	ble.w	8008238 <_svfprintf_r+0xe58>
 8007dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	3501      	adds	r5, #1
 8007e00:	f10b 0301 	add.w	r3, fp, #1
 8007e04:	2201      	movs	r2, #1
 8007e06:	2d07      	cmp	r5, #7
 8007e08:	9327      	str	r3, [sp, #156]	; 0x9c
 8007e0a:	9526      	str	r5, [sp, #152]	; 0x98
 8007e0c:	6062      	str	r2, [r4, #4]
 8007e0e:	f300 8225 	bgt.w	800825c <_svfprintf_r+0xe7c>
 8007e12:	3408      	adds	r4, #8
 8007e14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e16:	6061      	str	r1, [r4, #4]
 8007e18:	3501      	adds	r5, #1
 8007e1a:	eb03 0b01 	add.w	fp, r3, r1
 8007e1e:	2d07      	cmp	r5, #7
 8007e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e22:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007e26:	9526      	str	r5, [sp, #152]	; 0x98
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	f300 8223 	bgt.w	8008274 <_svfprintf_r+0xe94>
 8007e2e:	3408      	adds	r4, #8
 8007e30:	2300      	movs	r3, #0
 8007e32:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007e36:	2200      	movs	r2, #0
 8007e38:	f002 ffb4 	bl	800ada4 <__aeabi_dcmpeq>
 8007e3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f040 80dd 	bne.w	8007ffe <_svfprintf_r+0xc1e>
 8007e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e46:	3b01      	subs	r3, #1
 8007e48:	3501      	adds	r5, #1
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	449b      	add	fp, r3
 8007e4e:	2d07      	cmp	r5, #7
 8007e50:	9526      	str	r5, [sp, #152]	; 0x98
 8007e52:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	6063      	str	r3, [r4, #4]
 8007e5a:	f300 810d 	bgt.w	8008078 <_svfprintf_r+0xc98>
 8007e5e:	3408      	adds	r4, #8
 8007e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e62:	6062      	str	r2, [r4, #4]
 8007e64:	3501      	adds	r5, #1
 8007e66:	4493      	add	fp, r2
 8007e68:	ab21      	add	r3, sp, #132	; 0x84
 8007e6a:	2d07      	cmp	r5, #7
 8007e6c:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007e70:	9526      	str	r5, [sp, #152]	; 0x98
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	f77f acb6 	ble.w	80077e4 <_svfprintf_r+0x404>
 8007e78:	9808      	ldr	r0, [sp, #32]
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	aa25      	add	r2, sp, #148	; 0x94
 8007e7e:	f002 fb09 	bl	800a494 <__ssprint_r>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	f47f ab74 	bne.w	8007570 <_svfprintf_r+0x190>
 8007e88:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007e8c:	463c      	mov	r4, r7
 8007e8e:	e4aa      	b.n	80077e6 <_svfprintf_r+0x406>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d132      	bne.n	8007efa <_svfprintf_r+0xb1a>
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	07d8      	lsls	r0, r3, #31
 8007e98:	d52f      	bpl.n	8007efa <_svfprintf_r+0xb1a>
 8007e9a:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
 8007e9e:	2330      	movs	r3, #48	; 0x30
 8007ea0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8007ea4:	ebcb 0307 	rsb	r3, fp, r7
 8007ea8:	930d      	str	r3, [sp, #52]	; 0x34
 8007eaa:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8007eae:	f7ff bbb1 	b.w	8007614 <_svfprintf_r+0x234>
 8007eb2:	9808      	ldr	r0, [sp, #32]
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	aa25      	add	r2, sp, #148	; 0x94
 8007eb8:	f002 faec 	bl	800a494 <__ssprint_r>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f47f ab57 	bne.w	8007570 <_svfprintf_r+0x190>
 8007ec2:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007ec6:	463c      	mov	r4, r7
 8007ec8:	e47b      	b.n	80077c2 <_svfprintf_r+0x3e2>
 8007eca:	9808      	ldr	r0, [sp, #32]
 8007ecc:	4631      	mov	r1, r6
 8007ece:	aa25      	add	r2, sp, #148	; 0x94
 8007ed0:	f002 fae0 	bl	800a494 <__ssprint_r>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f47f ab4b 	bne.w	8007570 <_svfprintf_r+0x190>
 8007eda:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007ede:	463c      	mov	r4, r7
 8007ee0:	e427      	b.n	8007732 <_svfprintf_r+0x352>
 8007ee2:	9808      	ldr	r0, [sp, #32]
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	aa25      	add	r2, sp, #148	; 0x94
 8007ee8:	f002 fad4 	bl	800a494 <__ssprint_r>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	f47f ab3f 	bne.w	8007570 <_svfprintf_r+0x190>
 8007ef2:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007ef6:	463c      	mov	r4, r7
 8007ef8:	e40a      	b.n	8007710 <_svfprintf_r+0x330>
 8007efa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007efe:	9710      	str	r7, [sp, #64]	; 0x40
 8007f00:	f7ff bb88 	b.w	8007614 <_svfprintf_r+0x234>
 8007f04:	0800b68c 	.word	0x0800b68c
 8007f08:	0800b6ac 	.word	0x0800b6ac
 8007f0c:	0800b6c8 	.word	0x0800b6c8
 8007f10:	0800b688 	.word	0x0800b688
 8007f14:	0800b6cc 	.word	0x0800b6cc
 8007f18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007f1a:	46bb      	mov	fp, r7
 8007f1c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8007f20:	f008 010f 	and.w	r1, r8, #15
 8007f24:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 8007f28:	ea4f 1219 	mov.w	r2, r9, lsr #4
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	4691      	mov	r9, r2
 8007f30:	5c43      	ldrb	r3, [r0, r1]
 8007f32:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8007f36:	ea58 0309 	orrs.w	r3, r8, r9
 8007f3a:	d1ef      	bne.n	8007f1c <_svfprintf_r+0xb3c>
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8007f42:	1afb      	subs	r3, r7, r3
 8007f44:	930d      	str	r3, [sp, #52]	; 0x34
 8007f46:	f7ff bb65 	b.w	8007614 <_svfprintf_r+0x234>
 8007f4a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8007f4c:	2d00      	cmp	r5, #0
 8007f4e:	f340 820f 	ble.w	8008370 <_svfprintf_r+0xf90>
 8007f52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007f56:	428a      	cmp	r2, r1
 8007f58:	4613      	mov	r3, r2
 8007f5a:	bfa8      	it	ge
 8007f5c:	460b      	movge	r3, r1
 8007f5e:	461d      	mov	r5, r3
 8007f60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007f62:	2d00      	cmp	r5, #0
 8007f64:	eb01 0a02 	add.w	sl, r1, r2
 8007f68:	dd0b      	ble.n	8007f82 <_svfprintf_r+0xba2>
 8007f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f6c:	6021      	str	r1, [r4, #0]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	44ab      	add	fp, r5
 8007f72:	2b07      	cmp	r3, #7
 8007f74:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8007f78:	6065      	str	r5, [r4, #4]
 8007f7a:	9326      	str	r3, [sp, #152]	; 0x98
 8007f7c:	f300 8357 	bgt.w	800862e <_svfprintf_r+0x124e>
 8007f80:	3408      	adds	r4, #8
 8007f82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f84:	2d00      	cmp	r5, #0
 8007f86:	bfa8      	it	ge
 8007f88:	1b5b      	subge	r3, r3, r5
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	461d      	mov	r5, r3
 8007f8e:	f340 80f5 	ble.w	800817c <_svfprintf_r+0xd9c>
 8007f92:	2d10      	cmp	r5, #16
 8007f94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f96:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 80085a0 <_svfprintf_r+0x11c0>
 8007f9a:	f340 81d0 	ble.w	800833e <_svfprintf_r+0xf5e>
 8007f9e:	465a      	mov	r2, fp
 8007fa0:	f04f 0810 	mov.w	r8, #16
 8007fa4:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007fa8:	e004      	b.n	8007fb4 <_svfprintf_r+0xbd4>
 8007faa:	3408      	adds	r4, #8
 8007fac:	3d10      	subs	r5, #16
 8007fae:	2d10      	cmp	r5, #16
 8007fb0:	f340 81c4 	ble.w	800833c <_svfprintf_r+0xf5c>
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	3210      	adds	r2, #16
 8007fb8:	2b07      	cmp	r3, #7
 8007fba:	9227      	str	r2, [sp, #156]	; 0x9c
 8007fbc:	9326      	str	r3, [sp, #152]	; 0x98
 8007fbe:	f8c4 9000 	str.w	r9, [r4]
 8007fc2:	f8c4 8004 	str.w	r8, [r4, #4]
 8007fc6:	ddf0      	ble.n	8007faa <_svfprintf_r+0xbca>
 8007fc8:	4658      	mov	r0, fp
 8007fca:	4631      	mov	r1, r6
 8007fcc:	aa25      	add	r2, sp, #148	; 0x94
 8007fce:	f002 fa61 	bl	800a494 <__ssprint_r>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	f47f aacc 	bne.w	8007570 <_svfprintf_r+0x190>
 8007fd8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007fda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fdc:	463c      	mov	r4, r7
 8007fde:	e7e5      	b.n	8007fac <_svfprintf_r+0xbcc>
 8007fe0:	9808      	ldr	r0, [sp, #32]
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	aa25      	add	r2, sp, #148	; 0x94
 8007fe6:	f002 fa55 	bl	800a494 <__ssprint_r>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f47f aac0 	bne.w	8007570 <_svfprintf_r+0x190>
 8007ff0:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8007ff4:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007ff8:	463c      	mov	r4, r7
 8007ffa:	f7ff bb76 	b.w	80076ea <_svfprintf_r+0x30a>
 8007ffe:	f103 38ff 	add.w	r8, r3, #4294967295
 8008002:	f1b8 0f00 	cmp.w	r8, #0
 8008006:	f77f af2b 	ble.w	8007e60 <_svfprintf_r+0xa80>
 800800a:	f1b8 0f10 	cmp.w	r8, #16
 800800e:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 80085a0 <_svfprintf_r+0x11c0>
 8008012:	dd25      	ble.n	8008060 <_svfprintf_r+0xc80>
 8008014:	465b      	mov	r3, fp
 8008016:	f04f 0a10 	mov.w	sl, #16
 800801a:	f8dd b020 	ldr.w	fp, [sp, #32]
 800801e:	e006      	b.n	800802e <_svfprintf_r+0xc4e>
 8008020:	f1a8 0810 	sub.w	r8, r8, #16
 8008024:	f1b8 0f10 	cmp.w	r8, #16
 8008028:	f104 0408 	add.w	r4, r4, #8
 800802c:	dd17      	ble.n	800805e <_svfprintf_r+0xc7e>
 800802e:	3501      	adds	r5, #1
 8008030:	3310      	adds	r3, #16
 8008032:	2d07      	cmp	r5, #7
 8008034:	9327      	str	r3, [sp, #156]	; 0x9c
 8008036:	9526      	str	r5, [sp, #152]	; 0x98
 8008038:	e884 0600 	stmia.w	r4, {r9, sl}
 800803c:	ddf0      	ble.n	8008020 <_svfprintf_r+0xc40>
 800803e:	4658      	mov	r0, fp
 8008040:	4631      	mov	r1, r6
 8008042:	aa25      	add	r2, sp, #148	; 0x94
 8008044:	f002 fa26 	bl	800a494 <__ssprint_r>
 8008048:	2800      	cmp	r0, #0
 800804a:	f47f aa91 	bne.w	8007570 <_svfprintf_r+0x190>
 800804e:	f1a8 0810 	sub.w	r8, r8, #16
 8008052:	f1b8 0f10 	cmp.w	r8, #16
 8008056:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008058:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800805a:	463c      	mov	r4, r7
 800805c:	dce7      	bgt.n	800802e <_svfprintf_r+0xc4e>
 800805e:	469b      	mov	fp, r3
 8008060:	3501      	adds	r5, #1
 8008062:	44c3      	add	fp, r8
 8008064:	2d07      	cmp	r5, #7
 8008066:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800806a:	9526      	str	r5, [sp, #152]	; 0x98
 800806c:	f8c4 9000 	str.w	r9, [r4]
 8008070:	f8c4 8004 	str.w	r8, [r4, #4]
 8008074:	f77f aef3 	ble.w	8007e5e <_svfprintf_r+0xa7e>
 8008078:	9808      	ldr	r0, [sp, #32]
 800807a:	4631      	mov	r1, r6
 800807c:	aa25      	add	r2, sp, #148	; 0x94
 800807e:	f002 fa09 	bl	800a494 <__ssprint_r>
 8008082:	2800      	cmp	r0, #0
 8008084:	f47f aa74 	bne.w	8007570 <_svfprintf_r+0x190>
 8008088:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800808c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800808e:	463c      	mov	r4, r7
 8008090:	e6e6      	b.n	8007e60 <_svfprintf_r+0xa80>
 8008092:	4693      	mov	fp, r2
 8008094:	3301      	adds	r3, #1
 8008096:	44ab      	add	fp, r5
 8008098:	2b07      	cmp	r3, #7
 800809a:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800809e:	9326      	str	r3, [sp, #152]	; 0x98
 80080a0:	f8c4 9000 	str.w	r9, [r4]
 80080a4:	6065      	str	r5, [r4, #4]
 80080a6:	f77f ab9d 	ble.w	80077e4 <_svfprintf_r+0x404>
 80080aa:	e6e5      	b.n	8007e78 <_svfprintf_r+0xa98>
 80080ac:	46bb      	mov	fp, r7
 80080ae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80080b2:	4640      	mov	r0, r8
 80080b4:	4649      	mov	r1, r9
 80080b6:	220a      	movs	r2, #10
 80080b8:	2300      	movs	r3, #0
 80080ba:	f002 fecd 	bl	800ae58 <__aeabi_uldivmod>
 80080be:	3230      	adds	r2, #48	; 0x30
 80080c0:	4640      	mov	r0, r8
 80080c2:	4649      	mov	r1, r9
 80080c4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80080c8:	2300      	movs	r3, #0
 80080ca:	220a      	movs	r2, #10
 80080cc:	f002 fec4 	bl	800ae58 <__aeabi_uldivmod>
 80080d0:	4680      	mov	r8, r0
 80080d2:	4689      	mov	r9, r1
 80080d4:	ea58 0309 	orrs.w	r3, r8, r9
 80080d8:	d1eb      	bne.n	80080b2 <_svfprintf_r+0xcd2>
 80080da:	465b      	mov	r3, fp
 80080dc:	1afb      	subs	r3, r7, r3
 80080de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80080e2:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80080e6:	930d      	str	r3, [sp, #52]	; 0x34
 80080e8:	f7ff ba94 	b.w	8007614 <_svfprintf_r+0x234>
 80080ec:	2b30      	cmp	r3, #48	; 0x30
 80080ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080f0:	f43f af27 	beq.w	8007f42 <_svfprintf_r+0xb62>
 80080f4:	3b01      	subs	r3, #1
 80080f6:	461a      	mov	r2, r3
 80080f8:	9310      	str	r3, [sp, #64]	; 0x40
 80080fa:	1aba      	subs	r2, r7, r2
 80080fc:	2330      	movs	r3, #48	; 0x30
 80080fe:	920d      	str	r2, [sp, #52]	; 0x34
 8008100:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008104:	f7ff ba86 	b.w	8007614 <_svfprintf_r+0x234>
 8008108:	990e      	ldr	r1, [sp, #56]	; 0x38
 800810a:	680a      	ldr	r2, [r1, #0]
 800810c:	3104      	adds	r1, #4
 800810e:	910e      	str	r1, [sp, #56]	; 0x38
 8008110:	4690      	mov	r8, r2
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	f7ff ba4a 	b.w	80075ae <_svfprintf_r+0x1ce>
 800811a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800811c:	680a      	ldr	r2, [r1, #0]
 800811e:	3104      	adds	r1, #4
 8008120:	2301      	movs	r3, #1
 8008122:	910e      	str	r1, [sp, #56]	; 0x38
 8008124:	4690      	mov	r8, r2
 8008126:	f04f 0900 	mov.w	r9, #0
 800812a:	f7ff ba40 	b.w	80075ae <_svfprintf_r+0x1ce>
 800812e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008130:	6813      	ldr	r3, [r2, #0]
 8008132:	4698      	mov	r8, r3
 8008134:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8008138:	4613      	mov	r3, r2
 800813a:	3304      	adds	r3, #4
 800813c:	4642      	mov	r2, r8
 800813e:	930e      	str	r3, [sp, #56]	; 0x38
 8008140:	2a00      	cmp	r2, #0
 8008142:	464b      	mov	r3, r9
 8008144:	f173 0300 	sbcs.w	r3, r3, #0
 8008148:	f6bf abf2 	bge.w	8007930 <_svfprintf_r+0x550>
 800814c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8008150:	f1d8 0800 	rsbs	r8, r8, #0
 8008154:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8008158:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 800815c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8008160:	2301      	movs	r3, #1
 8008162:	f7ff ba2a 	b.w	80075ba <_svfprintf_r+0x1da>
 8008166:	9808      	ldr	r0, [sp, #32]
 8008168:	4631      	mov	r1, r6
 800816a:	aa25      	add	r2, sp, #148	; 0x94
 800816c:	f002 f992 	bl	800a494 <__ssprint_r>
 8008170:	2800      	cmp	r0, #0
 8008172:	f47f a9fd 	bne.w	8007570 <_svfprintf_r+0x190>
 8008176:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800817a:	463c      	mov	r4, r7
 800817c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800817e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008180:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008182:	440a      	add	r2, r1
 8008184:	4690      	mov	r8, r2
 8008186:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008188:	4293      	cmp	r3, r2
 800818a:	db46      	blt.n	800821a <_svfprintf_r+0xe3a>
 800818c:	9a07      	ldr	r2, [sp, #28]
 800818e:	07d0      	lsls	r0, r2, #31
 8008190:	d443      	bmi.n	800821a <_svfprintf_r+0xe3a>
 8008192:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008194:	ebc8 050a 	rsb	r5, r8, sl
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	429d      	cmp	r5, r3
 800819c:	bfa8      	it	ge
 800819e:	461d      	movge	r5, r3
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	dd0c      	ble.n	80081be <_svfprintf_r+0xdde>
 80081a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081a6:	f8c4 8000 	str.w	r8, [r4]
 80081aa:	3201      	adds	r2, #1
 80081ac:	44ab      	add	fp, r5
 80081ae:	2a07      	cmp	r2, #7
 80081b0:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80081b4:	6065      	str	r5, [r4, #4]
 80081b6:	9226      	str	r2, [sp, #152]	; 0x98
 80081b8:	f300 8271 	bgt.w	800869e <_svfprintf_r+0x12be>
 80081bc:	3408      	adds	r4, #8
 80081be:	2d00      	cmp	r5, #0
 80081c0:	bfac      	ite	ge
 80081c2:	1b5d      	subge	r5, r3, r5
 80081c4:	461d      	movlt	r5, r3
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	f77f ab0d 	ble.w	80077e6 <_svfprintf_r+0x406>
 80081cc:	2d10      	cmp	r5, #16
 80081ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081d0:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 80085a0 <_svfprintf_r+0x11c0>
 80081d4:	f77f af5e 	ble.w	8008094 <_svfprintf_r+0xcb4>
 80081d8:	f04f 0810 	mov.w	r8, #16
 80081dc:	465a      	mov	r2, fp
 80081de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80081e2:	e004      	b.n	80081ee <_svfprintf_r+0xe0e>
 80081e4:	3408      	adds	r4, #8
 80081e6:	3d10      	subs	r5, #16
 80081e8:	2d10      	cmp	r5, #16
 80081ea:	f77f af52 	ble.w	8008092 <_svfprintf_r+0xcb2>
 80081ee:	3301      	adds	r3, #1
 80081f0:	3210      	adds	r2, #16
 80081f2:	2b07      	cmp	r3, #7
 80081f4:	9227      	str	r2, [sp, #156]	; 0x9c
 80081f6:	9326      	str	r3, [sp, #152]	; 0x98
 80081f8:	f8c4 9000 	str.w	r9, [r4]
 80081fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8008200:	ddf0      	ble.n	80081e4 <_svfprintf_r+0xe04>
 8008202:	4650      	mov	r0, sl
 8008204:	4631      	mov	r1, r6
 8008206:	aa25      	add	r2, sp, #148	; 0x94
 8008208:	f002 f944 	bl	800a494 <__ssprint_r>
 800820c:	2800      	cmp	r0, #0
 800820e:	f47f a9af 	bne.w	8007570 <_svfprintf_r+0x190>
 8008212:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008214:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008216:	463c      	mov	r4, r7
 8008218:	e7e5      	b.n	80081e6 <_svfprintf_r+0xe06>
 800821a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800821c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800821e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008220:	6021      	str	r1, [r4, #0]
 8008222:	3201      	adds	r2, #1
 8008224:	4483      	add	fp, r0
 8008226:	2a07      	cmp	r2, #7
 8008228:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800822c:	6060      	str	r0, [r4, #4]
 800822e:	9226      	str	r2, [sp, #152]	; 0x98
 8008230:	f300 8209 	bgt.w	8008646 <_svfprintf_r+0x1266>
 8008234:	3408      	adds	r4, #8
 8008236:	e7ac      	b.n	8008192 <_svfprintf_r+0xdb2>
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	f53f addd 	bmi.w	8007dfa <_svfprintf_r+0xa1a>
 8008240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	3501      	adds	r5, #1
 8008246:	f10b 0b01 	add.w	fp, fp, #1
 800824a:	2301      	movs	r3, #1
 800824c:	2d07      	cmp	r5, #7
 800824e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8008252:	9526      	str	r5, [sp, #152]	; 0x98
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	f77f ae02 	ble.w	8007e5e <_svfprintf_r+0xa7e>
 800825a:	e70d      	b.n	8008078 <_svfprintf_r+0xc98>
 800825c:	9808      	ldr	r0, [sp, #32]
 800825e:	4631      	mov	r1, r6
 8008260:	aa25      	add	r2, sp, #148	; 0x94
 8008262:	f002 f917 	bl	800a494 <__ssprint_r>
 8008266:	2800      	cmp	r0, #0
 8008268:	f47f a982 	bne.w	8007570 <_svfprintf_r+0x190>
 800826c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800826e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008270:	463c      	mov	r4, r7
 8008272:	e5cf      	b.n	8007e14 <_svfprintf_r+0xa34>
 8008274:	9808      	ldr	r0, [sp, #32]
 8008276:	4631      	mov	r1, r6
 8008278:	aa25      	add	r2, sp, #148	; 0x94
 800827a:	f002 f90b 	bl	800a494 <__ssprint_r>
 800827e:	2800      	cmp	r0, #0
 8008280:	f47f a976 	bne.w	8007570 <_svfprintf_r+0x190>
 8008284:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8008288:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800828a:	463c      	mov	r4, r7
 800828c:	e5d0      	b.n	8007e30 <_svfprintf_r+0xa50>
 800828e:	9808      	ldr	r0, [sp, #32]
 8008290:	4631      	mov	r1, r6
 8008292:	aa25      	add	r2, sp, #148	; 0x94
 8008294:	f002 f8fe 	bl	800a494 <__ssprint_r>
 8008298:	2800      	cmp	r0, #0
 800829a:	f47f a969 	bne.w	8007570 <_svfprintf_r+0x190>
 800829e:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80082a2:	463c      	mov	r4, r7
 80082a4:	f7ff ba49 	b.w	800773a <_svfprintf_r+0x35a>
 80082a8:	f002 f8b6 	bl	800a418 <__fpclassifyd>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f040 80d1 	bne.w	8008454 <_svfprintf_r+0x1074>
 80082b2:	4686      	mov	lr, r0
 80082b4:	4ab7      	ldr	r2, [pc, #732]	; (8008594 <_svfprintf_r+0x11b4>)
 80082b6:	4bb8      	ldr	r3, [pc, #736]	; (8008598 <_svfprintf_r+0x11b8>)
 80082b8:	9011      	str	r0, [sp, #68]	; 0x44
 80082ba:	9807      	ldr	r0, [sp, #28]
 80082bc:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 80082c0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80082c4:	2103      	movs	r1, #3
 80082c6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80082ca:	2d47      	cmp	r5, #71	; 0x47
 80082cc:	bfd8      	it	le
 80082ce:	461a      	movle	r2, r3
 80082d0:	9109      	str	r1, [sp, #36]	; 0x24
 80082d2:	9007      	str	r0, [sp, #28]
 80082d4:	9210      	str	r2, [sp, #64]	; 0x40
 80082d6:	910d      	str	r1, [sp, #52]	; 0x34
 80082d8:	f7ff b9a4 	b.w	8007624 <_svfprintf_r+0x244>
 80082dc:	f029 0907 	bic.w	r9, r9, #7
 80082e0:	ed99 7b00 	vldr	d7, [r9]
 80082e4:	f109 0308 	add.w	r3, r9, #8
 80082e8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80082ec:	930e      	str	r3, [sp, #56]	; 0x38
 80082ee:	e47a      	b.n	8007be6 <_svfprintf_r+0x806>
 80082f0:	9b07      	ldr	r3, [sp, #28]
 80082f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80082f8:	4613      	mov	r3, r2
 80082fa:	f43f ac21 	beq.w	8007b40 <_svfprintf_r+0x760>
 80082fe:	3304      	adds	r3, #4
 8008300:	f8b2 8000 	ldrh.w	r8, [r2]
 8008304:	930e      	str	r3, [sp, #56]	; 0x38
 8008306:	f04f 0900 	mov.w	r9, #0
 800830a:	f7ff bb2a 	b.w	8007962 <_svfprintf_r+0x582>
 800830e:	9b07      	ldr	r3, [sp, #28]
 8008310:	06db      	lsls	r3, r3, #27
 8008312:	d40b      	bmi.n	800832c <_svfprintf_r+0xf4c>
 8008314:	9b07      	ldr	r3, [sp, #28]
 8008316:	065d      	lsls	r5, r3, #25
 8008318:	d508      	bpl.n	800832c <_svfprintf_r+0xf4c>
 800831a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	3204      	adds	r2, #4
 8008320:	920e      	str	r2, [sp, #56]	; 0x38
 8008322:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	f7ff b881 	b.w	800742e <_svfprintf_r+0x4e>
 800832c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800832e:	6813      	ldr	r3, [r2, #0]
 8008330:	3204      	adds	r2, #4
 8008332:	920e      	str	r2, [sp, #56]	; 0x38
 8008334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f7ff b879 	b.w	800742e <_svfprintf_r+0x4e>
 800833c:	4693      	mov	fp, r2
 800833e:	3301      	adds	r3, #1
 8008340:	44ab      	add	fp, r5
 8008342:	2b07      	cmp	r3, #7
 8008344:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8008348:	9326      	str	r3, [sp, #152]	; 0x98
 800834a:	f8c4 9000 	str.w	r9, [r4]
 800834e:	6065      	str	r5, [r4, #4]
 8008350:	f73f af09 	bgt.w	8008166 <_svfprintf_r+0xd86>
 8008354:	3408      	adds	r4, #8
 8008356:	e711      	b.n	800817c <_svfprintf_r+0xd9c>
 8008358:	9808      	ldr	r0, [sp, #32]
 800835a:	4631      	mov	r1, r6
 800835c:	aa25      	add	r2, sp, #148	; 0x94
 800835e:	f002 f899 	bl	800a494 <__ssprint_r>
 8008362:	2800      	cmp	r0, #0
 8008364:	f47f a904 	bne.w	8007570 <_svfprintf_r+0x190>
 8008368:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800836c:	463c      	mov	r4, r7
 800836e:	e4b7      	b.n	8007ce0 <_svfprintf_r+0x900>
 8008370:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008372:	4a8a      	ldr	r2, [pc, #552]	; (800859c <_svfprintf_r+0x11bc>)
 8008374:	6022      	str	r2, [r4, #0]
 8008376:	3301      	adds	r3, #1
 8008378:	f10b 0b01 	add.w	fp, fp, #1
 800837c:	2201      	movs	r2, #1
 800837e:	2b07      	cmp	r3, #7
 8008380:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8008384:	9326      	str	r3, [sp, #152]	; 0x98
 8008386:	6062      	str	r2, [r4, #4]
 8008388:	f300 80f3 	bgt.w	8008572 <_svfprintf_r+0x1192>
 800838c:	3408      	adds	r4, #8
 800838e:	b92d      	cbnz	r5, 800839c <_svfprintf_r+0xfbc>
 8008390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008392:	b91b      	cbnz	r3, 800839c <_svfprintf_r+0xfbc>
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	07db      	lsls	r3, r3, #31
 8008398:	f57f aa25 	bpl.w	80077e6 <_svfprintf_r+0x406>
 800839c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800839e:	9818      	ldr	r0, [sp, #96]	; 0x60
 80083a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083a2:	6022      	str	r2, [r4, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	eb0b 0100 	add.w	r1, fp, r0
 80083aa:	2b07      	cmp	r3, #7
 80083ac:	9127      	str	r1, [sp, #156]	; 0x9c
 80083ae:	6060      	str	r0, [r4, #4]
 80083b0:	9326      	str	r3, [sp, #152]	; 0x98
 80083b2:	f300 81f3 	bgt.w	800879c <_svfprintf_r+0x13bc>
 80083b6:	f104 0208 	add.w	r2, r4, #8
 80083ba:	426d      	negs	r5, r5
 80083bc:	2d00      	cmp	r5, #0
 80083be:	f340 80fc 	ble.w	80085ba <_svfprintf_r+0x11da>
 80083c2:	2d10      	cmp	r5, #16
 80083c4:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80085a0 <_svfprintf_r+0x11c0>
 80083c8:	f340 814a 	ble.w	8008660 <_svfprintf_r+0x1280>
 80083cc:	2410      	movs	r4, #16
 80083ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083d2:	e004      	b.n	80083de <_svfprintf_r+0xffe>
 80083d4:	3208      	adds	r2, #8
 80083d6:	3d10      	subs	r5, #16
 80083d8:	2d10      	cmp	r5, #16
 80083da:	f340 8141 	ble.w	8008660 <_svfprintf_r+0x1280>
 80083de:	3301      	adds	r3, #1
 80083e0:	3110      	adds	r1, #16
 80083e2:	2b07      	cmp	r3, #7
 80083e4:	9127      	str	r1, [sp, #156]	; 0x9c
 80083e6:	9326      	str	r3, [sp, #152]	; 0x98
 80083e8:	f8c2 9000 	str.w	r9, [r2]
 80083ec:	6054      	str	r4, [r2, #4]
 80083ee:	ddf1      	ble.n	80083d4 <_svfprintf_r+0xff4>
 80083f0:	4640      	mov	r0, r8
 80083f2:	4631      	mov	r1, r6
 80083f4:	aa25      	add	r2, sp, #148	; 0x94
 80083f6:	f002 f84d 	bl	800a494 <__ssprint_r>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f47f a8b8 	bne.w	8007570 <_svfprintf_r+0x190>
 8008400:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8008402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008404:	463a      	mov	r2, r7
 8008406:	e7e6      	b.n	80083d6 <_svfprintf_r+0xff6>
 8008408:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800840a:	46b1      	mov	r9, r6
 800840c:	2b00      	cmp	r3, #0
 800840e:	f43f a8b0 	beq.w	8007572 <_svfprintf_r+0x192>
 8008412:	9808      	ldr	r0, [sp, #32]
 8008414:	4631      	mov	r1, r6
 8008416:	aa25      	add	r2, sp, #148	; 0x94
 8008418:	f002 f83c 	bl	800a494 <__ssprint_r>
 800841c:	f7ff b8a9 	b.w	8007572 <_svfprintf_r+0x192>
 8008420:	f041 0120 	orr.w	r1, r1, #32
 8008424:	9107      	str	r1, [sp, #28]
 8008426:	785d      	ldrb	r5, [r3, #1]
 8008428:	1c59      	adds	r1, r3, #1
 800842a:	f7ff b82e 	b.w	800748a <_svfprintf_r+0xaa>
 800842e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008430:	910e      	str	r1, [sp, #56]	; 0x38
 8008432:	4240      	negs	r0, r0
 8008434:	900c      	str	r0, [sp, #48]	; 0x30
 8008436:	4619      	mov	r1, r3
 8008438:	f7ff ba2b 	b.w	8007892 <_svfprintf_r+0x4b2>
 800843c:	9808      	ldr	r0, [sp, #32]
 800843e:	4631      	mov	r1, r6
 8008440:	aa25      	add	r2, sp, #148	; 0x94
 8008442:	f002 f827 	bl	800a494 <__ssprint_r>
 8008446:	2800      	cmp	r0, #0
 8008448:	f47f a892 	bne.w	8007570 <_svfprintf_r+0x190>
 800844c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8008450:	463c      	mov	r4, r7
 8008452:	e45b      	b.n	8007d0c <_svfprintf_r+0x92c>
 8008454:	f025 0320 	bic.w	r3, r5, #32
 8008458:	f1ba 3fff 	cmp.w	sl, #4294967295
 800845c:	9309      	str	r3, [sp, #36]	; 0x24
 800845e:	f000 8095 	beq.w	800858c <_svfprintf_r+0x11ac>
 8008462:	2b47      	cmp	r3, #71	; 0x47
 8008464:	d105      	bne.n	8008472 <_svfprintf_r+0x1092>
 8008466:	f1ba 0f00 	cmp.w	sl, #0
 800846a:	bf14      	ite	ne
 800846c:	46d3      	movne	fp, sl
 800846e:	f04f 0b01 	moveq.w	fp, #1
 8008472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008474:	9a07      	ldr	r2, [sp, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800847c:	920f      	str	r2, [sp, #60]	; 0x3c
 800847e:	f2c0 81a8 	blt.w	80087d2 <_svfprintf_r+0x13f2>
 8008482:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8008486:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800848a:	f04f 0a00 	mov.w	sl, #0
 800848e:	2d66      	cmp	r5, #102	; 0x66
 8008490:	f000 80ae 	beq.w	80085f0 <_svfprintf_r+0x1210>
 8008494:	2d46      	cmp	r5, #70	; 0x46
 8008496:	f000 80ab 	beq.w	80085f0 <_svfprintf_r+0x1210>
 800849a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849c:	2b45      	cmp	r3, #69	; 0x45
 800849e:	bf0c      	ite	eq
 80084a0:	f10b 0901 	addeq.w	r9, fp, #1
 80084a4:	46d9      	movne	r9, fp
 80084a6:	2002      	movs	r0, #2
 80084a8:	a91f      	add	r1, sp, #124	; 0x7c
 80084aa:	aa20      	add	r2, sp, #128	; 0x80
 80084ac:	ab23      	add	r3, sp, #140	; 0x8c
 80084ae:	e88d 0201 	stmia.w	sp, {r0, r9}
 80084b2:	9203      	str	r2, [sp, #12]
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	9102      	str	r1, [sp, #8]
 80084b8:	9808      	ldr	r0, [sp, #32]
 80084ba:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80084be:	f000 fa8f 	bl	80089e0 <_dtoa_r>
 80084c2:	2d67      	cmp	r5, #103	; 0x67
 80084c4:	9010      	str	r0, [sp, #64]	; 0x40
 80084c6:	d002      	beq.n	80084ce <_svfprintf_r+0x10ee>
 80084c8:	2d47      	cmp	r5, #71	; 0x47
 80084ca:	f040 80a1 	bne.w	8008610 <_svfprintf_r+0x1230>
 80084ce:	9b07      	ldr	r3, [sp, #28]
 80084d0:	07db      	lsls	r3, r3, #31
 80084d2:	f140 8194 	bpl.w	80087fe <_svfprintf_r+0x141e>
 80084d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084d8:	eb03 0809 	add.w	r8, r3, r9
 80084dc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80084e0:	2200      	movs	r2, #0
 80084e2:	2300      	movs	r3, #0
 80084e4:	f002 fc5e 	bl	800ada4 <__aeabi_dcmpeq>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f040 80ff 	bne.w	80086ec <_svfprintf_r+0x130c>
 80084ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084f0:	4598      	cmp	r8, r3
 80084f2:	d906      	bls.n	8008502 <_svfprintf_r+0x1122>
 80084f4:	2130      	movs	r1, #48	; 0x30
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80084fa:	7019      	strb	r1, [r3, #0]
 80084fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084fe:	4598      	cmp	r8, r3
 8008500:	d8f9      	bhi.n	80084f6 <_svfprintf_r+0x1116>
 8008502:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	9313      	str	r3, [sp, #76]	; 0x4c
 8008508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850a:	2b47      	cmp	r3, #71	; 0x47
 800850c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800850e:	f000 80e0 	beq.w	80086d2 <_svfprintf_r+0x12f2>
 8008512:	2d65      	cmp	r5, #101	; 0x65
 8008514:	f340 80fa 	ble.w	800870c <_svfprintf_r+0x132c>
 8008518:	2d66      	cmp	r5, #102	; 0x66
 800851a:	9312      	str	r3, [sp, #72]	; 0x48
 800851c:	f000 8162 	beq.w	80087e4 <_svfprintf_r+0x1404>
 8008520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008522:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008524:	4293      	cmp	r3, r2
 8008526:	f300 8146 	bgt.w	80087b6 <_svfprintf_r+0x13d6>
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	07d9      	lsls	r1, r3, #31
 800852e:	f100 8168 	bmi.w	8008802 <_svfprintf_r+0x1422>
 8008532:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008536:	920d      	str	r2, [sp, #52]	; 0x34
 8008538:	f1ba 0f00 	cmp.w	sl, #0
 800853c:	f040 80be 	bne.w	80086bc <_svfprintf_r+0x12dc>
 8008540:	9309      	str	r3, [sp, #36]	; 0x24
 8008542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008544:	9307      	str	r3, [sp, #28]
 8008546:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800854a:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 800854e:	f7ff b869 	b.w	8007624 <_svfprintf_r+0x244>
 8008552:	9808      	ldr	r0, [sp, #32]
 8008554:	2140      	movs	r1, #64	; 0x40
 8008556:	f001 f98f 	bl	8009878 <_malloc_r>
 800855a:	f8c9 0000 	str.w	r0, [r9]
 800855e:	f8c9 0010 	str.w	r0, [r9, #16]
 8008562:	2800      	cmp	r0, #0
 8008564:	f000 8199 	beq.w	800889a <_svfprintf_r+0x14ba>
 8008568:	2340      	movs	r3, #64	; 0x40
 800856a:	f8c9 3014 	str.w	r3, [r9, #20]
 800856e:	f7fe bf4f 	b.w	8007410 <_svfprintf_r+0x30>
 8008572:	9808      	ldr	r0, [sp, #32]
 8008574:	4631      	mov	r1, r6
 8008576:	aa25      	add	r2, sp, #148	; 0x94
 8008578:	f001 ff8c 	bl	800a494 <__ssprint_r>
 800857c:	2800      	cmp	r0, #0
 800857e:	f47e aff7 	bne.w	8007570 <_svfprintf_r+0x190>
 8008582:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8008584:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8008588:	463c      	mov	r4, r7
 800858a:	e700      	b.n	800838e <_svfprintf_r+0xfae>
 800858c:	f04f 0b06 	mov.w	fp, #6
 8008590:	e76f      	b.n	8008472 <_svfprintf_r+0x1092>
 8008592:	bf00      	nop
 8008594:	0800b694 	.word	0x0800b694
 8008598:	0800b690 	.word	0x0800b690
 800859c:	0800b6c8 	.word	0x0800b6c8
 80085a0:	0800b6cc 	.word	0x0800b6cc
 80085a4:	9808      	ldr	r0, [sp, #32]
 80085a6:	4631      	mov	r1, r6
 80085a8:	aa25      	add	r2, sp, #148	; 0x94
 80085aa:	f001 ff73 	bl	800a494 <__ssprint_r>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f47e afde 	bne.w	8007570 <_svfprintf_r+0x190>
 80085b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80085b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085b8:	463a      	mov	r2, r7
 80085ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80085bc:	6054      	str	r4, [r2, #4]
 80085be:	3301      	adds	r3, #1
 80085c0:	eb01 0b04 	add.w	fp, r1, r4
 80085c4:	2b07      	cmp	r3, #7
 80085c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80085c8:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80085cc:	9326      	str	r3, [sp, #152]	; 0x98
 80085ce:	6011      	str	r1, [r2, #0]
 80085d0:	f73f ac52 	bgt.w	8007e78 <_svfprintf_r+0xa98>
 80085d4:	f102 0408 	add.w	r4, r2, #8
 80085d8:	f7ff b905 	b.w	80077e6 <_svfprintf_r+0x406>
 80085dc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80085e0:	f7fe fed0 	bl	8007384 <strlen>
 80085e4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80085e8:	900d      	str	r0, [sp, #52]	; 0x34
 80085ea:	4603      	mov	r3, r0
 80085ec:	f7ff ba0e 	b.w	8007a0c <_svfprintf_r+0x62c>
 80085f0:	2003      	movs	r0, #3
 80085f2:	a91f      	add	r1, sp, #124	; 0x7c
 80085f4:	aa20      	add	r2, sp, #128	; 0x80
 80085f6:	ab23      	add	r3, sp, #140	; 0x8c
 80085f8:	e88d 0801 	stmia.w	sp, {r0, fp}
 80085fc:	9203      	str	r2, [sp, #12]
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	9102      	str	r1, [sp, #8]
 8008602:	9808      	ldr	r0, [sp, #32]
 8008604:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008608:	f000 f9ea 	bl	80089e0 <_dtoa_r>
 800860c:	46d9      	mov	r9, fp
 800860e:	9010      	str	r0, [sp, #64]	; 0x40
 8008610:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008612:	eb03 0809 	add.w	r8, r3, r9
 8008616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008618:	2b46      	cmp	r3, #70	; 0x46
 800861a:	f47f af5f 	bne.w	80084dc <_svfprintf_r+0x10fc>
 800861e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b30      	cmp	r3, #48	; 0x30
 8008624:	f000 8103 	beq.w	800882e <_svfprintf_r+0x144e>
 8008628:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800862a:	4498      	add	r8, r3
 800862c:	e756      	b.n	80084dc <_svfprintf_r+0x10fc>
 800862e:	9808      	ldr	r0, [sp, #32]
 8008630:	4631      	mov	r1, r6
 8008632:	aa25      	add	r2, sp, #148	; 0x94
 8008634:	f001 ff2e 	bl	800a494 <__ssprint_r>
 8008638:	2800      	cmp	r0, #0
 800863a:	f47e af99 	bne.w	8007570 <_svfprintf_r+0x190>
 800863e:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8008642:	463c      	mov	r4, r7
 8008644:	e49d      	b.n	8007f82 <_svfprintf_r+0xba2>
 8008646:	9808      	ldr	r0, [sp, #32]
 8008648:	4631      	mov	r1, r6
 800864a:	aa25      	add	r2, sp, #148	; 0x94
 800864c:	f001 ff22 	bl	800a494 <__ssprint_r>
 8008650:	2800      	cmp	r0, #0
 8008652:	f47e af8d 	bne.w	8007570 <_svfprintf_r+0x190>
 8008656:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008658:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800865c:	463c      	mov	r4, r7
 800865e:	e598      	b.n	8008192 <_svfprintf_r+0xdb2>
 8008660:	3301      	adds	r3, #1
 8008662:	4429      	add	r1, r5
 8008664:	2b07      	cmp	r3, #7
 8008666:	9127      	str	r1, [sp, #156]	; 0x9c
 8008668:	9326      	str	r3, [sp, #152]	; 0x98
 800866a:	f8c2 9000 	str.w	r9, [r2]
 800866e:	6055      	str	r5, [r2, #4]
 8008670:	dc98      	bgt.n	80085a4 <_svfprintf_r+0x11c4>
 8008672:	3208      	adds	r2, #8
 8008674:	e7a1      	b.n	80085ba <_svfprintf_r+0x11da>
 8008676:	4653      	mov	r3, sl
 8008678:	2b06      	cmp	r3, #6
 800867a:	bf28      	it	cs
 800867c:	2306      	movcs	r3, #6
 800867e:	930d      	str	r3, [sp, #52]	; 0x34
 8008680:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008684:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8008688:	9309      	str	r3, [sp, #36]	; 0x24
 800868a:	4b87      	ldr	r3, [pc, #540]	; (80088a8 <_svfprintf_r+0x14c8>)
 800868c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008690:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8008694:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8008698:	9310      	str	r3, [sp, #64]	; 0x40
 800869a:	f7fe bfc3 	b.w	8007624 <_svfprintf_r+0x244>
 800869e:	9808      	ldr	r0, [sp, #32]
 80086a0:	4631      	mov	r1, r6
 80086a2:	aa25      	add	r2, sp, #148	; 0x94
 80086a4:	f001 fef6 	bl	800a494 <__ssprint_r>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f47e af61 	bne.w	8007570 <_svfprintf_r+0x190>
 80086ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086b2:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	463c      	mov	r4, r7
 80086ba:	e580      	b.n	80081be <_svfprintf_r+0xdde>
 80086bc:	9309      	str	r3, [sp, #36]	; 0x24
 80086be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086c0:	9307      	str	r3, [sp, #28]
 80086c2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80086c6:	2300      	movs	r3, #0
 80086c8:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 80086cc:	9311      	str	r3, [sp, #68]	; 0x44
 80086ce:	f7fe bfac 	b.w	800762a <_svfprintf_r+0x24a>
 80086d2:	1cda      	adds	r2, r3, #3
 80086d4:	db19      	blt.n	800870a <_svfprintf_r+0x132a>
 80086d6:	459b      	cmp	fp, r3
 80086d8:	db17      	blt.n	800870a <_svfprintf_r+0x132a>
 80086da:	9312      	str	r3, [sp, #72]	; 0x48
 80086dc:	2567      	movs	r5, #103	; 0x67
 80086de:	e71f      	b.n	8008520 <_svfprintf_r+0x1140>
 80086e0:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80086e4:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 80086e8:	f7ff ba8f 	b.w	8007c0a <_svfprintf_r+0x82a>
 80086ec:	4643      	mov	r3, r8
 80086ee:	e708      	b.n	8008502 <_svfprintf_r+0x1122>
 80086f0:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80086f4:	9011      	str	r0, [sp, #68]	; 0x44
 80086f6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086fa:	9012      	str	r0, [sp, #72]	; 0x48
 80086fc:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8008700:	9309      	str	r3, [sp, #36]	; 0x24
 8008702:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008706:	f7fe bf8d 	b.w	8007624 <_svfprintf_r+0x244>
 800870a:	3d02      	subs	r5, #2
 800870c:	3b01      	subs	r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	931f      	str	r3, [sp, #124]	; 0x7c
 8008712:	bfba      	itte	lt
 8008714:	425b      	neglt	r3, r3
 8008716:	222d      	movlt	r2, #45	; 0x2d
 8008718:	222b      	movge	r2, #43	; 0x2b
 800871a:	2b09      	cmp	r3, #9
 800871c:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
 8008720:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8008724:	dd7b      	ble.n	800881e <_svfprintf_r+0x143e>
 8008726:	f10d 0e93 	add.w	lr, sp, #147	; 0x93
 800872a:	4670      	mov	r0, lr
 800872c:	4a5f      	ldr	r2, [pc, #380]	; (80088ac <_svfprintf_r+0x14cc>)
 800872e:	fb82 2103 	smull	r2, r1, r2, r3
 8008732:	17da      	asrs	r2, r3, #31
 8008734:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8008738:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800873c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8008740:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008744:	2a09      	cmp	r2, #9
 8008746:	4613      	mov	r3, r2
 8008748:	f800 1d01 	strb.w	r1, [r0, #-1]!
 800874c:	dcee      	bgt.n	800872c <_svfprintf_r+0x134c>
 800874e:	4602      	mov	r2, r0
 8008750:	3330      	adds	r3, #48	; 0x30
 8008752:	b2d9      	uxtb	r1, r3
 8008754:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008758:	4596      	cmp	lr, r2
 800875a:	f240 809b 	bls.w	8008894 <_svfprintf_r+0x14b4>
 800875e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 8008762:	4603      	mov	r3, r0
 8008764:	e001      	b.n	800876a <_svfprintf_r+0x138a>
 8008766:	f813 1b01 	ldrb.w	r1, [r3], #1
 800876a:	f802 1b01 	strb.w	r1, [r2], #1
 800876e:	4573      	cmp	r3, lr
 8008770:	d1f9      	bne.n	8008766 <_svfprintf_r+0x1386>
 8008772:	ab25      	add	r3, sp, #148	; 0x94
 8008774:	1a1b      	subs	r3, r3, r0
 8008776:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 800877a:	4413      	add	r3, r2
 800877c:	aa21      	add	r2, sp, #132	; 0x84
 800877e:	1a9b      	subs	r3, r3, r2
 8008780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008782:	9319      	str	r3, [sp, #100]	; 0x64
 8008784:	2a01      	cmp	r2, #1
 8008786:	4413      	add	r3, r2
 8008788:	930d      	str	r3, [sp, #52]	; 0x34
 800878a:	dd74      	ble.n	8008876 <_svfprintf_r+0x1496>
 800878c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800878e:	2200      	movs	r2, #0
 8008790:	3301      	adds	r3, #1
 8008792:	930d      	str	r3, [sp, #52]	; 0x34
 8008794:	9212      	str	r2, [sp, #72]	; 0x48
 8008796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800879a:	e6cd      	b.n	8008538 <_svfprintf_r+0x1158>
 800879c:	9808      	ldr	r0, [sp, #32]
 800879e:	4631      	mov	r1, r6
 80087a0:	aa25      	add	r2, sp, #148	; 0x94
 80087a2:	f001 fe77 	bl	800a494 <__ssprint_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f47e aee2 	bne.w	8007570 <_svfprintf_r+0x190>
 80087ac:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80087ae:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80087b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087b2:	463a      	mov	r2, r7
 80087b4:	e601      	b.n	80083ba <_svfprintf_r+0xfda>
 80087b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bfd8      	it	le
 80087bc:	f1c3 0802 	rsble	r8, r3, #2
 80087c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087c2:	bfc8      	it	gt
 80087c4:	f04f 0801 	movgt.w	r8, #1
 80087c8:	4443      	add	r3, r8
 80087ca:	930d      	str	r3, [sp, #52]	; 0x34
 80087cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80087d0:	e6b2      	b.n	8008538 <_svfprintf_r+0x1158>
 80087d2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80087d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087da:	901a      	str	r0, [sp, #104]	; 0x68
 80087dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80087de:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80087e2:	e654      	b.n	800848e <_svfprintf_r+0x10ae>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dd3d      	ble.n	8008864 <_svfprintf_r+0x1484>
 80087e8:	f1bb 0f00 	cmp.w	fp, #0
 80087ec:	d10f      	bne.n	800880e <_svfprintf_r+0x142e>
 80087ee:	9b07      	ldr	r3, [sp, #28]
 80087f0:	07db      	lsls	r3, r3, #31
 80087f2:	d40c      	bmi.n	800880e <_svfprintf_r+0x142e>
 80087f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087f6:	920d      	str	r2, [sp, #52]	; 0x34
 80087f8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80087fc:	e69c      	b.n	8008538 <_svfprintf_r+0x1158>
 80087fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008800:	e67f      	b.n	8008502 <_svfprintf_r+0x1122>
 8008802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008804:	3301      	adds	r3, #1
 8008806:	930d      	str	r3, [sp, #52]	; 0x34
 8008808:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800880c:	e694      	b.n	8008538 <_svfprintf_r+0x1158>
 800880e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008810:	f10b 0801 	add.w	r8, fp, #1
 8008814:	4443      	add	r3, r8
 8008816:	930d      	str	r3, [sp, #52]	; 0x34
 8008818:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800881c:	e68c      	b.n	8008538 <_svfprintf_r+0x1158>
 800881e:	3330      	adds	r3, #48	; 0x30
 8008820:	2230      	movs	r2, #48	; 0x30
 8008822:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8008826:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 800882a:	ab22      	add	r3, sp, #136	; 0x88
 800882c:	e7a6      	b.n	800877c <_svfprintf_r+0x139c>
 800882e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	f002 fab5 	bl	800ada4 <__aeabi_dcmpeq>
 800883a:	2800      	cmp	r0, #0
 800883c:	f47f aef4 	bne.w	8008628 <_svfprintf_r+0x1248>
 8008840:	f1c9 0301 	rsb	r3, r9, #1
 8008844:	931f      	str	r3, [sp, #124]	; 0x7c
 8008846:	4498      	add	r8, r3
 8008848:	e648      	b.n	80084dc <_svfprintf_r+0x10fc>
 800884a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800884c:	f8d5 a000 	ldr.w	sl, [r5]
 8008850:	4628      	mov	r0, r5
 8008852:	3004      	adds	r0, #4
 8008854:	f1ba 0f00 	cmp.w	sl, #0
 8008858:	785d      	ldrb	r5, [r3, #1]
 800885a:	900e      	str	r0, [sp, #56]	; 0x38
 800885c:	f6be ae15 	bge.w	800748a <_svfprintf_r+0xaa>
 8008860:	f7fe be11 	b.w	8007486 <_svfprintf_r+0xa6>
 8008864:	f1bb 0f00 	cmp.w	fp, #0
 8008868:	d10e      	bne.n	8008888 <_svfprintf_r+0x14a8>
 800886a:	9b07      	ldr	r3, [sp, #28]
 800886c:	07d8      	lsls	r0, r3, #31
 800886e:	d40b      	bmi.n	8008888 <_svfprintf_r+0x14a8>
 8008870:	2301      	movs	r3, #1
 8008872:	930d      	str	r3, [sp, #52]	; 0x34
 8008874:	e660      	b.n	8008538 <_svfprintf_r+0x1158>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	f013 0301 	ands.w	r3, r3, #1
 800887c:	d186      	bne.n	800878c <_svfprintf_r+0x13ac>
 800887e:	9312      	str	r3, [sp, #72]	; 0x48
 8008880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008886:	e657      	b.n	8008538 <_svfprintf_r+0x1158>
 8008888:	f10b 0302 	add.w	r3, fp, #2
 800888c:	930d      	str	r3, [sp, #52]	; 0x34
 800888e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008892:	e651      	b.n	8008538 <_svfprintf_r+0x1158>
 8008894:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8008898:	e770      	b.n	800877c <_svfprintf_r+0x139c>
 800889a:	9a08      	ldr	r2, [sp, #32]
 800889c:	230c      	movs	r3, #12
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	f7fe be6e 	b.w	8007584 <_svfprintf_r+0x1a4>
 80088a8:	0800b6c0 	.word	0x0800b6c0
 80088ac:	66666667 	.word	0x66666667

080088b0 <quorem>:
 80088b0:	6902      	ldr	r2, [r0, #16]
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	f300 808f 	bgt.w	80089d8 <quorem+0x128>
 80088ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088be:	f103 38ff 	add.w	r8, r3, #4294967295
 80088c2:	f101 0714 	add.w	r7, r1, #20
 80088c6:	f100 0b14 	add.w	fp, r0, #20
 80088ca:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80088ce:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80088d2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80088d6:	b083      	sub	sp, #12
 80088d8:	3201      	adds	r2, #1
 80088da:	fbb3 f9f2 	udiv	r9, r3, r2
 80088de:	eb0b 0304 	add.w	r3, fp, r4
 80088e2:	9400      	str	r4, [sp, #0]
 80088e4:	eb07 0a04 	add.w	sl, r7, r4
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	d03b      	beq.n	8008968 <quorem+0xb8>
 80088f0:	2600      	movs	r6, #0
 80088f2:	4632      	mov	r2, r6
 80088f4:	46bc      	mov	ip, r7
 80088f6:	46de      	mov	lr, fp
 80088f8:	4634      	mov	r4, r6
 80088fa:	f85c 6b04 	ldr.w	r6, [ip], #4
 80088fe:	f8de 5000 	ldr.w	r5, [lr]
 8008902:	b2b3      	uxth	r3, r6
 8008904:	0c36      	lsrs	r6, r6, #16
 8008906:	fb03 4409 	mla	r4, r3, r9, r4
 800890a:	fb06 f609 	mul.w	r6, r6, r9
 800890e:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8008912:	b2a3      	uxth	r3, r4
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	b2b4      	uxth	r4, r6
 8008918:	fa13 f385 	uxtah	r3, r3, r5
 800891c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8008920:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008924:	b29b      	uxth	r3, r3
 8008926:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800892a:	45e2      	cmp	sl, ip
 800892c:	ea4f 4224 	mov.w	r2, r4, asr #16
 8008930:	f84e 3b04 	str.w	r3, [lr], #4
 8008934:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8008938:	d2df      	bcs.n	80088fa <quorem+0x4a>
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	f85b 3003 	ldr.w	r3, [fp, r3]
 8008940:	b993      	cbnz	r3, 8008968 <quorem+0xb8>
 8008942:	9c01      	ldr	r4, [sp, #4]
 8008944:	1f23      	subs	r3, r4, #4
 8008946:	459b      	cmp	fp, r3
 8008948:	d20c      	bcs.n	8008964 <quorem+0xb4>
 800894a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800894e:	b94b      	cbnz	r3, 8008964 <quorem+0xb4>
 8008950:	f1a4 0308 	sub.w	r3, r4, #8
 8008954:	e002      	b.n	800895c <quorem+0xac>
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	3b04      	subs	r3, #4
 800895a:	b91a      	cbnz	r2, 8008964 <quorem+0xb4>
 800895c:	459b      	cmp	fp, r3
 800895e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008962:	d3f8      	bcc.n	8008956 <quorem+0xa6>
 8008964:	f8c0 8010 	str.w	r8, [r0, #16]
 8008968:	4604      	mov	r4, r0
 800896a:	f001 fc6b 	bl	800a244 <__mcmp>
 800896e:	2800      	cmp	r0, #0
 8008970:	db2e      	blt.n	80089d0 <quorem+0x120>
 8008972:	f109 0901 	add.w	r9, r9, #1
 8008976:	465d      	mov	r5, fp
 8008978:	2300      	movs	r3, #0
 800897a:	f857 1b04 	ldr.w	r1, [r7], #4
 800897e:	6828      	ldr	r0, [r5, #0]
 8008980:	b28a      	uxth	r2, r1
 8008982:	1a9a      	subs	r2, r3, r2
 8008984:	0c09      	lsrs	r1, r1, #16
 8008986:	fa12 f280 	uxtah	r2, r2, r0
 800898a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800898e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8008992:	b291      	uxth	r1, r2
 8008994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008998:	45ba      	cmp	sl, r7
 800899a:	f845 1b04 	str.w	r1, [r5], #4
 800899e:	ea4f 4323 	mov.w	r3, r3, asr #16
 80089a2:	d2ea      	bcs.n	800897a <quorem+0xca>
 80089a4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80089a8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80089ac:	b982      	cbnz	r2, 80089d0 <quorem+0x120>
 80089ae:	1f1a      	subs	r2, r3, #4
 80089b0:	4593      	cmp	fp, r2
 80089b2:	d20b      	bcs.n	80089cc <quorem+0x11c>
 80089b4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80089b8:	b942      	cbnz	r2, 80089cc <quorem+0x11c>
 80089ba:	3b08      	subs	r3, #8
 80089bc:	e002      	b.n	80089c4 <quorem+0x114>
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	3b04      	subs	r3, #4
 80089c2:	b91a      	cbnz	r2, 80089cc <quorem+0x11c>
 80089c4:	459b      	cmp	fp, r3
 80089c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80089ca:	d3f8      	bcc.n	80089be <quorem+0x10e>
 80089cc:	f8c4 8010 	str.w	r8, [r4, #16]
 80089d0:	4648      	mov	r0, r9
 80089d2:	b003      	add	sp, #12
 80089d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d8:	2000      	movs	r0, #0
 80089da:	4770      	bx	lr
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <_dtoa_r>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80089e6:	b097      	sub	sp, #92	; 0x5c
 80089e8:	4604      	mov	r4, r0
 80089ea:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80089ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089f0:	b141      	cbz	r1, 8008a04 <_dtoa_r+0x24>
 80089f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089f4:	604a      	str	r2, [r1, #4]
 80089f6:	2301      	movs	r3, #1
 80089f8:	4093      	lsls	r3, r2
 80089fa:	608b      	str	r3, [r1, #8]
 80089fc:	f001 fa3e 	bl	8009e7c <_Bfree>
 8008a00:	2300      	movs	r3, #0
 8008a02:	6423      	str	r3, [r4, #64]	; 0x40
 8008a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	4699      	mov	r9, r3
 8008a0c:	db36      	blt.n	8008a7c <_dtoa_r+0x9c>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	4ba5      	ldr	r3, [pc, #660]	; (8008ca8 <_dtoa_r+0x2c8>)
 8008a14:	461a      	mov	r2, r3
 8008a16:	ea09 0303 	and.w	r3, r9, r3
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d017      	beq.n	8008a4e <_dtoa_r+0x6e>
 8008a1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a22:	2200      	movs	r2, #0
 8008a24:	2300      	movs	r3, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f002 f9bb 	bl	800ada4 <__aeabi_dcmpeq>
 8008a2e:	4680      	mov	r8, r0
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d02b      	beq.n	8008a8c <_dtoa_r+0xac>
 8008a34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a36:	2301      	movs	r3, #1
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80cb 	beq.w	8008bd8 <_dtoa_r+0x1f8>
 8008a42:	489a      	ldr	r0, [pc, #616]	; (8008cac <_dtoa_r+0x2cc>)
 8008a44:	6018      	str	r0, [r3, #0]
 8008a46:	3801      	subs	r0, #1
 8008a48:	b017      	add	sp, #92	; 0x5c
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a50:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80a6 	beq.w	8008baa <_dtoa_r+0x1ca>
 8008a5e:	4894      	ldr	r0, [pc, #592]	; (8008cb0 <_dtoa_r+0x2d0>)
 8008a60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <_dtoa_r+0x68>
 8008a66:	78c3      	ldrb	r3, [r0, #3]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80b7 	beq.w	8008bdc <_dtoa_r+0x1fc>
 8008a6e:	f100 0308 	add.w	r3, r0, #8
 8008a72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	b017      	add	sp, #92	; 0x5c
 8008a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7c:	9a03      	ldr	r2, [sp, #12]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a8a:	e7c2      	b.n	8008a12 <_dtoa_r+0x32>
 8008a8c:	aa15      	add	r2, sp, #84	; 0x54
 8008a8e:	ab14      	add	r3, sp, #80	; 0x50
 8008a90:	e88d 000c 	stmia.w	sp, {r2, r3}
 8008a94:	4620      	mov	r0, r4
 8008a96:	4632      	mov	r2, r6
 8008a98:	463b      	mov	r3, r7
 8008a9a:	f001 fc61 	bl	800a360 <__d2b>
 8008a9e:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8008aa2:	4683      	mov	fp, r0
 8008aa4:	f040 808a 	bne.w	8008bbc <_dtoa_r+0x1dc>
 8008aa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008aac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008aae:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8008ab2:	4445      	add	r5, r8
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	f2c0 8297 	blt.w	8008fe8 <_dtoa_r+0x608>
 8008aba:	4a7e      	ldr	r2, [pc, #504]	; (8008cb4 <_dtoa_r+0x2d4>)
 8008abc:	1b52      	subs	r2, r2, r5
 8008abe:	fa09 f902 	lsl.w	r9, r9, r2
 8008ac2:	9a02      	ldr	r2, [sp, #8]
 8008ac4:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8008ac8:	fa22 f003 	lsr.w	r0, r2, r3
 8008acc:	ea49 0000 	orr.w	r0, r9, r0
 8008ad0:	f7fe f844 	bl	8006b5c <__aeabi_ui2d>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	3d01      	subs	r5, #1
 8008ad8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008adc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4b75      	ldr	r3, [pc, #468]	; (8008cb8 <_dtoa_r+0x2d8>)
 8008ae2:	f7fd fefd 	bl	80068e0 <__aeabi_dsub>
 8008ae6:	a36a      	add	r3, pc, #424	; (adr r3, 8008c90 <_dtoa_r+0x2b0>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7fe f8ac 	bl	8006c48 <__aeabi_dmul>
 8008af0:	a369      	add	r3, pc, #420	; (adr r3, 8008c98 <_dtoa_r+0x2b8>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7fd fef5 	bl	80068e4 <__adddf3>
 8008afa:	4606      	mov	r6, r0
 8008afc:	4628      	mov	r0, r5
 8008afe:	460f      	mov	r7, r1
 8008b00:	f7fe f83c 	bl	8006b7c <__aeabi_i2d>
 8008b04:	a366      	add	r3, pc, #408	; (adr r3, 8008ca0 <_dtoa_r+0x2c0>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7fe f89d 	bl	8006c48 <__aeabi_dmul>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7fd fee5 	bl	80068e4 <__adddf3>
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	f002 f973 	bl	800ae08 <__aeabi_d2iz>
 8008b22:	4639      	mov	r1, r7
 8008b24:	9004      	str	r0, [sp, #16]
 8008b26:	2200      	movs	r2, #0
 8008b28:	4630      	mov	r0, r6
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f002 f944 	bl	800adb8 <__aeabi_dcmplt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f040 81a6 	bne.w	8008e82 <_dtoa_r+0x4a2>
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	2b16      	cmp	r3, #22
 8008b3a:	f200 819f 	bhi.w	8008e7c <_dtoa_r+0x49c>
 8008b3e:	9a04      	ldr	r2, [sp, #16]
 8008b40:	4b5e      	ldr	r3, [pc, #376]	; (8008cbc <_dtoa_r+0x2dc>)
 8008b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b4e:	f002 f951 	bl	800adf4 <__aeabi_dcmpgt>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	f000 824e 	beq.w	8008ff4 <_dtoa_r+0x614>
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b62:	ebc5 0508 	rsb	r5, r5, r8
 8008b66:	f1b5 0a01 	subs.w	sl, r5, #1
 8008b6a:	f100 81a1 	bmi.w	8008eb0 <_dtoa_r+0x4d0>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9305      	str	r3, [sp, #20]
 8008b72:	9b04      	ldr	r3, [sp, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f2c0 8192 	blt.w	8008e9e <_dtoa_r+0x4be>
 8008b7a:	449a      	add	sl, r3
 8008b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9308      	str	r3, [sp, #32]
 8008b82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b84:	2b09      	cmp	r3, #9
 8008b86:	d82b      	bhi.n	8008be0 <_dtoa_r+0x200>
 8008b88:	2b05      	cmp	r3, #5
 8008b8a:	f340 866d 	ble.w	8009868 <_dtoa_r+0xe88>
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	9320      	str	r3, [sp, #128]	; 0x80
 8008b92:	2500      	movs	r5, #0
 8008b94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b96:	3b02      	subs	r3, #2
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	f200 864b 	bhi.w	8009834 <_dtoa_r+0xe54>
 8008b9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008ba2:	03cc      	.short	0x03cc
 8008ba4:	02b203be 	.word	0x02b203be
 8008ba8:	0660      	.short	0x0660
 8008baa:	4b41      	ldr	r3, [pc, #260]	; (8008cb0 <_dtoa_r+0x2d0>)
 8008bac:	4a44      	ldr	r2, [pc, #272]	; (8008cc0 <_dtoa_r+0x2e0>)
 8008bae:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	bf14      	ite	ne
 8008bb6:	4618      	movne	r0, r3
 8008bb8:	4610      	moveq	r0, r2
 8008bba:	e751      	b.n	8008a60 <_dtoa_r+0x80>
 8008bbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bc0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008bc4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008bd2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008bd6:	e782      	b.n	8008ade <_dtoa_r+0xfe>
 8008bd8:	483a      	ldr	r0, [pc, #232]	; (8008cc4 <_dtoa_r+0x2e4>)
 8008bda:	e735      	b.n	8008a48 <_dtoa_r+0x68>
 8008bdc:	1cc3      	adds	r3, r0, #3
 8008bde:	e748      	b.n	8008a72 <_dtoa_r+0x92>
 8008be0:	2100      	movs	r1, #0
 8008be2:	6461      	str	r1, [r4, #68]	; 0x44
 8008be4:	4620      	mov	r0, r4
 8008be6:	9120      	str	r1, [sp, #128]	; 0x80
 8008be8:	f001 f922 	bl	8009e30 <_Balloc>
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf0:	9306      	str	r3, [sp, #24]
 8008bf2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bf4:	930c      	str	r3, [sp, #48]	; 0x30
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	9007      	str	r0, [sp, #28]
 8008bfa:	9221      	str	r2, [sp, #132]	; 0x84
 8008bfc:	6420      	str	r0, [r4, #64]	; 0x40
 8008bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f2c0 80d2 	blt.w	8008dac <_dtoa_r+0x3cc>
 8008c08:	9a04      	ldr	r2, [sp, #16]
 8008c0a:	2a0e      	cmp	r2, #14
 8008c0c:	f300 80ce 	bgt.w	8008dac <_dtoa_r+0x3cc>
 8008c10:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <_dtoa_r+0x2dc>)
 8008c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f2c0 838f 	blt.w	8009340 <_dtoa_r+0x960>
 8008c22:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c26:	4642      	mov	r2, r8
 8008c28:	464b      	mov	r3, r9
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7fe f935 	bl	8006e9c <__aeabi_ddiv>
 8008c32:	f002 f8e9 	bl	800ae08 <__aeabi_d2iz>
 8008c36:	4682      	mov	sl, r0
 8008c38:	f7fd ffa0 	bl	8006b7c <__aeabi_i2d>
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	f7fe f802 	bl	8006c48 <__aeabi_dmul>
 8008c44:	460b      	mov	r3, r1
 8008c46:	4602      	mov	r2, r0
 8008c48:	4639      	mov	r1, r7
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7fd fe48 	bl	80068e0 <__aeabi_dsub>
 8008c50:	9d07      	ldr	r5, [sp, #28]
 8008c52:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8008c56:	702b      	strb	r3, [r5, #0]
 8008c58:	9b06      	ldr	r3, [sp, #24]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	460f      	mov	r7, r1
 8008c60:	f105 0501 	add.w	r5, r5, #1
 8008c64:	d062      	beq.n	8008d2c <_dtoa_r+0x34c>
 8008c66:	2200      	movs	r2, #0
 8008c68:	4b17      	ldr	r3, [pc, #92]	; (8008cc8 <_dtoa_r+0x2e8>)
 8008c6a:	f7fd ffed 	bl	8006c48 <__aeabi_dmul>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2300      	movs	r3, #0
 8008c72:	4606      	mov	r6, r0
 8008c74:	460f      	mov	r7, r1
 8008c76:	f002 f895 	bl	800ada4 <__aeabi_dcmpeq>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f040 8083 	bne.w	8008d86 <_dtoa_r+0x3a6>
 8008c80:	f8cd b008 	str.w	fp, [sp, #8]
 8008c84:	9405      	str	r4, [sp, #20]
 8008c86:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008c8a:	9c06      	ldr	r4, [sp, #24]
 8008c8c:	e029      	b.n	8008ce2 <_dtoa_r+0x302>
 8008c8e:	bf00      	nop
 8008c90:	636f4361 	.word	0x636f4361
 8008c94:	3fd287a7 	.word	0x3fd287a7
 8008c98:	8b60c8b3 	.word	0x8b60c8b3
 8008c9c:	3fc68a28 	.word	0x3fc68a28
 8008ca0:	509f79fb 	.word	0x509f79fb
 8008ca4:	3fd34413 	.word	0x3fd34413
 8008ca8:	7ff00000 	.word	0x7ff00000
 8008cac:	0800b6c9 	.word	0x0800b6c9
 8008cb0:	0800b6e8 	.word	0x0800b6e8
 8008cb4:	fffffc0e 	.word	0xfffffc0e
 8008cb8:	3ff80000 	.word	0x3ff80000
 8008cbc:	0800b6f8 	.word	0x0800b6f8
 8008cc0:	0800b6dc 	.word	0x0800b6dc
 8008cc4:	0800b6c8 	.word	0x0800b6c8
 8008cc8:	40240000 	.word	0x40240000
 8008ccc:	f7fd ffbc 	bl	8006c48 <__aeabi_dmul>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	460f      	mov	r7, r1
 8008cd8:	f002 f864 	bl	800ada4 <__aeabi_dcmpeq>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f040 83de 	bne.w	800949e <_dtoa_r+0xabe>
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	4639      	mov	r1, r7
 8008cea:	f7fe f8d7 	bl	8006e9c <__aeabi_ddiv>
 8008cee:	f002 f88b 	bl	800ae08 <__aeabi_d2iz>
 8008cf2:	4682      	mov	sl, r0
 8008cf4:	f7fd ff42 	bl	8006b7c <__aeabi_i2d>
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	f7fd ffa4 	bl	8006c48 <__aeabi_dmul>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4630      	mov	r0, r6
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7fd fdea 	bl	80068e0 <__aeabi_dsub>
 8008d0c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8008d10:	f805 eb01 	strb.w	lr, [r5], #1
 8008d14:	ebcb 0e05 	rsb	lr, fp, r5
 8008d18:	4574      	cmp	r4, lr
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	f04f 0200 	mov.w	r2, #0
 8008d22:	4bb5      	ldr	r3, [pc, #724]	; (8008ff8 <_dtoa_r+0x618>)
 8008d24:	d1d2      	bne.n	8008ccc <_dtoa_r+0x2ec>
 8008d26:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008d2a:	9c05      	ldr	r4, [sp, #20]
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	463b      	mov	r3, r7
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7fd fdd6 	bl	80068e4 <__adddf3>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	4649      	mov	r1, r9
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	f002 f838 	bl	800adb8 <__aeabi_dcmplt>
 8008d48:	b948      	cbnz	r0, 8008d5e <_dtoa_r+0x37e>
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4632      	mov	r2, r6
 8008d50:	463b      	mov	r3, r7
 8008d52:	f002 f827 	bl	800ada4 <__aeabi_dcmpeq>
 8008d56:	b1b0      	cbz	r0, 8008d86 <_dtoa_r+0x3a6>
 8008d58:	f01a 0f01 	tst.w	sl, #1
 8008d5c:	d013      	beq.n	8008d86 <_dtoa_r+0x3a6>
 8008d5e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8008d62:	9907      	ldr	r1, [sp, #28]
 8008d64:	1e6b      	subs	r3, r5, #1
 8008d66:	e004      	b.n	8008d72 <_dtoa_r+0x392>
 8008d68:	428b      	cmp	r3, r1
 8008d6a:	f000 8442 	beq.w	80095f2 <_dtoa_r+0xc12>
 8008d6e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8008d72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d76:	f103 0501 	add.w	r5, r3, #1
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	d0f4      	beq.n	8008d68 <_dtoa_r+0x388>
 8008d7e:	f108 0301 	add.w	r3, r8, #1
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	7013      	strb	r3, [r2, #0]
 8008d86:	4620      	mov	r0, r4
 8008d88:	4659      	mov	r1, fp
 8008d8a:	f001 f877 	bl	8009e7c <_Bfree>
 8008d8e:	2200      	movs	r2, #0
 8008d90:	9b04      	ldr	r3, [sp, #16]
 8008d92:	702a      	strb	r2, [r5, #0]
 8008d94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d96:	3301      	adds	r3, #1
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8345 	beq.w	800942c <_dtoa_r+0xa4c>
 8008da2:	9807      	ldr	r0, [sp, #28]
 8008da4:	601d      	str	r5, [r3, #0]
 8008da6:	b017      	add	sp, #92	; 0x5c
 8008da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	f000 8084 	beq.w	8008ebc <_dtoa_r+0x4dc>
 8008db4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008db6:	2a01      	cmp	r2, #1
 8008db8:	f340 8304 	ble.w	80093c4 <_dtoa_r+0x9e4>
 8008dbc:	9b06      	ldr	r3, [sp, #24]
 8008dbe:	1e5f      	subs	r7, r3, #1
 8008dc0:	9b08      	ldr	r3, [sp, #32]
 8008dc2:	42bb      	cmp	r3, r7
 8008dc4:	f2c0 83a0 	blt.w	8009508 <_dtoa_r+0xb28>
 8008dc8:	1bdf      	subs	r7, r3, r7
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f2c0 849e 	blt.w	800970e <_dtoa_r+0xd2e>
 8008dd2:	9d05      	ldr	r5, [sp, #20]
 8008dd4:	9b06      	ldr	r3, [sp, #24]
 8008dd6:	9a05      	ldr	r2, [sp, #20]
 8008dd8:	4620      	mov	r0, r4
 8008dda:	441a      	add	r2, r3
 8008ddc:	2101      	movs	r1, #1
 8008dde:	9205      	str	r2, [sp, #20]
 8008de0:	449a      	add	sl, r3
 8008de2:	f001 f8e5 	bl	8009fb0 <__i2b>
 8008de6:	4606      	mov	r6, r0
 8008de8:	b165      	cbz	r5, 8008e04 <_dtoa_r+0x424>
 8008dea:	f1ba 0f00 	cmp.w	sl, #0
 8008dee:	dd09      	ble.n	8008e04 <_dtoa_r+0x424>
 8008df0:	45aa      	cmp	sl, r5
 8008df2:	9a05      	ldr	r2, [sp, #20]
 8008df4:	4653      	mov	r3, sl
 8008df6:	bfa8      	it	ge
 8008df8:	462b      	movge	r3, r5
 8008dfa:	1ad2      	subs	r2, r2, r3
 8008dfc:	9205      	str	r2, [sp, #20]
 8008dfe:	1aed      	subs	r5, r5, r3
 8008e00:	ebc3 0a0a 	rsb	sl, r3, sl
 8008e04:	9b08      	ldr	r3, [sp, #32]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	dd1a      	ble.n	8008e40 <_dtoa_r+0x460>
 8008e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8374 	beq.w	80094fa <_dtoa_r+0xb1a>
 8008e12:	2f00      	cmp	r7, #0
 8008e14:	dd10      	ble.n	8008e38 <_dtoa_r+0x458>
 8008e16:	4631      	mov	r1, r6
 8008e18:	463a      	mov	r2, r7
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f001 f96c 	bl	800a0f8 <__pow5mult>
 8008e20:	4606      	mov	r6, r0
 8008e22:	465a      	mov	r2, fp
 8008e24:	4631      	mov	r1, r6
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 f8cc 	bl	8009fc4 <__multiply>
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	4680      	mov	r8, r0
 8008e30:	4620      	mov	r0, r4
 8008e32:	f001 f823 	bl	8009e7c <_Bfree>
 8008e36:	46c3      	mov	fp, r8
 8008e38:	9b08      	ldr	r3, [sp, #32]
 8008e3a:	1bda      	subs	r2, r3, r7
 8008e3c:	f040 82a2 	bne.w	8009384 <_dtoa_r+0x9a4>
 8008e40:	4620      	mov	r0, r4
 8008e42:	2101      	movs	r1, #1
 8008e44:	f001 f8b4 	bl	8009fb0 <__i2b>
 8008e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	4680      	mov	r8, r0
 8008e4e:	dd39      	ble.n	8008ec4 <_dtoa_r+0x4e4>
 8008e50:	4601      	mov	r1, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	4620      	mov	r0, r4
 8008e56:	f001 f94f 	bl	800a0f8 <__pow5mult>
 8008e5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	4680      	mov	r8, r0
 8008e60:	f340 8296 	ble.w	8009390 <_dtoa_r+0x9b0>
 8008e64:	f04f 0900 	mov.w	r9, #0
 8008e68:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008e6c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8008e70:	6918      	ldr	r0, [r3, #16]
 8008e72:	f001 f84f 	bl	8009f14 <__hi0bits>
 8008e76:	f1c0 0020 	rsb	r0, r0, #32
 8008e7a:	e02d      	b.n	8008ed8 <_dtoa_r+0x4f8>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e80:	e66f      	b.n	8008b62 <_dtoa_r+0x182>
 8008e82:	9804      	ldr	r0, [sp, #16]
 8008e84:	f7fd fe7a 	bl	8006b7c <__aeabi_i2d>
 8008e88:	4632      	mov	r2, r6
 8008e8a:	463b      	mov	r3, r7
 8008e8c:	f001 ff8a 	bl	800ada4 <__aeabi_dcmpeq>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f47f ae50 	bne.w	8008b36 <_dtoa_r+0x156>
 8008e96:	9b04      	ldr	r3, [sp, #16]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	9304      	str	r3, [sp, #16]
 8008e9c:	e64b      	b.n	8008b36 <_dtoa_r+0x156>
 8008e9e:	9a05      	ldr	r2, [sp, #20]
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	1ad2      	subs	r2, r2, r3
 8008ea4:	425b      	negs	r3, r3
 8008ea6:	9308      	str	r3, [sp, #32]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9205      	str	r2, [sp, #20]
 8008eac:	930a      	str	r3, [sp, #40]	; 0x28
 8008eae:	e668      	b.n	8008b82 <_dtoa_r+0x1a2>
 8008eb0:	f1ca 0300 	rsb	r3, sl, #0
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	f04f 0a00 	mov.w	sl, #0
 8008eba:	e65a      	b.n	8008b72 <_dtoa_r+0x192>
 8008ebc:	9f08      	ldr	r7, [sp, #32]
 8008ebe:	9d05      	ldr	r5, [sp, #20]
 8008ec0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ec2:	e791      	b.n	8008de8 <_dtoa_r+0x408>
 8008ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	f340 82b3 	ble.w	8009432 <_dtoa_r+0xa52>
 8008ecc:	f04f 0900 	mov.w	r9, #0
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1c8      	bne.n	8008e68 <_dtoa_r+0x488>
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	4450      	add	r0, sl
 8008eda:	f010 001f 	ands.w	r0, r0, #31
 8008ede:	f000 8081 	beq.w	8008fe4 <_dtoa_r+0x604>
 8008ee2:	f1c0 0320 	rsb	r3, r0, #32
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	f340 84b5 	ble.w	8009856 <_dtoa_r+0xe76>
 8008eec:	f1c0 001c 	rsb	r0, r0, #28
 8008ef0:	9b05      	ldr	r3, [sp, #20]
 8008ef2:	4403      	add	r3, r0
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	4405      	add	r5, r0
 8008ef8:	4482      	add	sl, r0
 8008efa:	9b05      	ldr	r3, [sp, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd05      	ble.n	8008f0c <_dtoa_r+0x52c>
 8008f00:	4659      	mov	r1, fp
 8008f02:	461a      	mov	r2, r3
 8008f04:	4620      	mov	r0, r4
 8008f06:	f001 f947 	bl	800a198 <__lshift>
 8008f0a:	4683      	mov	fp, r0
 8008f0c:	f1ba 0f00 	cmp.w	sl, #0
 8008f10:	dd05      	ble.n	8008f1e <_dtoa_r+0x53e>
 8008f12:	4641      	mov	r1, r8
 8008f14:	4652      	mov	r2, sl
 8008f16:	4620      	mov	r0, r4
 8008f18:	f001 f93e 	bl	800a198 <__lshift>
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f040 8268 	bne.w	80093f6 <_dtoa_r+0xa16>
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f340 8295 	ble.w	8009458 <_dtoa_r+0xa78>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d171      	bne.n	8009018 <_dtoa_r+0x638>
 8008f34:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008f38:	9f06      	ldr	r7, [sp, #24]
 8008f3a:	464d      	mov	r5, r9
 8008f3c:	e002      	b.n	8008f44 <_dtoa_r+0x564>
 8008f3e:	f000 ffa7 	bl	8009e90 <__multadd>
 8008f42:	4683      	mov	fp, r0
 8008f44:	4641      	mov	r1, r8
 8008f46:	4658      	mov	r0, fp
 8008f48:	f7ff fcb2 	bl	80088b0 <quorem>
 8008f4c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8008f50:	f805 cb01 	strb.w	ip, [r5], #1
 8008f54:	ebc9 0305 	rsb	r3, r9, r5
 8008f58:	42bb      	cmp	r3, r7
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	f04f 020a 	mov.w	r2, #10
 8008f62:	f04f 0300 	mov.w	r3, #0
 8008f66:	dbea      	blt.n	8008f3e <_dtoa_r+0x55e>
 8008f68:	9b07      	ldr	r3, [sp, #28]
 8008f6a:	9a06      	ldr	r2, [sp, #24]
 8008f6c:	2a01      	cmp	r2, #1
 8008f6e:	bfac      	ite	ge
 8008f70:	189b      	addge	r3, r3, r2
 8008f72:	3301      	addlt	r3, #1
 8008f74:	461d      	mov	r5, r3
 8008f76:	f04f 0a00 	mov.w	sl, #0
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f8cd c008 	str.w	ip, [sp, #8]
 8008f84:	f001 f908 	bl	800a198 <__lshift>
 8008f88:	4641      	mov	r1, r8
 8008f8a:	4683      	mov	fp, r0
 8008f8c:	f001 f95a 	bl	800a244 <__mcmp>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f8dd c008 	ldr.w	ip, [sp, #8]
 8008f96:	f340 82ed 	ble.w	8009574 <_dtoa_r+0xb94>
 8008f9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f9e:	9907      	ldr	r1, [sp, #28]
 8008fa0:	1e6b      	subs	r3, r5, #1
 8008fa2:	e004      	b.n	8008fae <_dtoa_r+0x5ce>
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	f000 8273 	beq.w	8009490 <_dtoa_r+0xab0>
 8008faa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fae:	2a39      	cmp	r2, #57	; 0x39
 8008fb0:	f103 0501 	add.w	r5, r3, #1
 8008fb4:	d0f6      	beq.n	8008fa4 <_dtoa_r+0x5c4>
 8008fb6:	3201      	adds	r2, #1
 8008fb8:	701a      	strb	r2, [r3, #0]
 8008fba:	4641      	mov	r1, r8
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 ff5d 	bl	8009e7c <_Bfree>
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	f43f aedf 	beq.w	8008d86 <_dtoa_r+0x3a6>
 8008fc8:	f1ba 0f00 	cmp.w	sl, #0
 8008fcc:	d005      	beq.n	8008fda <_dtoa_r+0x5fa>
 8008fce:	45b2      	cmp	sl, r6
 8008fd0:	d003      	beq.n	8008fda <_dtoa_r+0x5fa>
 8008fd2:	4651      	mov	r1, sl
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 ff51 	bl	8009e7c <_Bfree>
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 ff4d 	bl	8009e7c <_Bfree>
 8008fe2:	e6d0      	b.n	8008d86 <_dtoa_r+0x3a6>
 8008fe4:	201c      	movs	r0, #28
 8008fe6:	e783      	b.n	8008ef0 <_dtoa_r+0x510>
 8008fe8:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <_dtoa_r+0x61c>)
 8008fea:	9a02      	ldr	r2, [sp, #8]
 8008fec:	1b5b      	subs	r3, r3, r5
 8008fee:	fa02 f003 	lsl.w	r0, r2, r3
 8008ff2:	e56d      	b.n	8008ad0 <_dtoa_r+0xf0>
 8008ff4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ff6:	e5b4      	b.n	8008b62 <_dtoa_r+0x182>
 8008ff8:	40240000 	.word	0x40240000
 8008ffc:	fffffbee 	.word	0xfffffbee
 8009000:	4631      	mov	r1, r6
 8009002:	2300      	movs	r3, #0
 8009004:	4620      	mov	r0, r4
 8009006:	220a      	movs	r2, #10
 8009008:	f000 ff42 	bl	8009e90 <__multadd>
 800900c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800900e:	2b00      	cmp	r3, #0
 8009010:	4606      	mov	r6, r0
 8009012:	f340 8409 	ble.w	8009828 <_dtoa_r+0xe48>
 8009016:	9306      	str	r3, [sp, #24]
 8009018:	2d00      	cmp	r5, #0
 800901a:	dd05      	ble.n	8009028 <_dtoa_r+0x648>
 800901c:	4631      	mov	r1, r6
 800901e:	462a      	mov	r2, r5
 8009020:	4620      	mov	r0, r4
 8009022:	f001 f8b9 	bl	800a198 <__lshift>
 8009026:	4606      	mov	r6, r0
 8009028:	f1b9 0f00 	cmp.w	r9, #0
 800902c:	f040 82eb 	bne.w	8009606 <_dtoa_r+0xc26>
 8009030:	46b1      	mov	r9, r6
 8009032:	9b06      	ldr	r3, [sp, #24]
 8009034:	9a07      	ldr	r2, [sp, #28]
 8009036:	3b01      	subs	r3, #1
 8009038:	18d3      	adds	r3, r2, r3
 800903a:	9308      	str	r3, [sp, #32]
 800903c:	9b02      	ldr	r3, [sp, #8]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	9309      	str	r3, [sp, #36]	; 0x24
 8009044:	4617      	mov	r7, r2
 8009046:	4641      	mov	r1, r8
 8009048:	4658      	mov	r0, fp
 800904a:	f7ff fc31 	bl	80088b0 <quorem>
 800904e:	4631      	mov	r1, r6
 8009050:	4605      	mov	r5, r0
 8009052:	4658      	mov	r0, fp
 8009054:	f001 f8f6 	bl	800a244 <__mcmp>
 8009058:	464a      	mov	r2, r9
 800905a:	4682      	mov	sl, r0
 800905c:	4641      	mov	r1, r8
 800905e:	4620      	mov	r0, r4
 8009060:	f001 f914 	bl	800a28c <__mdiff>
 8009064:	68c2      	ldr	r2, [r0, #12]
 8009066:	4603      	mov	r3, r0
 8009068:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800906c:	2a00      	cmp	r2, #0
 800906e:	f040 81b8 	bne.w	80093e2 <_dtoa_r+0xa02>
 8009072:	4619      	mov	r1, r3
 8009074:	4658      	mov	r0, fp
 8009076:	f8cd c018 	str.w	ip, [sp, #24]
 800907a:	9305      	str	r3, [sp, #20]
 800907c:	f001 f8e2 	bl	800a244 <__mcmp>
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	9002      	str	r0, [sp, #8]
 8009084:	4619      	mov	r1, r3
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fef8 	bl	8009e7c <_Bfree>
 800908c:	9a02      	ldr	r2, [sp, #8]
 800908e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8009092:	b92a      	cbnz	r2, 80090a0 <_dtoa_r+0x6c0>
 8009094:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009096:	b91b      	cbnz	r3, 80090a0 <_dtoa_r+0x6c0>
 8009098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 83a8 	beq.w	80097f0 <_dtoa_r+0xe10>
 80090a0:	f1ba 0f00 	cmp.w	sl, #0
 80090a4:	f2c0 8248 	blt.w	8009538 <_dtoa_r+0xb58>
 80090a8:	d105      	bne.n	80090b6 <_dtoa_r+0x6d6>
 80090aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80090ac:	b91b      	cbnz	r3, 80090b6 <_dtoa_r+0x6d6>
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8241 	beq.w	8009538 <_dtoa_r+0xb58>
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	f300 82b9 	bgt.w	800962e <_dtoa_r+0xc4e>
 80090bc:	9b08      	ldr	r3, [sp, #32]
 80090be:	f887 c000 	strb.w	ip, [r7]
 80090c2:	f107 0a01 	add.w	sl, r7, #1
 80090c6:	429f      	cmp	r7, r3
 80090c8:	4655      	mov	r5, sl
 80090ca:	f000 82bc 	beq.w	8009646 <_dtoa_r+0xc66>
 80090ce:	4659      	mov	r1, fp
 80090d0:	220a      	movs	r2, #10
 80090d2:	2300      	movs	r3, #0
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fedb 	bl	8009e90 <__multadd>
 80090da:	454e      	cmp	r6, r9
 80090dc:	4683      	mov	fp, r0
 80090de:	4631      	mov	r1, r6
 80090e0:	4620      	mov	r0, r4
 80090e2:	f04f 020a 	mov.w	r2, #10
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	f000 8174 	beq.w	80093d6 <_dtoa_r+0x9f6>
 80090ee:	f000 fecf 	bl	8009e90 <__multadd>
 80090f2:	4649      	mov	r1, r9
 80090f4:	4606      	mov	r6, r0
 80090f6:	220a      	movs	r2, #10
 80090f8:	4620      	mov	r0, r4
 80090fa:	2300      	movs	r3, #0
 80090fc:	f000 fec8 	bl	8009e90 <__multadd>
 8009100:	4657      	mov	r7, sl
 8009102:	4681      	mov	r9, r0
 8009104:	e79f      	b.n	8009046 <_dtoa_r+0x666>
 8009106:	2301      	movs	r3, #1
 8009108:	9309      	str	r3, [sp, #36]	; 0x24
 800910a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800910c:	2b00      	cmp	r3, #0
 800910e:	f340 820a 	ble.w	8009526 <_dtoa_r+0xb46>
 8009112:	461f      	mov	r7, r3
 8009114:	461e      	mov	r6, r3
 8009116:	930c      	str	r3, [sp, #48]	; 0x30
 8009118:	9306      	str	r3, [sp, #24]
 800911a:	2100      	movs	r1, #0
 800911c:	2f17      	cmp	r7, #23
 800911e:	6461      	str	r1, [r4, #68]	; 0x44
 8009120:	d90a      	bls.n	8009138 <_dtoa_r+0x758>
 8009122:	2201      	movs	r2, #1
 8009124:	2304      	movs	r3, #4
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	f103 0014 	add.w	r0, r3, #20
 800912c:	4287      	cmp	r7, r0
 800912e:	4611      	mov	r1, r2
 8009130:	f102 0201 	add.w	r2, r2, #1
 8009134:	d2f7      	bcs.n	8009126 <_dtoa_r+0x746>
 8009136:	6461      	str	r1, [r4, #68]	; 0x44
 8009138:	4620      	mov	r0, r4
 800913a:	f000 fe79 	bl	8009e30 <_Balloc>
 800913e:	2e0e      	cmp	r6, #14
 8009140:	9007      	str	r0, [sp, #28]
 8009142:	6420      	str	r0, [r4, #64]	; 0x40
 8009144:	f63f ad5c 	bhi.w	8008c00 <_dtoa_r+0x220>
 8009148:	2d00      	cmp	r5, #0
 800914a:	f43f ad59 	beq.w	8008c00 <_dtoa_r+0x220>
 800914e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009152:	9904      	ldr	r1, [sp, #16]
 8009154:	2900      	cmp	r1, #0
 8009156:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800915a:	f340 8223 	ble.w	80095a4 <_dtoa_r+0xbc4>
 800915e:	4bb7      	ldr	r3, [pc, #732]	; (800943c <_dtoa_r+0xa5c>)
 8009160:	f001 020f 	and.w	r2, r1, #15
 8009164:	110d      	asrs	r5, r1, #4
 8009166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916a:	06e9      	lsls	r1, r5, #27
 800916c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009170:	f140 81d2 	bpl.w	8009518 <_dtoa_r+0xb38>
 8009174:	4bb2      	ldr	r3, [pc, #712]	; (8009440 <_dtoa_r+0xa60>)
 8009176:	ec51 0b17 	vmov	r0, r1, d7
 800917a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800917e:	f7fd fe8d 	bl	8006e9c <__aeabi_ddiv>
 8009182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009186:	f005 050f 	and.w	r5, r5, #15
 800918a:	f04f 0803 	mov.w	r8, #3
 800918e:	b18d      	cbz	r5, 80091b4 <_dtoa_r+0x7d4>
 8009190:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8009440 <_dtoa_r+0xa60>
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	07ea      	lsls	r2, r5, #31
 800919a:	d505      	bpl.n	80091a8 <_dtoa_r+0x7c8>
 800919c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80091a0:	f7fd fd52 	bl	8006c48 <__aeabi_dmul>
 80091a4:	f108 0801 	add.w	r8, r8, #1
 80091a8:	106d      	asrs	r5, r5, #1
 80091aa:	f109 0908 	add.w	r9, r9, #8
 80091ae:	d1f3      	bne.n	8009198 <_dtoa_r+0x7b8>
 80091b0:	4606      	mov	r6, r0
 80091b2:	460f      	mov	r7, r1
 80091b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091b8:	4632      	mov	r2, r6
 80091ba:	463b      	mov	r3, r7
 80091bc:	f7fd fe6e 	bl	8006e9c <__aeabi_ddiv>
 80091c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c6:	b143      	cbz	r3, 80091da <_dtoa_r+0x7fa>
 80091c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091cc:	2200      	movs	r2, #0
 80091ce:	4b9d      	ldr	r3, [pc, #628]	; (8009444 <_dtoa_r+0xa64>)
 80091d0:	f001 fdf2 	bl	800adb8 <__aeabi_dcmplt>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	f040 82ae 	bne.w	8009736 <_dtoa_r+0xd56>
 80091da:	4640      	mov	r0, r8
 80091dc:	f7fd fcce 	bl	8006b7c <__aeabi_i2d>
 80091e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091e4:	f7fd fd30 	bl	8006c48 <__aeabi_dmul>
 80091e8:	4b97      	ldr	r3, [pc, #604]	; (8009448 <_dtoa_r+0xa68>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7fd fb7a 	bl	80068e4 <__adddf3>
 80091f0:	9b06      	ldr	r3, [sp, #24]
 80091f2:	4606      	mov	r6, r0
 80091f4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8162 	beq.w	80094c2 <_dtoa_r+0xae2>
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009204:	9312      	str	r3, [sp, #72]	; 0x48
 8009206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 8223 	beq.w	8009654 <_dtoa_r+0xc74>
 800920e:	4b8b      	ldr	r3, [pc, #556]	; (800943c <_dtoa_r+0xa5c>)
 8009210:	498e      	ldr	r1, [pc, #568]	; (800944c <_dtoa_r+0xa6c>)
 8009212:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800921a:	2000      	movs	r0, #0
 800921c:	f7fd fe3e 	bl	8006e9c <__aeabi_ddiv>
 8009220:	4632      	mov	r2, r6
 8009222:	463b      	mov	r3, r7
 8009224:	f7fd fb5c 	bl	80068e0 <__aeabi_dsub>
 8009228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800922c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009230:	4639      	mov	r1, r7
 8009232:	4630      	mov	r0, r6
 8009234:	f001 fde8 	bl	800ae08 <__aeabi_d2iz>
 8009238:	4605      	mov	r5, r0
 800923a:	f7fd fc9f 	bl	8006b7c <__aeabi_i2d>
 800923e:	3530      	adds	r5, #48	; 0x30
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4630      	mov	r0, r6
 8009246:	4639      	mov	r1, r7
 8009248:	f7fd fb4a 	bl	80068e0 <__aeabi_dsub>
 800924c:	fa5f f885 	uxtb.w	r8, r5
 8009250:	9d07      	ldr	r5, [sp, #28]
 8009252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009256:	f885 8000 	strb.w	r8, [r5]
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	3501      	adds	r5, #1
 8009260:	f001 fdaa 	bl	800adb8 <__aeabi_dcmplt>
 8009264:	2800      	cmp	r0, #0
 8009266:	f040 82a7 	bne.w	80097b8 <_dtoa_r+0xdd8>
 800926a:	4632      	mov	r2, r6
 800926c:	463b      	mov	r3, r7
 800926e:	2000      	movs	r0, #0
 8009270:	4974      	ldr	r1, [pc, #464]	; (8009444 <_dtoa_r+0xa64>)
 8009272:	f7fd fb35 	bl	80068e0 <__aeabi_dsub>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800927e:	f001 fdb9 	bl	800adf4 <__aeabi_dcmpgt>
 8009282:	2800      	cmp	r0, #0
 8009284:	f040 82ad 	bne.w	80097e2 <_dtoa_r+0xe02>
 8009288:	f1b9 0f01 	cmp.w	r9, #1
 800928c:	f340 8184 	ble.w	8009598 <_dtoa_r+0xbb8>
 8009290:	9b07      	ldr	r3, [sp, #28]
 8009292:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8009296:	f8cd b008 	str.w	fp, [sp, #8]
 800929a:	4499      	add	r9, r3
 800929c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 80092a0:	46a0      	mov	r8, r4
 80092a2:	e00d      	b.n	80092c0 <_dtoa_r+0x8e0>
 80092a4:	2000      	movs	r0, #0
 80092a6:	4967      	ldr	r1, [pc, #412]	; (8009444 <_dtoa_r+0xa64>)
 80092a8:	f7fd fb1a 	bl	80068e0 <__aeabi_dsub>
 80092ac:	4652      	mov	r2, sl
 80092ae:	465b      	mov	r3, fp
 80092b0:	f001 fd82 	bl	800adb8 <__aeabi_dcmplt>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f040 828f 	bne.w	80097d8 <_dtoa_r+0xdf8>
 80092ba:	454d      	cmp	r5, r9
 80092bc:	f000 8167 	beq.w	800958e <_dtoa_r+0xbae>
 80092c0:	4650      	mov	r0, sl
 80092c2:	4659      	mov	r1, fp
 80092c4:	2200      	movs	r2, #0
 80092c6:	4b62      	ldr	r3, [pc, #392]	; (8009450 <_dtoa_r+0xa70>)
 80092c8:	f7fd fcbe 	bl	8006c48 <__aeabi_dmul>
 80092cc:	2200      	movs	r2, #0
 80092ce:	4b60      	ldr	r3, [pc, #384]	; (8009450 <_dtoa_r+0xa70>)
 80092d0:	4682      	mov	sl, r0
 80092d2:	468b      	mov	fp, r1
 80092d4:	4630      	mov	r0, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7fd fcb6 	bl	8006c48 <__aeabi_dmul>
 80092dc:	460f      	mov	r7, r1
 80092de:	4606      	mov	r6, r0
 80092e0:	f001 fd92 	bl	800ae08 <__aeabi_d2iz>
 80092e4:	4604      	mov	r4, r0
 80092e6:	f7fd fc49 	bl	8006b7c <__aeabi_i2d>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4630      	mov	r0, r6
 80092f0:	4639      	mov	r1, r7
 80092f2:	f7fd faf5 	bl	80068e0 <__aeabi_dsub>
 80092f6:	3430      	adds	r4, #48	; 0x30
 80092f8:	b2e4      	uxtb	r4, r4
 80092fa:	4652      	mov	r2, sl
 80092fc:	465b      	mov	r3, fp
 80092fe:	f805 4b01 	strb.w	r4, [r5], #1
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	f001 fd57 	bl	800adb8 <__aeabi_dcmplt>
 800930a:	4632      	mov	r2, r6
 800930c:	463b      	mov	r3, r7
 800930e:	2800      	cmp	r0, #0
 8009310:	d0c8      	beq.n	80092a4 <_dtoa_r+0x8c4>
 8009312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009314:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009318:	9304      	str	r3, [sp, #16]
 800931a:	4644      	mov	r4, r8
 800931c:	e533      	b.n	8008d86 <_dtoa_r+0x3a6>
 800931e:	2300      	movs	r3, #0
 8009320:	9309      	str	r3, [sp, #36]	; 0x24
 8009322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009324:	9a04      	ldr	r2, [sp, #16]
 8009326:	4413      	add	r3, r2
 8009328:	930c      	str	r3, [sp, #48]	; 0x30
 800932a:	3301      	adds	r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	9306      	str	r3, [sp, #24]
 8009330:	f340 8100 	ble.w	8009534 <_dtoa_r+0xb54>
 8009334:	9e06      	ldr	r6, [sp, #24]
 8009336:	4637      	mov	r7, r6
 8009338:	e6ef      	b.n	800911a <_dtoa_r+0x73a>
 800933a:	2300      	movs	r3, #0
 800933c:	9309      	str	r3, [sp, #36]	; 0x24
 800933e:	e6e4      	b.n	800910a <_dtoa_r+0x72a>
 8009340:	9b06      	ldr	r3, [sp, #24]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f73f ac6d 	bgt.w	8008c22 <_dtoa_r+0x242>
 8009348:	f040 80d3 	bne.w	80094f2 <_dtoa_r+0xb12>
 800934c:	4640      	mov	r0, r8
 800934e:	2200      	movs	r2, #0
 8009350:	4b40      	ldr	r3, [pc, #256]	; (8009454 <_dtoa_r+0xa74>)
 8009352:	4649      	mov	r1, r9
 8009354:	f7fd fc78 	bl	8006c48 <__aeabi_dmul>
 8009358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935c:	f001 fd40 	bl	800ade0 <__aeabi_dcmpge>
 8009360:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009364:	4646      	mov	r6, r8
 8009366:	2800      	cmp	r0, #0
 8009368:	f000 808a 	beq.w	8009480 <_dtoa_r+0xaa0>
 800936c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800936e:	9d07      	ldr	r5, [sp, #28]
 8009370:	43db      	mvns	r3, r3
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	4641      	mov	r1, r8
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fd80 	bl	8009e7c <_Bfree>
 800937c:	2e00      	cmp	r6, #0
 800937e:	f47f ae2c 	bne.w	8008fda <_dtoa_r+0x5fa>
 8009382:	e500      	b.n	8008d86 <_dtoa_r+0x3a6>
 8009384:	4659      	mov	r1, fp
 8009386:	4620      	mov	r0, r4
 8009388:	f000 feb6 	bl	800a0f8 <__pow5mult>
 800938c:	4683      	mov	fp, r0
 800938e:	e557      	b.n	8008e40 <_dtoa_r+0x460>
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f47f ad66 	bne.w	8008e64 <_dtoa_r+0x484>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f47f ad94 	bne.w	8008ecc <_dtoa_r+0x4ec>
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80093aa:	0d3f      	lsrs	r7, r7, #20
 80093ac:	053f      	lsls	r7, r7, #20
 80093ae:	2f00      	cmp	r7, #0
 80093b0:	f000 821b 	beq.w	80097ea <_dtoa_r+0xe0a>
 80093b4:	9b05      	ldr	r3, [sp, #20]
 80093b6:	3301      	adds	r3, #1
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	f10a 0a01 	add.w	sl, sl, #1
 80093be:	f04f 0901 	mov.w	r9, #1
 80093c2:	e585      	b.n	8008ed0 <_dtoa_r+0x4f0>
 80093c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093c6:	2a00      	cmp	r2, #0
 80093c8:	f000 81a7 	beq.w	800971a <_dtoa_r+0xd3a>
 80093cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093d0:	9f08      	ldr	r7, [sp, #32]
 80093d2:	9d05      	ldr	r5, [sp, #20]
 80093d4:	e4ff      	b.n	8008dd6 <_dtoa_r+0x3f6>
 80093d6:	f000 fd5b 	bl	8009e90 <__multadd>
 80093da:	4657      	mov	r7, sl
 80093dc:	4606      	mov	r6, r0
 80093de:	4681      	mov	r9, r0
 80093e0:	e631      	b.n	8009046 <_dtoa_r+0x666>
 80093e2:	4601      	mov	r1, r0
 80093e4:	4620      	mov	r0, r4
 80093e6:	f8cd c008 	str.w	ip, [sp, #8]
 80093ea:	f000 fd47 	bl	8009e7c <_Bfree>
 80093ee:	2201      	movs	r2, #1
 80093f0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80093f4:	e654      	b.n	80090a0 <_dtoa_r+0x6c0>
 80093f6:	4658      	mov	r0, fp
 80093f8:	4641      	mov	r1, r8
 80093fa:	f000 ff23 	bl	800a244 <__mcmp>
 80093fe:	2800      	cmp	r0, #0
 8009400:	f6bf ad91 	bge.w	8008f26 <_dtoa_r+0x546>
 8009404:	9f04      	ldr	r7, [sp, #16]
 8009406:	4659      	mov	r1, fp
 8009408:	2300      	movs	r3, #0
 800940a:	4620      	mov	r0, r4
 800940c:	220a      	movs	r2, #10
 800940e:	3f01      	subs	r7, #1
 8009410:	9704      	str	r7, [sp, #16]
 8009412:	f000 fd3d 	bl	8009e90 <__multadd>
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	4683      	mov	fp, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	f47f adf0 	bne.w	8009000 <_dtoa_r+0x620>
 8009420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009422:	2b00      	cmp	r3, #0
 8009424:	f340 81f5 	ble.w	8009812 <_dtoa_r+0xe32>
 8009428:	9306      	str	r3, [sp, #24]
 800942a:	e583      	b.n	8008f34 <_dtoa_r+0x554>
 800942c:	9807      	ldr	r0, [sp, #28]
 800942e:	f7ff bb0b 	b.w	8008a48 <_dtoa_r+0x68>
 8009432:	9b02      	ldr	r3, [sp, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f47f ad49 	bne.w	8008ecc <_dtoa_r+0x4ec>
 800943a:	e7ad      	b.n	8009398 <_dtoa_r+0x9b8>
 800943c:	0800b6f8 	.word	0x0800b6f8
 8009440:	0800b7c0 	.word	0x0800b7c0
 8009444:	3ff00000 	.word	0x3ff00000
 8009448:	401c0000 	.word	0x401c0000
 800944c:	3fe00000 	.word	0x3fe00000
 8009450:	40240000 	.word	0x40240000
 8009454:	40140000 	.word	0x40140000
 8009458:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800945a:	2b02      	cmp	r3, #2
 800945c:	f77f ad67 	ble.w	8008f2e <_dtoa_r+0x54e>
 8009460:	9b06      	ldr	r3, [sp, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d182      	bne.n	800936c <_dtoa_r+0x98c>
 8009466:	4641      	mov	r1, r8
 8009468:	2205      	movs	r2, #5
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fd10 	bl	8009e90 <__multadd>
 8009470:	4680      	mov	r8, r0
 8009472:	4641      	mov	r1, r8
 8009474:	4658      	mov	r0, fp
 8009476:	f000 fee5 	bl	800a244 <__mcmp>
 800947a:	2800      	cmp	r0, #0
 800947c:	f77f af76 	ble.w	800936c <_dtoa_r+0x98c>
 8009480:	9a04      	ldr	r2, [sp, #16]
 8009482:	9907      	ldr	r1, [sp, #28]
 8009484:	2331      	movs	r3, #49	; 0x31
 8009486:	3201      	adds	r2, #1
 8009488:	9204      	str	r2, [sp, #16]
 800948a:	700b      	strb	r3, [r1, #0]
 800948c:	1c4d      	adds	r5, r1, #1
 800948e:	e771      	b.n	8009374 <_dtoa_r+0x994>
 8009490:	9a04      	ldr	r2, [sp, #16]
 8009492:	3201      	adds	r2, #1
 8009494:	9204      	str	r2, [sp, #16]
 8009496:	9a07      	ldr	r2, [sp, #28]
 8009498:	2331      	movs	r3, #49	; 0x31
 800949a:	7013      	strb	r3, [r2, #0]
 800949c:	e58d      	b.n	8008fba <_dtoa_r+0x5da>
 800949e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80094a2:	9c05      	ldr	r4, [sp, #20]
 80094a4:	e46f      	b.n	8008d86 <_dtoa_r+0x3a6>
 80094a6:	4640      	mov	r0, r8
 80094a8:	f7fd fb68 	bl	8006b7c <__aeabi_i2d>
 80094ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094b0:	f7fd fbca 	bl	8006c48 <__aeabi_dmul>
 80094b4:	2200      	movs	r2, #0
 80094b6:	4bc2      	ldr	r3, [pc, #776]	; (80097c0 <_dtoa_r+0xde0>)
 80094b8:	f7fd fa14 	bl	80068e4 <__adddf3>
 80094bc:	4606      	mov	r6, r0
 80094be:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80094c2:	2200      	movs	r2, #0
 80094c4:	4bbf      	ldr	r3, [pc, #764]	; (80097c4 <_dtoa_r+0xde4>)
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	f7fd fa09 	bl	80068e0 <__aeabi_dsub>
 80094ce:	4632      	mov	r2, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	4680      	mov	r8, r0
 80094d4:	4689      	mov	r9, r1
 80094d6:	f001 fc8d 	bl	800adf4 <__aeabi_dcmpgt>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f040 80b6 	bne.w	800964c <_dtoa_r+0xc6c>
 80094e0:	4632      	mov	r2, r6
 80094e2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80094e6:	4640      	mov	r0, r8
 80094e8:	4649      	mov	r1, r9
 80094ea:	f001 fc65 	bl	800adb8 <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d052      	beq.n	8009598 <_dtoa_r+0xbb8>
 80094f2:	f04f 0800 	mov.w	r8, #0
 80094f6:	4646      	mov	r6, r8
 80094f8:	e738      	b.n	800936c <_dtoa_r+0x98c>
 80094fa:	4659      	mov	r1, fp
 80094fc:	9a08      	ldr	r2, [sp, #32]
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 fdfa 	bl	800a0f8 <__pow5mult>
 8009504:	4683      	mov	fp, r0
 8009506:	e49b      	b.n	8008e40 <_dtoa_r+0x460>
 8009508:	9b08      	ldr	r3, [sp, #32]
 800950a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800950c:	9708      	str	r7, [sp, #32]
 800950e:	1afb      	subs	r3, r7, r3
 8009510:	441a      	add	r2, r3
 8009512:	920a      	str	r2, [sp, #40]	; 0x28
 8009514:	2700      	movs	r7, #0
 8009516:	e458      	b.n	8008dca <_dtoa_r+0x3ea>
 8009518:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800951c:	f04f 0802 	mov.w	r8, #2
 8009520:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009524:	e633      	b.n	800918e <_dtoa_r+0x7ae>
 8009526:	2601      	movs	r6, #1
 8009528:	9621      	str	r6, [sp, #132]	; 0x84
 800952a:	960c      	str	r6, [sp, #48]	; 0x30
 800952c:	9606      	str	r6, [sp, #24]
 800952e:	2100      	movs	r1, #0
 8009530:	6461      	str	r1, [r4, #68]	; 0x44
 8009532:	e601      	b.n	8009138 <_dtoa_r+0x758>
 8009534:	461e      	mov	r6, r3
 8009536:	e7fa      	b.n	800952e <_dtoa_r+0xb4e>
 8009538:	2a00      	cmp	r2, #0
 800953a:	dd15      	ble.n	8009568 <_dtoa_r+0xb88>
 800953c:	4659      	mov	r1, fp
 800953e:	2201      	movs	r2, #1
 8009540:	4620      	mov	r0, r4
 8009542:	f8cd c008 	str.w	ip, [sp, #8]
 8009546:	f000 fe27 	bl	800a198 <__lshift>
 800954a:	4641      	mov	r1, r8
 800954c:	4683      	mov	fp, r0
 800954e:	f000 fe79 	bl	800a244 <__mcmp>
 8009552:	2800      	cmp	r0, #0
 8009554:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009558:	f340 8154 	ble.w	8009804 <_dtoa_r+0xe24>
 800955c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8009560:	f000 8111 	beq.w	8009786 <_dtoa_r+0xda6>
 8009564:	f10c 0c01 	add.w	ip, ip, #1
 8009568:	46b2      	mov	sl, r6
 800956a:	f887 c000 	strb.w	ip, [r7]
 800956e:	1c7d      	adds	r5, r7, #1
 8009570:	464e      	mov	r6, r9
 8009572:	e522      	b.n	8008fba <_dtoa_r+0x5da>
 8009574:	d104      	bne.n	8009580 <_dtoa_r+0xba0>
 8009576:	f01c 0f01 	tst.w	ip, #1
 800957a:	d001      	beq.n	8009580 <_dtoa_r+0xba0>
 800957c:	e50d      	b.n	8008f9a <_dtoa_r+0x5ba>
 800957e:	4615      	mov	r5, r2
 8009580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009584:	2b30      	cmp	r3, #48	; 0x30
 8009586:	f105 32ff 	add.w	r2, r5, #4294967295
 800958a:	d0f8      	beq.n	800957e <_dtoa_r+0xb9e>
 800958c:	e515      	b.n	8008fba <_dtoa_r+0x5da>
 800958e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009592:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009596:	4644      	mov	r4, r8
 8009598:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800959c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095a0:	f7ff bb2e 	b.w	8008c00 <_dtoa_r+0x220>
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	425d      	negs	r5, r3
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	f000 80bd 	beq.w	8009728 <_dtoa_r+0xd48>
 80095ae:	4b86      	ldr	r3, [pc, #536]	; (80097c8 <_dtoa_r+0xde8>)
 80095b0:	f005 020f 	and.w	r2, r5, #15
 80095b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80095c0:	f7fd fb42 	bl	8006c48 <__aeabi_dmul>
 80095c4:	112d      	asrs	r5, r5, #4
 80095c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ca:	f000 8127 	beq.w	800981c <_dtoa_r+0xe3c>
 80095ce:	4e7f      	ldr	r6, [pc, #508]	; (80097cc <_dtoa_r+0xdec>)
 80095d0:	f04f 0802 	mov.w	r8, #2
 80095d4:	07eb      	lsls	r3, r5, #31
 80095d6:	d505      	bpl.n	80095e4 <_dtoa_r+0xc04>
 80095d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095dc:	f7fd fb34 	bl	8006c48 <__aeabi_dmul>
 80095e0:	f108 0801 	add.w	r8, r8, #1
 80095e4:	106d      	asrs	r5, r5, #1
 80095e6:	f106 0608 	add.w	r6, r6, #8
 80095ea:	d1f3      	bne.n	80095d4 <_dtoa_r+0xbf4>
 80095ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095f0:	e5e8      	b.n	80091c4 <_dtoa_r+0x7e4>
 80095f2:	9a04      	ldr	r2, [sp, #16]
 80095f4:	3201      	adds	r2, #1
 80095f6:	9204      	str	r2, [sp, #16]
 80095f8:	9a07      	ldr	r2, [sp, #28]
 80095fa:	2330      	movs	r3, #48	; 0x30
 80095fc:	7013      	strb	r3, [r2, #0]
 80095fe:	2331      	movs	r3, #49	; 0x31
 8009600:	7013      	strb	r3, [r2, #0]
 8009602:	f7ff bbc0 	b.w	8008d86 <_dtoa_r+0x3a6>
 8009606:	6871      	ldr	r1, [r6, #4]
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fc11 	bl	8009e30 <_Balloc>
 800960e:	6933      	ldr	r3, [r6, #16]
 8009610:	1c9a      	adds	r2, r3, #2
 8009612:	4605      	mov	r5, r0
 8009614:	0092      	lsls	r2, r2, #2
 8009616:	f106 010c 	add.w	r1, r6, #12
 800961a:	300c      	adds	r0, #12
 800961c:	f7fd fda4 	bl	8007168 <memcpy>
 8009620:	4620      	mov	r0, r4
 8009622:	4629      	mov	r1, r5
 8009624:	2201      	movs	r2, #1
 8009626:	f000 fdb7 	bl	800a198 <__lshift>
 800962a:	4681      	mov	r9, r0
 800962c:	e501      	b.n	8009032 <_dtoa_r+0x652>
 800962e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8009632:	f000 80a8 	beq.w	8009786 <_dtoa_r+0xda6>
 8009636:	f10c 0c01 	add.w	ip, ip, #1
 800963a:	46b2      	mov	sl, r6
 800963c:	f887 c000 	strb.w	ip, [r7]
 8009640:	1c7d      	adds	r5, r7, #1
 8009642:	464e      	mov	r6, r9
 8009644:	e4b9      	b.n	8008fba <_dtoa_r+0x5da>
 8009646:	46b2      	mov	sl, r6
 8009648:	464e      	mov	r6, r9
 800964a:	e496      	b.n	8008f7a <_dtoa_r+0x59a>
 800964c:	f04f 0800 	mov.w	r8, #0
 8009650:	4646      	mov	r6, r8
 8009652:	e715      	b.n	8009480 <_dtoa_r+0xaa0>
 8009654:	495c      	ldr	r1, [pc, #368]	; (80097c8 <_dtoa_r+0xde8>)
 8009656:	f109 33ff 	add.w	r3, r9, #4294967295
 800965a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800965e:	4632      	mov	r2, r6
 8009660:	9313      	str	r3, [sp, #76]	; 0x4c
 8009662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009666:	463b      	mov	r3, r7
 8009668:	f7fd faee 	bl	8006c48 <__aeabi_dmul>
 800966c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009670:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009674:	4639      	mov	r1, r7
 8009676:	4630      	mov	r0, r6
 8009678:	f001 fbc6 	bl	800ae08 <__aeabi_d2iz>
 800967c:	4605      	mov	r5, r0
 800967e:	f7fd fa7d 	bl	8006b7c <__aeabi_i2d>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4630      	mov	r0, r6
 8009688:	4639      	mov	r1, r7
 800968a:	f7fd f929 	bl	80068e0 <__aeabi_dsub>
 800968e:	9a07      	ldr	r2, [sp, #28]
 8009690:	3530      	adds	r5, #48	; 0x30
 8009692:	f1b9 0f01 	cmp.w	r9, #1
 8009696:	7015      	strb	r5, [r2, #0]
 8009698:	4606      	mov	r6, r0
 800969a:	460f      	mov	r7, r1
 800969c:	f102 0501 	add.w	r5, r2, #1
 80096a0:	d023      	beq.n	80096ea <_dtoa_r+0xd0a>
 80096a2:	9b07      	ldr	r3, [sp, #28]
 80096a4:	f8cd a008 	str.w	sl, [sp, #8]
 80096a8:	444b      	add	r3, r9
 80096aa:	465e      	mov	r6, fp
 80096ac:	469a      	mov	sl, r3
 80096ae:	46ab      	mov	fp, r5
 80096b0:	2200      	movs	r2, #0
 80096b2:	4b47      	ldr	r3, [pc, #284]	; (80097d0 <_dtoa_r+0xdf0>)
 80096b4:	f7fd fac8 	bl	8006c48 <__aeabi_dmul>
 80096b8:	4689      	mov	r9, r1
 80096ba:	4680      	mov	r8, r0
 80096bc:	f001 fba4 	bl	800ae08 <__aeabi_d2iz>
 80096c0:	4607      	mov	r7, r0
 80096c2:	f7fd fa5b 	bl	8006b7c <__aeabi_i2d>
 80096c6:	3730      	adds	r7, #48	; 0x30
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4640      	mov	r0, r8
 80096ce:	4649      	mov	r1, r9
 80096d0:	f7fd f906 	bl	80068e0 <__aeabi_dsub>
 80096d4:	f80b 7b01 	strb.w	r7, [fp], #1
 80096d8:	45d3      	cmp	fp, sl
 80096da:	d1e9      	bne.n	80096b0 <_dtoa_r+0xcd0>
 80096dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096de:	f8dd a008 	ldr.w	sl, [sp, #8]
 80096e2:	46b3      	mov	fp, r6
 80096e4:	460f      	mov	r7, r1
 80096e6:	4606      	mov	r6, r0
 80096e8:	441d      	add	r5, r3
 80096ea:	2200      	movs	r2, #0
 80096ec:	4b39      	ldr	r3, [pc, #228]	; (80097d4 <_dtoa_r+0xdf4>)
 80096ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096f2:	f7fd f8f7 	bl	80068e4 <__adddf3>
 80096f6:	4632      	mov	r2, r6
 80096f8:	463b      	mov	r3, r7
 80096fa:	f001 fb5d 	bl	800adb8 <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d047      	beq.n	8009792 <_dtoa_r+0xdb2>
 8009702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800970a:	f7ff bb2a 	b.w	8008d62 <_dtoa_r+0x382>
 800970e:	9b05      	ldr	r3, [sp, #20]
 8009710:	9a06      	ldr	r2, [sp, #24]
 8009712:	1a9d      	subs	r5, r3, r2
 8009714:	2300      	movs	r3, #0
 8009716:	f7ff bb5e 	b.w	8008dd6 <_dtoa_r+0x3f6>
 800971a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800971c:	9f08      	ldr	r7, [sp, #32]
 800971e:	9d05      	ldr	r5, [sp, #20]
 8009720:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009724:	f7ff bb57 	b.w	8008dd6 <_dtoa_r+0x3f6>
 8009728:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800972c:	f04f 0802 	mov.w	r8, #2
 8009730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009734:	e546      	b.n	80091c4 <_dtoa_r+0x7e4>
 8009736:	9b06      	ldr	r3, [sp, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	f43f aeb4 	beq.w	80094a6 <_dtoa_r+0xac6>
 800973e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009740:	2d00      	cmp	r5, #0
 8009742:	f77f af29 	ble.w	8009598 <_dtoa_r+0xbb8>
 8009746:	2200      	movs	r2, #0
 8009748:	4b21      	ldr	r3, [pc, #132]	; (80097d0 <_dtoa_r+0xdf0>)
 800974a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974e:	f7fd fa7b 	bl	8006c48 <__aeabi_dmul>
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	f108 0001 	add.w	r0, r8, #1
 800975a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800975e:	f7fd fa0d 	bl	8006b7c <__aeabi_i2d>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4630      	mov	r0, r6
 8009768:	4639      	mov	r1, r7
 800976a:	f7fd fa6d 	bl	8006c48 <__aeabi_dmul>
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <_dtoa_r+0xde0>)
 8009770:	2200      	movs	r2, #0
 8009772:	f7fd f8b7 	bl	80068e4 <__adddf3>
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	3b01      	subs	r3, #1
 800977a:	4606      	mov	r6, r0
 800977c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8009780:	9312      	str	r3, [sp, #72]	; 0x48
 8009782:	46a9      	mov	r9, r5
 8009784:	e53f      	b.n	8009206 <_dtoa_r+0x826>
 8009786:	2239      	movs	r2, #57	; 0x39
 8009788:	46b2      	mov	sl, r6
 800978a:	703a      	strb	r2, [r7, #0]
 800978c:	464e      	mov	r6, r9
 800978e:	1c7d      	adds	r5, r7, #1
 8009790:	e405      	b.n	8008f9e <_dtoa_r+0x5be>
 8009792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009796:	2000      	movs	r0, #0
 8009798:	490e      	ldr	r1, [pc, #56]	; (80097d4 <_dtoa_r+0xdf4>)
 800979a:	f7fd f8a1 	bl	80068e0 <__aeabi_dsub>
 800979e:	4632      	mov	r2, r6
 80097a0:	463b      	mov	r3, r7
 80097a2:	f001 fb27 	bl	800adf4 <__aeabi_dcmpgt>
 80097a6:	b908      	cbnz	r0, 80097ac <_dtoa_r+0xdcc>
 80097a8:	e6f6      	b.n	8009598 <_dtoa_r+0xbb8>
 80097aa:	4615      	mov	r5, r2
 80097ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097b0:	2b30      	cmp	r3, #48	; 0x30
 80097b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80097b6:	d0f8      	beq.n	80097aa <_dtoa_r+0xdca>
 80097b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	f7ff bae3 	b.w	8008d86 <_dtoa_r+0x3a6>
 80097c0:	401c0000 	.word	0x401c0000
 80097c4:	40140000 	.word	0x40140000
 80097c8:	0800b6f8 	.word	0x0800b6f8
 80097cc:	0800b7c0 	.word	0x0800b7c0
 80097d0:	40240000 	.word	0x40240000
 80097d4:	3fe00000 	.word	0x3fe00000
 80097d8:	4643      	mov	r3, r8
 80097da:	f8dd b008 	ldr.w	fp, [sp, #8]
 80097de:	46a0      	mov	r8, r4
 80097e0:	461c      	mov	r4, r3
 80097e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	f7ff babc 	b.w	8008d62 <_dtoa_r+0x382>
 80097ea:	46b9      	mov	r9, r7
 80097ec:	f7ff bb70 	b.w	8008ed0 <_dtoa_r+0x4f0>
 80097f0:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80097f4:	d0c7      	beq.n	8009786 <_dtoa_r+0xda6>
 80097f6:	f1ba 0f00 	cmp.w	sl, #0
 80097fa:	f77f aeb5 	ble.w	8009568 <_dtoa_r+0xb88>
 80097fe:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8009802:	e6b1      	b.n	8009568 <_dtoa_r+0xb88>
 8009804:	f47f aeb0 	bne.w	8009568 <_dtoa_r+0xb88>
 8009808:	f01c 0f01 	tst.w	ip, #1
 800980c:	f43f aeac 	beq.w	8009568 <_dtoa_r+0xb88>
 8009810:	e6a4      	b.n	800955c <_dtoa_r+0xb7c>
 8009812:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009814:	2b02      	cmp	r3, #2
 8009816:	dc04      	bgt.n	8009822 <_dtoa_r+0xe42>
 8009818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800981a:	e605      	b.n	8009428 <_dtoa_r+0xa48>
 800981c:	f04f 0802 	mov.w	r8, #2
 8009820:	e4d0      	b.n	80091c4 <_dtoa_r+0x7e4>
 8009822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009824:	9306      	str	r3, [sp, #24]
 8009826:	e61b      	b.n	8009460 <_dtoa_r+0xa80>
 8009828:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800982a:	2b02      	cmp	r3, #2
 800982c:	dcf9      	bgt.n	8009822 <_dtoa_r+0xe42>
 800982e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009830:	f7ff bbf1 	b.w	8009016 <_dtoa_r+0x636>
 8009834:	2500      	movs	r5, #0
 8009836:	6465      	str	r5, [r4, #68]	; 0x44
 8009838:	4629      	mov	r1, r5
 800983a:	4620      	mov	r0, r4
 800983c:	f000 faf8 	bl	8009e30 <_Balloc>
 8009840:	f04f 33ff 	mov.w	r3, #4294967295
 8009844:	9306      	str	r3, [sp, #24]
 8009846:	930c      	str	r3, [sp, #48]	; 0x30
 8009848:	2301      	movs	r3, #1
 800984a:	9007      	str	r0, [sp, #28]
 800984c:	9521      	str	r5, [sp, #132]	; 0x84
 800984e:	6420      	str	r0, [r4, #64]	; 0x40
 8009850:	9309      	str	r3, [sp, #36]	; 0x24
 8009852:	f7ff b9d5 	b.w	8008c00 <_dtoa_r+0x220>
 8009856:	f43f ab50 	beq.w	8008efa <_dtoa_r+0x51a>
 800985a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800985e:	f7ff bb47 	b.w	8008ef0 <_dtoa_r+0x510>
 8009862:	2301      	movs	r3, #1
 8009864:	9309      	str	r3, [sp, #36]	; 0x24
 8009866:	e55c      	b.n	8009322 <_dtoa_r+0x942>
 8009868:	2501      	movs	r5, #1
 800986a:	f7ff b993 	b.w	8008b94 <_dtoa_r+0x1b4>
 800986e:	bf00      	nop

08009870 <_localeconv_r>:
 8009870:	4800      	ldr	r0, [pc, #0]	; (8009874 <_localeconv_r+0x4>)
 8009872:	4770      	bx	lr
 8009874:	200004b4 	.word	0x200004b4

08009878 <_malloc_r>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	f101 050b 	add.w	r5, r1, #11
 8009880:	2d16      	cmp	r5, #22
 8009882:	b083      	sub	sp, #12
 8009884:	4606      	mov	r6, r0
 8009886:	d927      	bls.n	80098d8 <_malloc_r+0x60>
 8009888:	f035 0507 	bics.w	r5, r5, #7
 800988c:	f100 80b6 	bmi.w	80099fc <_malloc_r+0x184>
 8009890:	42a9      	cmp	r1, r5
 8009892:	f200 80b3 	bhi.w	80099fc <_malloc_r+0x184>
 8009896:	f000 fac7 	bl	8009e28 <__malloc_lock>
 800989a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800989e:	d222      	bcs.n	80098e6 <_malloc_r+0x6e>
 80098a0:	4fc2      	ldr	r7, [pc, #776]	; (8009bac <_malloc_r+0x334>)
 80098a2:	08e8      	lsrs	r0, r5, #3
 80098a4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 80098a8:	68dc      	ldr	r4, [r3, #12]
 80098aa:	429c      	cmp	r4, r3
 80098ac:	f000 81c9 	beq.w	8009c42 <_malloc_r+0x3ca>
 80098b0:	6863      	ldr	r3, [r4, #4]
 80098b2:	68e1      	ldr	r1, [r4, #12]
 80098b4:	68a5      	ldr	r5, [r4, #8]
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	4423      	add	r3, r4
 80098bc:	4630      	mov	r0, r6
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	60e9      	str	r1, [r5, #12]
 80098c2:	f042 0201 	orr.w	r2, r2, #1
 80098c6:	608d      	str	r5, [r1, #8]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	f000 faaf 	bl	8009e2c <__malloc_unlock>
 80098ce:	3408      	adds	r4, #8
 80098d0:	4620      	mov	r0, r4
 80098d2:	b003      	add	sp, #12
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	2910      	cmp	r1, #16
 80098da:	f200 808f 	bhi.w	80099fc <_malloc_r+0x184>
 80098de:	f000 faa3 	bl	8009e28 <__malloc_lock>
 80098e2:	2510      	movs	r5, #16
 80098e4:	e7dc      	b.n	80098a0 <_malloc_r+0x28>
 80098e6:	0a68      	lsrs	r0, r5, #9
 80098e8:	f000 808f 	beq.w	8009a0a <_malloc_r+0x192>
 80098ec:	2804      	cmp	r0, #4
 80098ee:	f200 8154 	bhi.w	8009b9a <_malloc_r+0x322>
 80098f2:	09a8      	lsrs	r0, r5, #6
 80098f4:	3038      	adds	r0, #56	; 0x38
 80098f6:	0041      	lsls	r1, r0, #1
 80098f8:	4fac      	ldr	r7, [pc, #688]	; (8009bac <_malloc_r+0x334>)
 80098fa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80098fe:	68cc      	ldr	r4, [r1, #12]
 8009900:	42a1      	cmp	r1, r4
 8009902:	d106      	bne.n	8009912 <_malloc_r+0x9a>
 8009904:	e00c      	b.n	8009920 <_malloc_r+0xa8>
 8009906:	2a00      	cmp	r2, #0
 8009908:	f280 8082 	bge.w	8009a10 <_malloc_r+0x198>
 800990c:	68e4      	ldr	r4, [r4, #12]
 800990e:	42a1      	cmp	r1, r4
 8009910:	d006      	beq.n	8009920 <_malloc_r+0xa8>
 8009912:	6863      	ldr	r3, [r4, #4]
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	1b5a      	subs	r2, r3, r5
 800991a:	2a0f      	cmp	r2, #15
 800991c:	ddf3      	ble.n	8009906 <_malloc_r+0x8e>
 800991e:	3801      	subs	r0, #1
 8009920:	3001      	adds	r0, #1
 8009922:	49a2      	ldr	r1, [pc, #648]	; (8009bac <_malloc_r+0x334>)
 8009924:	693c      	ldr	r4, [r7, #16]
 8009926:	f101 0e08 	add.w	lr, r1, #8
 800992a:	4574      	cmp	r4, lr
 800992c:	f000 817e 	beq.w	8009c2c <_malloc_r+0x3b4>
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	f023 0303 	bic.w	r3, r3, #3
 8009936:	1b5a      	subs	r2, r3, r5
 8009938:	2a0f      	cmp	r2, #15
 800993a:	f300 8164 	bgt.w	8009c06 <_malloc_r+0x38e>
 800993e:	2a00      	cmp	r2, #0
 8009940:	f8c1 e014 	str.w	lr, [r1, #20]
 8009944:	f8c1 e010 	str.w	lr, [r1, #16]
 8009948:	da73      	bge.n	8009a32 <_malloc_r+0x1ba>
 800994a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800994e:	f080 8139 	bcs.w	8009bc4 <_malloc_r+0x34c>
 8009952:	08db      	lsrs	r3, r3, #3
 8009954:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8009958:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 800995c:	684a      	ldr	r2, [r1, #4]
 800995e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8009962:	f8c4 9008 	str.w	r9, [r4, #8]
 8009966:	2301      	movs	r3, #1
 8009968:	fa03 f30c 	lsl.w	r3, r3, ip
 800996c:	4313      	orrs	r3, r2
 800996e:	f8c4 800c 	str.w	r8, [r4, #12]
 8009972:	604b      	str	r3, [r1, #4]
 8009974:	f8c8 4008 	str.w	r4, [r8, #8]
 8009978:	f8c9 400c 	str.w	r4, [r9, #12]
 800997c:	1082      	asrs	r2, r0, #2
 800997e:	2401      	movs	r4, #1
 8009980:	4094      	lsls	r4, r2
 8009982:	429c      	cmp	r4, r3
 8009984:	d862      	bhi.n	8009a4c <_malloc_r+0x1d4>
 8009986:	4223      	tst	r3, r4
 8009988:	d106      	bne.n	8009998 <_malloc_r+0x120>
 800998a:	f020 0003 	bic.w	r0, r0, #3
 800998e:	0064      	lsls	r4, r4, #1
 8009990:	4223      	tst	r3, r4
 8009992:	f100 0004 	add.w	r0, r0, #4
 8009996:	d0fa      	beq.n	800998e <_malloc_r+0x116>
 8009998:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 800999c:	46c4      	mov	ip, r8
 800999e:	4681      	mov	r9, r0
 80099a0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80099a4:	459c      	cmp	ip, r3
 80099a6:	d107      	bne.n	80099b8 <_malloc_r+0x140>
 80099a8:	e142      	b.n	8009c30 <_malloc_r+0x3b8>
 80099aa:	2900      	cmp	r1, #0
 80099ac:	f280 8152 	bge.w	8009c54 <_malloc_r+0x3dc>
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	459c      	cmp	ip, r3
 80099b4:	f000 813c 	beq.w	8009c30 <_malloc_r+0x3b8>
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	f022 0203 	bic.w	r2, r2, #3
 80099be:	1b51      	subs	r1, r2, r5
 80099c0:	290f      	cmp	r1, #15
 80099c2:	ddf2      	ble.n	80099aa <_malloc_r+0x132>
 80099c4:	461c      	mov	r4, r3
 80099c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80099ca:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80099ce:	195a      	adds	r2, r3, r5
 80099d0:	f045 0901 	orr.w	r9, r5, #1
 80099d4:	f041 0501 	orr.w	r5, r1, #1
 80099d8:	f8c3 9004 	str.w	r9, [r3, #4]
 80099dc:	4630      	mov	r0, r6
 80099de:	f8c8 c00c 	str.w	ip, [r8, #12]
 80099e2:	f8cc 8008 	str.w	r8, [ip, #8]
 80099e6:	617a      	str	r2, [r7, #20]
 80099e8:	613a      	str	r2, [r7, #16]
 80099ea:	f8c2 e00c 	str.w	lr, [r2, #12]
 80099ee:	f8c2 e008 	str.w	lr, [r2, #8]
 80099f2:	6055      	str	r5, [r2, #4]
 80099f4:	5051      	str	r1, [r2, r1]
 80099f6:	f000 fa19 	bl	8009e2c <__malloc_unlock>
 80099fa:	e769      	b.n	80098d0 <_malloc_r+0x58>
 80099fc:	2400      	movs	r4, #0
 80099fe:	230c      	movs	r3, #12
 8009a00:	4620      	mov	r0, r4
 8009a02:	6033      	str	r3, [r6, #0]
 8009a04:	b003      	add	sp, #12
 8009a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0a:	217e      	movs	r1, #126	; 0x7e
 8009a0c:	203f      	movs	r0, #63	; 0x3f
 8009a0e:	e773      	b.n	80098f8 <_malloc_r+0x80>
 8009a10:	4423      	add	r3, r4
 8009a12:	68e1      	ldr	r1, [r4, #12]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68a5      	ldr	r5, [r4, #8]
 8009a18:	f042 0201 	orr.w	r2, r2, #1
 8009a1c:	60e9      	str	r1, [r5, #12]
 8009a1e:	4630      	mov	r0, r6
 8009a20:	608d      	str	r5, [r1, #8]
 8009a22:	605a      	str	r2, [r3, #4]
 8009a24:	f000 fa02 	bl	8009e2c <__malloc_unlock>
 8009a28:	3408      	adds	r4, #8
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	b003      	add	sp, #12
 8009a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a32:	4423      	add	r3, r4
 8009a34:	4630      	mov	r0, r6
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	f042 0201 	orr.w	r2, r2, #1
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	f000 f9f5 	bl	8009e2c <__malloc_unlock>
 8009a42:	3408      	adds	r4, #8
 8009a44:	4620      	mov	r0, r4
 8009a46:	b003      	add	sp, #12
 8009a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4c:	68bc      	ldr	r4, [r7, #8]
 8009a4e:	6863      	ldr	r3, [r4, #4]
 8009a50:	f023 0803 	bic.w	r8, r3, #3
 8009a54:	4545      	cmp	r5, r8
 8009a56:	d804      	bhi.n	8009a62 <_malloc_r+0x1ea>
 8009a58:	ebc5 0308 	rsb	r3, r5, r8
 8009a5c:	2b0f      	cmp	r3, #15
 8009a5e:	f300 808c 	bgt.w	8009b7a <_malloc_r+0x302>
 8009a62:	4b53      	ldr	r3, [pc, #332]	; (8009bb0 <_malloc_r+0x338>)
 8009a64:	f8df a158 	ldr.w	sl, [pc, #344]	; 8009bc0 <_malloc_r+0x348>
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	f8da 3000 	ldr.w	r3, [sl]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	442a      	add	r2, r5
 8009a72:	eb04 0b08 	add.w	fp, r4, r8
 8009a76:	f000 8150 	beq.w	8009d1a <_malloc_r+0x4a2>
 8009a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a7e:	320f      	adds	r2, #15
 8009a80:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8009a84:	f022 020f 	bic.w	r2, r2, #15
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	9201      	str	r2, [sp, #4]
 8009a8e:	f000 fcef 	bl	800a470 <_sbrk_r>
 8009a92:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a96:	4681      	mov	r9, r0
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	f000 80f5 	beq.w	8009c88 <_malloc_r+0x410>
 8009a9e:	4583      	cmp	fp, r0
 8009aa0:	f200 80ef 	bhi.w	8009c82 <_malloc_r+0x40a>
 8009aa4:	4b43      	ldr	r3, [pc, #268]	; (8009bb4 <_malloc_r+0x33c>)
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	45cb      	cmp	fp, r9
 8009aaa:	4411      	add	r1, r2
 8009aac:	6019      	str	r1, [r3, #0]
 8009aae:	f000 813d 	beq.w	8009d2c <_malloc_r+0x4b4>
 8009ab2:	f8da 0000 	ldr.w	r0, [sl]
 8009ab6:	f8df e108 	ldr.w	lr, [pc, #264]	; 8009bc0 <_malloc_r+0x348>
 8009aba:	3001      	adds	r0, #1
 8009abc:	bf1b      	ittet	ne
 8009abe:	ebcb 0b09 	rsbne	fp, fp, r9
 8009ac2:	4459      	addne	r1, fp
 8009ac4:	f8ce 9000 	streq.w	r9, [lr]
 8009ac8:	6019      	strne	r1, [r3, #0]
 8009aca:	f019 0107 	ands.w	r1, r9, #7
 8009ace:	f000 8107 	beq.w	8009ce0 <_malloc_r+0x468>
 8009ad2:	f1c1 0008 	rsb	r0, r1, #8
 8009ad6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8009ada:	4481      	add	r9, r0
 8009adc:	3108      	adds	r1, #8
 8009ade:	444a      	add	r2, r9
 8009ae0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009ae4:	ebc2 0a01 	rsb	sl, r2, r1
 8009ae8:	4651      	mov	r1, sl
 8009aea:	4630      	mov	r0, r6
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	f000 fcbf 	bl	800a470 <_sbrk_r>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	f000 8127 	beq.w	8009d48 <_malloc_r+0x4d0>
 8009afa:	ebc9 0200 	rsb	r2, r9, r0
 8009afe:	4452      	add	r2, sl
 8009b00:	f042 0201 	orr.w	r2, r2, #1
 8009b04:	6819      	ldr	r1, [r3, #0]
 8009b06:	f8c7 9008 	str.w	r9, [r7, #8]
 8009b0a:	4451      	add	r1, sl
 8009b0c:	42bc      	cmp	r4, r7
 8009b0e:	f8c9 2004 	str.w	r2, [r9, #4]
 8009b12:	6019      	str	r1, [r3, #0]
 8009b14:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8009bb4 <_malloc_r+0x33c>
 8009b18:	d016      	beq.n	8009b48 <_malloc_r+0x2d0>
 8009b1a:	f1b8 0f0f 	cmp.w	r8, #15
 8009b1e:	f240 80e2 	bls.w	8009ce6 <_malloc_r+0x46e>
 8009b22:	6862      	ldr	r2, [r4, #4]
 8009b24:	f1a8 030c 	sub.w	r3, r8, #12
 8009b28:	f023 0307 	bic.w	r3, r3, #7
 8009b2c:	18e0      	adds	r0, r4, r3
 8009b2e:	f002 0201 	and.w	r2, r2, #1
 8009b32:	f04f 0e05 	mov.w	lr, #5
 8009b36:	431a      	orrs	r2, r3
 8009b38:	2b0f      	cmp	r3, #15
 8009b3a:	6062      	str	r2, [r4, #4]
 8009b3c:	f8c0 e004 	str.w	lr, [r0, #4]
 8009b40:	f8c0 e008 	str.w	lr, [r0, #8]
 8009b44:	f200 8104 	bhi.w	8009d50 <_malloc_r+0x4d8>
 8009b48:	4b1b      	ldr	r3, [pc, #108]	; (8009bb8 <_malloc_r+0x340>)
 8009b4a:	68bc      	ldr	r4, [r7, #8]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	bf88      	it	hi
 8009b52:	6019      	strhi	r1, [r3, #0]
 8009b54:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <_malloc_r+0x344>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	4291      	cmp	r1, r2
 8009b5a:	6862      	ldr	r2, [r4, #4]
 8009b5c:	bf88      	it	hi
 8009b5e:	6019      	strhi	r1, [r3, #0]
 8009b60:	f022 0203 	bic.w	r2, r2, #3
 8009b64:	4295      	cmp	r5, r2
 8009b66:	eba2 0305 	sub.w	r3, r2, r5
 8009b6a:	d801      	bhi.n	8009b70 <_malloc_r+0x2f8>
 8009b6c:	2b0f      	cmp	r3, #15
 8009b6e:	dc04      	bgt.n	8009b7a <_malloc_r+0x302>
 8009b70:	4630      	mov	r0, r6
 8009b72:	f000 f95b 	bl	8009e2c <__malloc_unlock>
 8009b76:	2400      	movs	r4, #0
 8009b78:	e6aa      	b.n	80098d0 <_malloc_r+0x58>
 8009b7a:	1962      	adds	r2, r4, r5
 8009b7c:	f043 0301 	orr.w	r3, r3, #1
 8009b80:	f045 0501 	orr.w	r5, r5, #1
 8009b84:	6065      	str	r5, [r4, #4]
 8009b86:	4630      	mov	r0, r6
 8009b88:	60ba      	str	r2, [r7, #8]
 8009b8a:	6053      	str	r3, [r2, #4]
 8009b8c:	f000 f94e 	bl	8009e2c <__malloc_unlock>
 8009b90:	3408      	adds	r4, #8
 8009b92:	4620      	mov	r0, r4
 8009b94:	b003      	add	sp, #12
 8009b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9a:	2814      	cmp	r0, #20
 8009b9c:	d969      	bls.n	8009c72 <_malloc_r+0x3fa>
 8009b9e:	2854      	cmp	r0, #84	; 0x54
 8009ba0:	f200 8097 	bhi.w	8009cd2 <_malloc_r+0x45a>
 8009ba4:	0b28      	lsrs	r0, r5, #12
 8009ba6:	306e      	adds	r0, #110	; 0x6e
 8009ba8:	0041      	lsls	r1, r0, #1
 8009baa:	e6a5      	b.n	80098f8 <_malloc_r+0x80>
 8009bac:	200004ec 	.word	0x200004ec
 8009bb0:	20000974 	.word	0x20000974
 8009bb4:	20000978 	.word	0x20000978
 8009bb8:	20000970 	.word	0x20000970
 8009bbc:	2000096c 	.word	0x2000096c
 8009bc0:	200008f8 	.word	0x200008f8
 8009bc4:	0a5a      	lsrs	r2, r3, #9
 8009bc6:	2a04      	cmp	r2, #4
 8009bc8:	d956      	bls.n	8009c78 <_malloc_r+0x400>
 8009bca:	2a14      	cmp	r2, #20
 8009bcc:	f200 80a7 	bhi.w	8009d1e <_malloc_r+0x4a6>
 8009bd0:	325b      	adds	r2, #91	; 0x5b
 8009bd2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009bd6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8009bda:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8009d90 <_malloc_r+0x518>
 8009bde:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009be2:	4561      	cmp	r1, ip
 8009be4:	f000 8085 	beq.w	8009cf2 <_malloc_r+0x47a>
 8009be8:	684a      	ldr	r2, [r1, #4]
 8009bea:	f022 0203 	bic.w	r2, r2, #3
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d202      	bcs.n	8009bf8 <_malloc_r+0x380>
 8009bf2:	6889      	ldr	r1, [r1, #8]
 8009bf4:	458c      	cmp	ip, r1
 8009bf6:	d1f7      	bne.n	8009be8 <_malloc_r+0x370>
 8009bf8:	68ca      	ldr	r2, [r1, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	60e2      	str	r2, [r4, #12]
 8009bfe:	60a1      	str	r1, [r4, #8]
 8009c00:	6094      	str	r4, [r2, #8]
 8009c02:	60cc      	str	r4, [r1, #12]
 8009c04:	e6ba      	b.n	800997c <_malloc_r+0x104>
 8009c06:	1963      	adds	r3, r4, r5
 8009c08:	f042 0701 	orr.w	r7, r2, #1
 8009c0c:	f045 0501 	orr.w	r5, r5, #1
 8009c10:	6065      	str	r5, [r4, #4]
 8009c12:	4630      	mov	r0, r6
 8009c14:	614b      	str	r3, [r1, #20]
 8009c16:	610b      	str	r3, [r1, #16]
 8009c18:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009c1c:	f8c3 e008 	str.w	lr, [r3, #8]
 8009c20:	605f      	str	r7, [r3, #4]
 8009c22:	509a      	str	r2, [r3, r2]
 8009c24:	3408      	adds	r4, #8
 8009c26:	f000 f901 	bl	8009e2c <__malloc_unlock>
 8009c2a:	e651      	b.n	80098d0 <_malloc_r+0x58>
 8009c2c:	684b      	ldr	r3, [r1, #4]
 8009c2e:	e6a5      	b.n	800997c <_malloc_r+0x104>
 8009c30:	f109 0901 	add.w	r9, r9, #1
 8009c34:	f019 0f03 	tst.w	r9, #3
 8009c38:	f10c 0c08 	add.w	ip, ip, #8
 8009c3c:	f47f aeb0 	bne.w	80099a0 <_malloc_r+0x128>
 8009c40:	e02b      	b.n	8009c9a <_malloc_r+0x422>
 8009c42:	f104 0308 	add.w	r3, r4, #8
 8009c46:	6964      	ldr	r4, [r4, #20]
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	bf08      	it	eq
 8009c4c:	3002      	addeq	r0, #2
 8009c4e:	f43f ae68 	beq.w	8009922 <_malloc_r+0xaa>
 8009c52:	e62d      	b.n	80098b0 <_malloc_r+0x38>
 8009c54:	441a      	add	r2, r3
 8009c56:	461c      	mov	r4, r3
 8009c58:	6851      	ldr	r1, [r2, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8009c60:	f041 0101 	orr.w	r1, r1, #1
 8009c64:	6051      	str	r1, [r2, #4]
 8009c66:	4630      	mov	r0, r6
 8009c68:	60eb      	str	r3, [r5, #12]
 8009c6a:	609d      	str	r5, [r3, #8]
 8009c6c:	f000 f8de 	bl	8009e2c <__malloc_unlock>
 8009c70:	e62e      	b.n	80098d0 <_malloc_r+0x58>
 8009c72:	305b      	adds	r0, #91	; 0x5b
 8009c74:	0041      	lsls	r1, r0, #1
 8009c76:	e63f      	b.n	80098f8 <_malloc_r+0x80>
 8009c78:	099a      	lsrs	r2, r3, #6
 8009c7a:	3238      	adds	r2, #56	; 0x38
 8009c7c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009c80:	e7a9      	b.n	8009bd6 <_malloc_r+0x35e>
 8009c82:	42bc      	cmp	r4, r7
 8009c84:	f43f af0e 	beq.w	8009aa4 <_malloc_r+0x22c>
 8009c88:	68bc      	ldr	r4, [r7, #8]
 8009c8a:	6862      	ldr	r2, [r4, #4]
 8009c8c:	f022 0203 	bic.w	r2, r2, #3
 8009c90:	e768      	b.n	8009b64 <_malloc_r+0x2ec>
 8009c92:	f8d8 8000 	ldr.w	r8, [r8]
 8009c96:	4598      	cmp	r8, r3
 8009c98:	d177      	bne.n	8009d8a <_malloc_r+0x512>
 8009c9a:	f010 0f03 	tst.w	r0, #3
 8009c9e:	f1a8 0308 	sub.w	r3, r8, #8
 8009ca2:	f100 30ff 	add.w	r0, r0, #4294967295
 8009ca6:	d1f4      	bne.n	8009c92 <_malloc_r+0x41a>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	ea23 0304 	bic.w	r3, r3, r4
 8009cae:	607b      	str	r3, [r7, #4]
 8009cb0:	0064      	lsls	r4, r4, #1
 8009cb2:	429c      	cmp	r4, r3
 8009cb4:	f63f aeca 	bhi.w	8009a4c <_malloc_r+0x1d4>
 8009cb8:	2c00      	cmp	r4, #0
 8009cba:	f43f aec7 	beq.w	8009a4c <_malloc_r+0x1d4>
 8009cbe:	4223      	tst	r3, r4
 8009cc0:	4648      	mov	r0, r9
 8009cc2:	f47f ae69 	bne.w	8009998 <_malloc_r+0x120>
 8009cc6:	0064      	lsls	r4, r4, #1
 8009cc8:	4223      	tst	r3, r4
 8009cca:	f100 0004 	add.w	r0, r0, #4
 8009cce:	d0fa      	beq.n	8009cc6 <_malloc_r+0x44e>
 8009cd0:	e662      	b.n	8009998 <_malloc_r+0x120>
 8009cd2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8009cd6:	d818      	bhi.n	8009d0a <_malloc_r+0x492>
 8009cd8:	0be8      	lsrs	r0, r5, #15
 8009cda:	3077      	adds	r0, #119	; 0x77
 8009cdc:	0041      	lsls	r1, r0, #1
 8009cde:	e60b      	b.n	80098f8 <_malloc_r+0x80>
 8009ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ce4:	e6fb      	b.n	8009ade <_malloc_r+0x266>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f8c9 3004 	str.w	r3, [r9, #4]
 8009cec:	464c      	mov	r4, r9
 8009cee:	2200      	movs	r2, #0
 8009cf0:	e738      	b.n	8009b64 <_malloc_r+0x2ec>
 8009cf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cf6:	1092      	asrs	r2, r2, #2
 8009cf8:	f04f 0c01 	mov.w	ip, #1
 8009cfc:	fa0c f202 	lsl.w	r2, ip, r2
 8009d00:	4313      	orrs	r3, r2
 8009d02:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d06:	460a      	mov	r2, r1
 8009d08:	e778      	b.n	8009bfc <_malloc_r+0x384>
 8009d0a:	f240 5354 	movw	r3, #1364	; 0x554
 8009d0e:	4298      	cmp	r0, r3
 8009d10:	d817      	bhi.n	8009d42 <_malloc_r+0x4ca>
 8009d12:	0ca8      	lsrs	r0, r5, #18
 8009d14:	307c      	adds	r0, #124	; 0x7c
 8009d16:	0041      	lsls	r1, r0, #1
 8009d18:	e5ee      	b.n	80098f8 <_malloc_r+0x80>
 8009d1a:	3210      	adds	r2, #16
 8009d1c:	e6b4      	b.n	8009a88 <_malloc_r+0x210>
 8009d1e:	2a54      	cmp	r2, #84	; 0x54
 8009d20:	d81e      	bhi.n	8009d60 <_malloc_r+0x4e8>
 8009d22:	0b1a      	lsrs	r2, r3, #12
 8009d24:	326e      	adds	r2, #110	; 0x6e
 8009d26:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009d2a:	e754      	b.n	8009bd6 <_malloc_r+0x35e>
 8009d2c:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8009d30:	2800      	cmp	r0, #0
 8009d32:	f47f aebe 	bne.w	8009ab2 <_malloc_r+0x23a>
 8009d36:	4442      	add	r2, r8
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	605a      	str	r2, [r3, #4]
 8009d40:	e702      	b.n	8009b48 <_malloc_r+0x2d0>
 8009d42:	21fc      	movs	r1, #252	; 0xfc
 8009d44:	207e      	movs	r0, #126	; 0x7e
 8009d46:	e5d7      	b.n	80098f8 <_malloc_r+0x80>
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f04f 0a00 	mov.w	sl, #0
 8009d4e:	e6d9      	b.n	8009b04 <_malloc_r+0x28c>
 8009d50:	f104 0108 	add.w	r1, r4, #8
 8009d54:	4630      	mov	r0, r6
 8009d56:	f000 fc9d 	bl	800a694 <_free_r>
 8009d5a:	f8da 1000 	ldr.w	r1, [sl]
 8009d5e:	e6f3      	b.n	8009b48 <_malloc_r+0x2d0>
 8009d60:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009d64:	d804      	bhi.n	8009d70 <_malloc_r+0x4f8>
 8009d66:	0bda      	lsrs	r2, r3, #15
 8009d68:	3277      	adds	r2, #119	; 0x77
 8009d6a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009d6e:	e732      	b.n	8009bd6 <_malloc_r+0x35e>
 8009d70:	f240 5154 	movw	r1, #1364	; 0x554
 8009d74:	428a      	cmp	r2, r1
 8009d76:	d804      	bhi.n	8009d82 <_malloc_r+0x50a>
 8009d78:	0c9a      	lsrs	r2, r3, #18
 8009d7a:	327c      	adds	r2, #124	; 0x7c
 8009d7c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009d80:	e729      	b.n	8009bd6 <_malloc_r+0x35e>
 8009d82:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8009d86:	227e      	movs	r2, #126	; 0x7e
 8009d88:	e725      	b.n	8009bd6 <_malloc_r+0x35e>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	e790      	b.n	8009cb0 <_malloc_r+0x438>
 8009d8e:	bf00      	nop
 8009d90:	200004ec 	.word	0x200004ec

08009d94 <memchr>:
 8009d94:	0783      	lsls	r3, r0, #30
 8009d96:	b470      	push	{r4, r5, r6}
 8009d98:	b2c9      	uxtb	r1, r1
 8009d9a:	d040      	beq.n	8009e1e <memchr+0x8a>
 8009d9c:	1e54      	subs	r4, r2, #1
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	d03f      	beq.n	8009e22 <memchr+0x8e>
 8009da2:	7803      	ldrb	r3, [r0, #0]
 8009da4:	428b      	cmp	r3, r1
 8009da6:	bf18      	it	ne
 8009da8:	1c43      	addne	r3, r0, #1
 8009daa:	d106      	bne.n	8009dba <memchr+0x26>
 8009dac:	e01d      	b.n	8009dea <memchr+0x56>
 8009dae:	b1f4      	cbz	r4, 8009dee <memchr+0x5a>
 8009db0:	7802      	ldrb	r2, [r0, #0]
 8009db2:	428a      	cmp	r2, r1
 8009db4:	f104 34ff 	add.w	r4, r4, #4294967295
 8009db8:	d017      	beq.n	8009dea <memchr+0x56>
 8009dba:	f013 0f03 	tst.w	r3, #3
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f103 0301 	add.w	r3, r3, #1
 8009dc4:	d1f3      	bne.n	8009dae <memchr+0x1a>
 8009dc6:	2c03      	cmp	r4, #3
 8009dc8:	d814      	bhi.n	8009df4 <memchr+0x60>
 8009dca:	b184      	cbz	r4, 8009dee <memchr+0x5a>
 8009dcc:	7803      	ldrb	r3, [r0, #0]
 8009dce:	428b      	cmp	r3, r1
 8009dd0:	d00b      	beq.n	8009dea <memchr+0x56>
 8009dd2:	1905      	adds	r5, r0, r4
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	e002      	b.n	8009dde <memchr+0x4a>
 8009dd8:	7802      	ldrb	r2, [r0, #0]
 8009dda:	428a      	cmp	r2, r1
 8009ddc:	d005      	beq.n	8009dea <memchr+0x56>
 8009dde:	42ab      	cmp	r3, r5
 8009de0:	4618      	mov	r0, r3
 8009de2:	f103 0301 	add.w	r3, r3, #1
 8009de6:	d1f7      	bne.n	8009dd8 <memchr+0x44>
 8009de8:	2000      	movs	r0, #0
 8009dea:	bc70      	pop	{r4, r5, r6}
 8009dec:	4770      	bx	lr
 8009dee:	4620      	mov	r0, r4
 8009df0:	bc70      	pop	{r4, r5, r6}
 8009df2:	4770      	bx	lr
 8009df4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8009df8:	4602      	mov	r2, r0
 8009dfa:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8009dfe:	4610      	mov	r0, r2
 8009e00:	3204      	adds	r2, #4
 8009e02:	6803      	ldr	r3, [r0, #0]
 8009e04:	4073      	eors	r3, r6
 8009e06:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8009e0a:	ea25 0303 	bic.w	r3, r5, r3
 8009e0e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009e12:	d1da      	bne.n	8009dca <memchr+0x36>
 8009e14:	3c04      	subs	r4, #4
 8009e16:	2c03      	cmp	r4, #3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	d8f0      	bhi.n	8009dfe <memchr+0x6a>
 8009e1c:	e7d5      	b.n	8009dca <memchr+0x36>
 8009e1e:	4614      	mov	r4, r2
 8009e20:	e7d1      	b.n	8009dc6 <memchr+0x32>
 8009e22:	4610      	mov	r0, r2
 8009e24:	e7e1      	b.n	8009dea <memchr+0x56>
 8009e26:	bf00      	nop

08009e28 <__malloc_lock>:
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop

08009e2c <__malloc_unlock>:
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop

08009e30 <_Balloc>:
 8009e30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009e32:	b570      	push	{r4, r5, r6, lr}
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	b14b      	cbz	r3, 8009e4e <_Balloc+0x1e>
 8009e3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009e3e:	b180      	cbz	r0, 8009e62 <_Balloc+0x32>
 8009e40:	6802      	ldr	r2, [r0, #0]
 8009e42:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009e46:	2300      	movs	r3, #0
 8009e48:	6103      	str	r3, [r0, #16]
 8009e4a:	60c3      	str	r3, [r0, #12]
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	2104      	movs	r1, #4
 8009e50:	2221      	movs	r2, #33	; 0x21
 8009e52:	f000 fba1 	bl	800a598 <_calloc_r>
 8009e56:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d1ed      	bne.n	8009e3a <_Balloc+0xa>
 8009e5e:	2000      	movs	r0, #0
 8009e60:	bd70      	pop	{r4, r5, r6, pc}
 8009e62:	2101      	movs	r1, #1
 8009e64:	fa01 f604 	lsl.w	r6, r1, r4
 8009e68:	1d72      	adds	r2, r6, #5
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	0092      	lsls	r2, r2, #2
 8009e6e:	f000 fb93 	bl	800a598 <_calloc_r>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0f3      	beq.n	8009e5e <_Balloc+0x2e>
 8009e76:	6044      	str	r4, [r0, #4]
 8009e78:	6086      	str	r6, [r0, #8]
 8009e7a:	e7e4      	b.n	8009e46 <_Balloc+0x16>

08009e7c <_Bfree>:
 8009e7c:	b131      	cbz	r1, 8009e8c <_Bfree+0x10>
 8009e7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009e80:	684a      	ldr	r2, [r1, #4]
 8009e82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009e86:	6008      	str	r0, [r1, #0]
 8009e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop

08009e90 <__multadd>:
 8009e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e92:	690c      	ldr	r4, [r1, #16]
 8009e94:	b083      	sub	sp, #12
 8009e96:	460d      	mov	r5, r1
 8009e98:	4606      	mov	r6, r0
 8009e9a:	f101 0e14 	add.w	lr, r1, #20
 8009e9e:	2700      	movs	r7, #0
 8009ea0:	f8de 1000 	ldr.w	r1, [lr]
 8009ea4:	b288      	uxth	r0, r1
 8009ea6:	0c09      	lsrs	r1, r1, #16
 8009ea8:	fb02 3300 	mla	r3, r2, r0, r3
 8009eac:	fb02 f101 	mul.w	r1, r2, r1
 8009eb0:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8009eb4:	3701      	adds	r7, #1
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8009ebc:	42bc      	cmp	r4, r7
 8009ebe:	f84e 3b04 	str.w	r3, [lr], #4
 8009ec2:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8009ec6:	dceb      	bgt.n	8009ea0 <__multadd+0x10>
 8009ec8:	b13b      	cbz	r3, 8009eda <__multadd+0x4a>
 8009eca:	68aa      	ldr	r2, [r5, #8]
 8009ecc:	4294      	cmp	r4, r2
 8009ece:	da07      	bge.n	8009ee0 <__multadd+0x50>
 8009ed0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8009ed4:	3401      	adds	r4, #1
 8009ed6:	6153      	str	r3, [r2, #20]
 8009ed8:	612c      	str	r4, [r5, #16]
 8009eda:	4628      	mov	r0, r5
 8009edc:	b003      	add	sp, #12
 8009ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee0:	6869      	ldr	r1, [r5, #4]
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	3101      	adds	r1, #1
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ffa2 	bl	8009e30 <_Balloc>
 8009eec:	692a      	ldr	r2, [r5, #16]
 8009eee:	3202      	adds	r2, #2
 8009ef0:	f105 010c 	add.w	r1, r5, #12
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	0092      	lsls	r2, r2, #2
 8009ef8:	300c      	adds	r0, #12
 8009efa:	f7fd f935 	bl	8007168 <memcpy>
 8009efe:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8009f00:	6869      	ldr	r1, [r5, #4]
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009f08:	6028      	str	r0, [r5, #0]
 8009f0a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8009f0e:	463d      	mov	r5, r7
 8009f10:	e7de      	b.n	8009ed0 <__multadd+0x40>
 8009f12:	bf00      	nop

08009f14 <__hi0bits>:
 8009f14:	0c03      	lsrs	r3, r0, #16
 8009f16:	041b      	lsls	r3, r3, #16
 8009f18:	b9b3      	cbnz	r3, 8009f48 <__hi0bits+0x34>
 8009f1a:	0400      	lsls	r0, r0, #16
 8009f1c:	2310      	movs	r3, #16
 8009f1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f22:	bf04      	itt	eq
 8009f24:	0200      	lsleq	r0, r0, #8
 8009f26:	3308      	addeq	r3, #8
 8009f28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f2c:	bf04      	itt	eq
 8009f2e:	0100      	lsleq	r0, r0, #4
 8009f30:	3304      	addeq	r3, #4
 8009f32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f36:	bf04      	itt	eq
 8009f38:	0080      	lsleq	r0, r0, #2
 8009f3a:	3302      	addeq	r3, #2
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	db07      	blt.n	8009f50 <__hi0bits+0x3c>
 8009f40:	0042      	lsls	r2, r0, #1
 8009f42:	d403      	bmi.n	8009f4c <__hi0bits+0x38>
 8009f44:	2020      	movs	r0, #32
 8009f46:	4770      	bx	lr
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e7e8      	b.n	8009f1e <__hi0bits+0xa>
 8009f4c:	1c58      	adds	r0, r3, #1
 8009f4e:	4770      	bx	lr
 8009f50:	4618      	mov	r0, r3
 8009f52:	4770      	bx	lr

08009f54 <__lo0bits>:
 8009f54:	6803      	ldr	r3, [r0, #0]
 8009f56:	f013 0207 	ands.w	r2, r3, #7
 8009f5a:	d007      	beq.n	8009f6c <__lo0bits+0x18>
 8009f5c:	07d9      	lsls	r1, r3, #31
 8009f5e:	d420      	bmi.n	8009fa2 <__lo0bits+0x4e>
 8009f60:	079a      	lsls	r2, r3, #30
 8009f62:	d420      	bmi.n	8009fa6 <__lo0bits+0x52>
 8009f64:	089b      	lsrs	r3, r3, #2
 8009f66:	6003      	str	r3, [r0, #0]
 8009f68:	2002      	movs	r0, #2
 8009f6a:	4770      	bx	lr
 8009f6c:	b299      	uxth	r1, r3
 8009f6e:	b909      	cbnz	r1, 8009f74 <__lo0bits+0x20>
 8009f70:	0c1b      	lsrs	r3, r3, #16
 8009f72:	2210      	movs	r2, #16
 8009f74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f78:	bf04      	itt	eq
 8009f7a:	0a1b      	lsreq	r3, r3, #8
 8009f7c:	3208      	addeq	r2, #8
 8009f7e:	0719      	lsls	r1, r3, #28
 8009f80:	bf04      	itt	eq
 8009f82:	091b      	lsreq	r3, r3, #4
 8009f84:	3204      	addeq	r2, #4
 8009f86:	0799      	lsls	r1, r3, #30
 8009f88:	bf04      	itt	eq
 8009f8a:	089b      	lsreq	r3, r3, #2
 8009f8c:	3202      	addeq	r2, #2
 8009f8e:	07d9      	lsls	r1, r3, #31
 8009f90:	d404      	bmi.n	8009f9c <__lo0bits+0x48>
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	d101      	bne.n	8009f9a <__lo0bits+0x46>
 8009f96:	2020      	movs	r0, #32
 8009f98:	4770      	bx	lr
 8009f9a:	3201      	adds	r2, #1
 8009f9c:	6003      	str	r3, [r0, #0]
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4770      	bx	lr
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	4770      	bx	lr
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	6003      	str	r3, [r0, #0]
 8009faa:	2001      	movs	r0, #1
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop

08009fb0 <__i2b>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	f7ff ff3b 	bl	8009e30 <_Balloc>
 8009fba:	2201      	movs	r2, #1
 8009fbc:	6144      	str	r4, [r0, #20]
 8009fbe:	6102      	str	r2, [r0, #16]
 8009fc0:	bd10      	pop	{r4, pc}
 8009fc2:	bf00      	nop

08009fc4 <__multiply>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	690f      	ldr	r7, [r1, #16]
 8009fca:	6916      	ldr	r6, [r2, #16]
 8009fcc:	42b7      	cmp	r7, r6
 8009fce:	b083      	sub	sp, #12
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	4614      	mov	r4, r2
 8009fd4:	f2c0 808d 	blt.w	800a0f2 <__multiply+0x12e>
 8009fd8:	4633      	mov	r3, r6
 8009fda:	463e      	mov	r6, r7
 8009fdc:	461f      	mov	r7, r3
 8009fde:	68ab      	ldr	r3, [r5, #8]
 8009fe0:	6869      	ldr	r1, [r5, #4]
 8009fe2:	eb06 0807 	add.w	r8, r6, r7
 8009fe6:	4598      	cmp	r8, r3
 8009fe8:	bfc8      	it	gt
 8009fea:	3101      	addgt	r1, #1
 8009fec:	f7ff ff20 	bl	8009e30 <_Balloc>
 8009ff0:	f100 0c14 	add.w	ip, r0, #20
 8009ff4:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8009ff8:	45cc      	cmp	ip, r9
 8009ffa:	9000      	str	r0, [sp, #0]
 8009ffc:	d205      	bcs.n	800a00a <__multiply+0x46>
 8009ffe:	4663      	mov	r3, ip
 800a000:	2100      	movs	r1, #0
 800a002:	f843 1b04 	str.w	r1, [r3], #4
 800a006:	4599      	cmp	r9, r3
 800a008:	d8fb      	bhi.n	800a002 <__multiply+0x3e>
 800a00a:	f104 0214 	add.w	r2, r4, #20
 800a00e:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800a012:	f105 0314 	add.w	r3, r5, #20
 800a016:	4552      	cmp	r2, sl
 800a018:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800a01c:	d254      	bcs.n	800a0c8 <__multiply+0x104>
 800a01e:	f8cd 9004 	str.w	r9, [sp, #4]
 800a022:	4699      	mov	r9, r3
 800a024:	f852 3b04 	ldr.w	r3, [r2], #4
 800a028:	fa1f fb83 	uxth.w	fp, r3
 800a02c:	f1bb 0f00 	cmp.w	fp, #0
 800a030:	d020      	beq.n	800a074 <__multiply+0xb0>
 800a032:	2000      	movs	r0, #0
 800a034:	464f      	mov	r7, r9
 800a036:	4666      	mov	r6, ip
 800a038:	4605      	mov	r5, r0
 800a03a:	e000      	b.n	800a03e <__multiply+0x7a>
 800a03c:	461e      	mov	r6, r3
 800a03e:	f857 4b04 	ldr.w	r4, [r7], #4
 800a042:	6830      	ldr	r0, [r6, #0]
 800a044:	b2a1      	uxth	r1, r4
 800a046:	b283      	uxth	r3, r0
 800a048:	fb0b 3101 	mla	r1, fp, r1, r3
 800a04c:	0c24      	lsrs	r4, r4, #16
 800a04e:	0c00      	lsrs	r0, r0, #16
 800a050:	194b      	adds	r3, r1, r5
 800a052:	fb0b 0004 	mla	r0, fp, r4, r0
 800a056:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800a05a:	b299      	uxth	r1, r3
 800a05c:	4633      	mov	r3, r6
 800a05e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a062:	45be      	cmp	lr, r7
 800a064:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800a068:	f843 1b04 	str.w	r1, [r3], #4
 800a06c:	d8e6      	bhi.n	800a03c <__multiply+0x78>
 800a06e:	6075      	str	r5, [r6, #4]
 800a070:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800a074:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800a078:	d020      	beq.n	800a0bc <__multiply+0xf8>
 800a07a:	f8dc 3000 	ldr.w	r3, [ip]
 800a07e:	4667      	mov	r7, ip
 800a080:	4618      	mov	r0, r3
 800a082:	464d      	mov	r5, r9
 800a084:	2100      	movs	r1, #0
 800a086:	e000      	b.n	800a08a <__multiply+0xc6>
 800a088:	4637      	mov	r7, r6
 800a08a:	882c      	ldrh	r4, [r5, #0]
 800a08c:	0c00      	lsrs	r0, r0, #16
 800a08e:	fb0b 0004 	mla	r0, fp, r4, r0
 800a092:	4401      	add	r1, r0
 800a094:	b29c      	uxth	r4, r3
 800a096:	463e      	mov	r6, r7
 800a098:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800a09c:	f846 3b04 	str.w	r3, [r6], #4
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f855 4b04 	ldr.w	r4, [r5], #4
 800a0a6:	b283      	uxth	r3, r0
 800a0a8:	0c24      	lsrs	r4, r4, #16
 800a0aa:	fb0b 3404 	mla	r4, fp, r4, r3
 800a0ae:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800a0b2:	45ae      	cmp	lr, r5
 800a0b4:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800a0b8:	d8e6      	bhi.n	800a088 <__multiply+0xc4>
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	4592      	cmp	sl, r2
 800a0be:	f10c 0c04 	add.w	ip, ip, #4
 800a0c2:	d8af      	bhi.n	800a024 <__multiply+0x60>
 800a0c4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a0c8:	f1b8 0f00 	cmp.w	r8, #0
 800a0cc:	dd0b      	ble.n	800a0e6 <__multiply+0x122>
 800a0ce:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a0d2:	f1a9 0904 	sub.w	r9, r9, #4
 800a0d6:	b11b      	cbz	r3, 800a0e0 <__multiply+0x11c>
 800a0d8:	e005      	b.n	800a0e6 <__multiply+0x122>
 800a0da:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800a0de:	b913      	cbnz	r3, 800a0e6 <__multiply+0x122>
 800a0e0:	f1b8 0801 	subs.w	r8, r8, #1
 800a0e4:	d1f9      	bne.n	800a0da <__multiply+0x116>
 800a0e6:	9800      	ldr	r0, [sp, #0]
 800a0e8:	f8c0 8010 	str.w	r8, [r0, #16]
 800a0ec:	b003      	add	sp, #12
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	4615      	mov	r5, r2
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	e772      	b.n	8009fde <__multiply+0x1a>

0800a0f8 <__pow5mult>:
 800a0f8:	f012 0303 	ands.w	r3, r2, #3
 800a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a100:	4614      	mov	r4, r2
 800a102:	4607      	mov	r7, r0
 800a104:	460e      	mov	r6, r1
 800a106:	d12d      	bne.n	800a164 <__pow5mult+0x6c>
 800a108:	10a4      	asrs	r4, r4, #2
 800a10a:	d01c      	beq.n	800a146 <__pow5mult+0x4e>
 800a10c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800a10e:	b395      	cbz	r5, 800a176 <__pow5mult+0x7e>
 800a110:	07e3      	lsls	r3, r4, #31
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	d406      	bmi.n	800a126 <__pow5mult+0x2e>
 800a118:	1064      	asrs	r4, r4, #1
 800a11a:	d014      	beq.n	800a146 <__pow5mult+0x4e>
 800a11c:	6828      	ldr	r0, [r5, #0]
 800a11e:	b1a8      	cbz	r0, 800a14c <__pow5mult+0x54>
 800a120:	4605      	mov	r5, r0
 800a122:	07e3      	lsls	r3, r4, #31
 800a124:	d5f8      	bpl.n	800a118 <__pow5mult+0x20>
 800a126:	4638      	mov	r0, r7
 800a128:	4631      	mov	r1, r6
 800a12a:	462a      	mov	r2, r5
 800a12c:	f7ff ff4a 	bl	8009fc4 <__multiply>
 800a130:	b1b6      	cbz	r6, 800a160 <__pow5mult+0x68>
 800a132:	6872      	ldr	r2, [r6, #4]
 800a134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a136:	1064      	asrs	r4, r4, #1
 800a138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a13c:	6031      	str	r1, [r6, #0]
 800a13e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800a142:	4606      	mov	r6, r0
 800a144:	d1ea      	bne.n	800a11c <__pow5mult+0x24>
 800a146:	4630      	mov	r0, r6
 800a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a14c:	4629      	mov	r1, r5
 800a14e:	462a      	mov	r2, r5
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ff37 	bl	8009fc4 <__multiply>
 800a156:	6028      	str	r0, [r5, #0]
 800a158:	f8c0 8000 	str.w	r8, [r0]
 800a15c:	4605      	mov	r5, r0
 800a15e:	e7e0      	b.n	800a122 <__pow5mult+0x2a>
 800a160:	4606      	mov	r6, r0
 800a162:	e7d9      	b.n	800a118 <__pow5mult+0x20>
 800a164:	1e5a      	subs	r2, r3, #1
 800a166:	4d0b      	ldr	r5, [pc, #44]	; (800a194 <__pow5mult+0x9c>)
 800a168:	2300      	movs	r3, #0
 800a16a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a16e:	f7ff fe8f 	bl	8009e90 <__multadd>
 800a172:	4606      	mov	r6, r0
 800a174:	e7c8      	b.n	800a108 <__pow5mult+0x10>
 800a176:	2101      	movs	r1, #1
 800a178:	4638      	mov	r0, r7
 800a17a:	f7ff fe59 	bl	8009e30 <_Balloc>
 800a17e:	f240 2171 	movw	r1, #625	; 0x271
 800a182:	2201      	movs	r2, #1
 800a184:	2300      	movs	r3, #0
 800a186:	6141      	str	r1, [r0, #20]
 800a188:	6102      	str	r2, [r0, #16]
 800a18a:	4605      	mov	r5, r0
 800a18c:	64b8      	str	r0, [r7, #72]	; 0x48
 800a18e:	6003      	str	r3, [r0, #0]
 800a190:	e7be      	b.n	800a110 <__pow5mult+0x18>
 800a192:	bf00      	nop
 800a194:	0800b7e8 	.word	0x0800b7e8

0800a198 <__lshift>:
 800a198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a19c:	690f      	ldr	r7, [r1, #16]
 800a19e:	688b      	ldr	r3, [r1, #8]
 800a1a0:	ea4f 1962 	mov.w	r9, r2, asr #5
 800a1a4:	444f      	add	r7, r9
 800a1a6:	1c7d      	adds	r5, r7, #1
 800a1a8:	429d      	cmp	r5, r3
 800a1aa:	460e      	mov	r6, r1
 800a1ac:	4614      	mov	r4, r2
 800a1ae:	6849      	ldr	r1, [r1, #4]
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	dd04      	ble.n	800a1be <__lshift+0x26>
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	429d      	cmp	r5, r3
 800a1b8:	f101 0101 	add.w	r1, r1, #1
 800a1bc:	dcfa      	bgt.n	800a1b4 <__lshift+0x1c>
 800a1be:	4640      	mov	r0, r8
 800a1c0:	f7ff fe36 	bl	8009e30 <_Balloc>
 800a1c4:	f1b9 0f00 	cmp.w	r9, #0
 800a1c8:	f100 0114 	add.w	r1, r0, #20
 800a1cc:	dd09      	ble.n	800a1e2 <__lshift+0x4a>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	469e      	mov	lr, r3
 800a1d2:	460a      	mov	r2, r1
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	454b      	cmp	r3, r9
 800a1d8:	f842 eb04 	str.w	lr, [r2], #4
 800a1dc:	d1fa      	bne.n	800a1d4 <__lshift+0x3c>
 800a1de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a1e2:	6932      	ldr	r2, [r6, #16]
 800a1e4:	f106 0314 	add.w	r3, r6, #20
 800a1e8:	f014 0c1f 	ands.w	ip, r4, #31
 800a1ec:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800a1f0:	d01f      	beq.n	800a232 <__lshift+0x9a>
 800a1f2:	f1cc 0920 	rsb	r9, ip, #32
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	681c      	ldr	r4, [r3, #0]
 800a1fa:	fa04 f40c 	lsl.w	r4, r4, ip
 800a1fe:	4314      	orrs	r4, r2
 800a200:	468a      	mov	sl, r1
 800a202:	f841 4b04 	str.w	r4, [r1], #4
 800a206:	f853 4b04 	ldr.w	r4, [r3], #4
 800a20a:	459e      	cmp	lr, r3
 800a20c:	fa24 f209 	lsr.w	r2, r4, r9
 800a210:	d8f2      	bhi.n	800a1f8 <__lshift+0x60>
 800a212:	f8ca 2004 	str.w	r2, [sl, #4]
 800a216:	b102      	cbz	r2, 800a21a <__lshift+0x82>
 800a218:	1cbd      	adds	r5, r7, #2
 800a21a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800a21e:	6872      	ldr	r2, [r6, #4]
 800a220:	3d01      	subs	r5, #1
 800a222:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a226:	6105      	str	r5, [r0, #16]
 800a228:	6031      	str	r1, [r6, #0]
 800a22a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800a22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a232:	3904      	subs	r1, #4
 800a234:	f853 2b04 	ldr.w	r2, [r3], #4
 800a238:	f841 2f04 	str.w	r2, [r1, #4]!
 800a23c:	459e      	cmp	lr, r3
 800a23e:	d8f9      	bhi.n	800a234 <__lshift+0x9c>
 800a240:	e7eb      	b.n	800a21a <__lshift+0x82>
 800a242:	bf00      	nop

0800a244 <__mcmp>:
 800a244:	6902      	ldr	r2, [r0, #16]
 800a246:	690b      	ldr	r3, [r1, #16]
 800a248:	1ad2      	subs	r2, r2, r3
 800a24a:	d113      	bne.n	800a274 <__mcmp+0x30>
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	3014      	adds	r0, #20
 800a250:	3114      	adds	r1, #20
 800a252:	4419      	add	r1, r3
 800a254:	b410      	push	{r4}
 800a256:	4403      	add	r3, r0
 800a258:	e001      	b.n	800a25e <__mcmp+0x1a>
 800a25a:	4298      	cmp	r0, r3
 800a25c:	d20c      	bcs.n	800a278 <__mcmp+0x34>
 800a25e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800a262:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a266:	4294      	cmp	r4, r2
 800a268:	d0f7      	beq.n	800a25a <__mcmp+0x16>
 800a26a:	d309      	bcc.n	800a280 <__mcmp+0x3c>
 800a26c:	2001      	movs	r0, #1
 800a26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	4610      	mov	r0, r2
 800a276:	4770      	bx	lr
 800a278:	2000      	movs	r0, #0
 800a27a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	f04f 30ff 	mov.w	r0, #4294967295
 800a284:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop

0800a28c <__mdiff>:
 800a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	460e      	mov	r6, r1
 800a292:	4605      	mov	r5, r0
 800a294:	4611      	mov	r1, r2
 800a296:	4630      	mov	r0, r6
 800a298:	4614      	mov	r4, r2
 800a29a:	f7ff ffd3 	bl	800a244 <__mcmp>
 800a29e:	1e07      	subs	r7, r0, #0
 800a2a0:	d054      	beq.n	800a34c <__mdiff+0xc0>
 800a2a2:	db4d      	blt.n	800a340 <__mdiff+0xb4>
 800a2a4:	f04f 0800 	mov.w	r8, #0
 800a2a8:	6871      	ldr	r1, [r6, #4]
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7ff fdc0 	bl	8009e30 <_Balloc>
 800a2b0:	6937      	ldr	r7, [r6, #16]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	f8c0 800c 	str.w	r8, [r0, #12]
 800a2b8:	3614      	adds	r6, #20
 800a2ba:	f104 0214 	add.w	r2, r4, #20
 800a2be:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800a2c2:	f100 0514 	add.w	r5, r0, #20
 800a2c6:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2d0:	f852 4b04 	ldr.w	r4, [r2], #4
 800a2d4:	fa13 f388 	uxtah	r3, r3, r8
 800a2d8:	b2a1      	uxth	r1, r4
 800a2da:	0c24      	lsrs	r4, r4, #16
 800a2dc:	1a59      	subs	r1, r3, r1
 800a2de:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 800a2e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a2e6:	b289      	uxth	r1, r1
 800a2e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a2ec:	4594      	cmp	ip, r2
 800a2ee:	f845 1b04 	str.w	r1, [r5], #4
 800a2f2:	ea4f 4323 	mov.w	r3, r3, asr #16
 800a2f6:	4634      	mov	r4, r6
 800a2f8:	d8e8      	bhi.n	800a2cc <__mdiff+0x40>
 800a2fa:	45b6      	cmp	lr, r6
 800a2fc:	46ac      	mov	ip, r5
 800a2fe:	d915      	bls.n	800a32c <__mdiff+0xa0>
 800a300:	f854 2b04 	ldr.w	r2, [r4], #4
 800a304:	fa13 f182 	uxtah	r1, r3, r2
 800a308:	0c13      	lsrs	r3, r2, #16
 800a30a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a30e:	b289      	uxth	r1, r1
 800a310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a314:	45a6      	cmp	lr, r4
 800a316:	f845 1b04 	str.w	r1, [r5], #4
 800a31a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800a31e:	d8ef      	bhi.n	800a300 <__mdiff+0x74>
 800a320:	43f6      	mvns	r6, r6
 800a322:	4476      	add	r6, lr
 800a324:	f026 0503 	bic.w	r5, r6, #3
 800a328:	3504      	adds	r5, #4
 800a32a:	4465      	add	r5, ip
 800a32c:	3d04      	subs	r5, #4
 800a32e:	b921      	cbnz	r1, 800a33a <__mdiff+0xae>
 800a330:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a334:	3f01      	subs	r7, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0fa      	beq.n	800a330 <__mdiff+0xa4>
 800a33a:	6107      	str	r7, [r0, #16]
 800a33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a340:	4633      	mov	r3, r6
 800a342:	f04f 0801 	mov.w	r8, #1
 800a346:	4626      	mov	r6, r4
 800a348:	461c      	mov	r4, r3
 800a34a:	e7ad      	b.n	800a2a8 <__mdiff+0x1c>
 800a34c:	4628      	mov	r0, r5
 800a34e:	4639      	mov	r1, r7
 800a350:	f7ff fd6e 	bl	8009e30 <_Balloc>
 800a354:	2301      	movs	r3, #1
 800a356:	6147      	str	r7, [r0, #20]
 800a358:	6103      	str	r3, [r0, #16]
 800a35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35e:	bf00      	nop

0800a360 <__d2b>:
 800a360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a364:	b083      	sub	sp, #12
 800a366:	2101      	movs	r1, #1
 800a368:	461c      	mov	r4, r3
 800a36a:	f3c3 550a 	ubfx	r5, r3, #20, #11
 800a36e:	4617      	mov	r7, r2
 800a370:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a372:	f7ff fd5d 	bl	8009e30 <_Balloc>
 800a376:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a37a:	4681      	mov	r9, r0
 800a37c:	b10d      	cbz	r5, 800a382 <__d2b+0x22>
 800a37e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a382:	9401      	str	r4, [sp, #4]
 800a384:	b31f      	cbz	r7, 800a3ce <__d2b+0x6e>
 800a386:	a802      	add	r0, sp, #8
 800a388:	f840 7d08 	str.w	r7, [r0, #-8]!
 800a38c:	f7ff fde2 	bl	8009f54 <__lo0bits>
 800a390:	2800      	cmp	r0, #0
 800a392:	d135      	bne.n	800a400 <__d2b+0xa0>
 800a394:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800a398:	f8c9 2014 	str.w	r2, [r9, #20]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bf14      	ite	ne
 800a3a0:	2402      	movne	r4, #2
 800a3a2:	2401      	moveq	r4, #1
 800a3a4:	f8c9 3018 	str.w	r3, [r9, #24]
 800a3a8:	f8c9 4010 	str.w	r4, [r9, #16]
 800a3ac:	b9dd      	cbnz	r5, 800a3e6 <__d2b+0x86>
 800a3ae:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 800a3b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3b6:	6030      	str	r0, [r6, #0]
 800a3b8:	6918      	ldr	r0, [r3, #16]
 800a3ba:	f7ff fdab 	bl	8009f14 <__hi0bits>
 800a3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800a3c4:	6018      	str	r0, [r3, #0]
 800a3c6:	4648      	mov	r0, r9
 800a3c8:	b003      	add	sp, #12
 800a3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	a801      	add	r0, sp, #4
 800a3d0:	f7ff fdc0 	bl	8009f54 <__lo0bits>
 800a3d4:	2401      	movs	r4, #1
 800a3d6:	9b01      	ldr	r3, [sp, #4]
 800a3d8:	f8c9 3014 	str.w	r3, [r9, #20]
 800a3dc:	3020      	adds	r0, #32
 800a3de:	f8c9 4010 	str.w	r4, [r9, #16]
 800a3e2:	2d00      	cmp	r5, #0
 800a3e4:	d0e3      	beq.n	800a3ae <__d2b+0x4e>
 800a3e6:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 800a3ea:	eb08 0300 	add.w	r3, r8, r0
 800a3ee:	6033      	str	r3, [r6, #0]
 800a3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3f6:	6018      	str	r0, [r3, #0]
 800a3f8:	4648      	mov	r0, r9
 800a3fa:	b003      	add	sp, #12
 800a3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a400:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800a404:	f1c0 0120 	rsb	r1, r0, #32
 800a408:	fa03 f101 	lsl.w	r1, r3, r1
 800a40c:	430a      	orrs	r2, r1
 800a40e:	40c3      	lsrs	r3, r0
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	f8c9 2014 	str.w	r2, [r9, #20]
 800a416:	e7c1      	b.n	800a39c <__d2b+0x3c>

0800a418 <__fpclassifyd>:
 800a418:	b410      	push	{r4}
 800a41a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800a41e:	460b      	mov	r3, r1
 800a420:	d008      	beq.n	800a434 <__fpclassifyd+0x1c>
 800a422:	4a11      	ldr	r2, [pc, #68]	; (800a468 <__fpclassifyd+0x50>)
 800a424:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a428:	4291      	cmp	r1, r2
 800a42a:	d808      	bhi.n	800a43e <__fpclassifyd+0x26>
 800a42c:	2004      	movs	r0, #4
 800a42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	b918      	cbnz	r0, 800a43e <__fpclassifyd+0x26>
 800a436:	2002      	movs	r0, #2
 800a438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <__fpclassifyd+0x50>)
 800a444:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a448:	4293      	cmp	r3, r2
 800a44a:	d9ef      	bls.n	800a42c <__fpclassifyd+0x14>
 800a44c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a450:	d201      	bcs.n	800a456 <__fpclassifyd+0x3e>
 800a452:	2003      	movs	r0, #3
 800a454:	e7eb      	b.n	800a42e <__fpclassifyd+0x16>
 800a456:	4b05      	ldr	r3, [pc, #20]	; (800a46c <__fpclassifyd+0x54>)
 800a458:	429c      	cmp	r4, r3
 800a45a:	d001      	beq.n	800a460 <__fpclassifyd+0x48>
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7e6      	b.n	800a42e <__fpclassifyd+0x16>
 800a460:	fab0 f080 	clz	r0, r0
 800a464:	0940      	lsrs	r0, r0, #5
 800a466:	e7e2      	b.n	800a42e <__fpclassifyd+0x16>
 800a468:	7fdfffff 	.word	0x7fdfffff
 800a46c:	7ff00000 	.word	0x7ff00000

0800a470 <_sbrk_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4c07      	ldr	r4, [pc, #28]	; (800a490 <_sbrk_r+0x20>)
 800a474:	2300      	movs	r3, #0
 800a476:	4605      	mov	r5, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	f7f8 ff6e 	bl	800335c <_sbrk>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d000      	beq.n	800a486 <_sbrk_r+0x16>
 800a484:	bd38      	pop	{r3, r4, r5, pc}
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0fb      	beq.n	800a484 <_sbrk_r+0x14>
 800a48c:	602b      	str	r3, [r5, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	200010a8 	.word	0x200010a8

0800a494 <__ssprint_r>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	6893      	ldr	r3, [r2, #8]
 800a49a:	f8d2 8000 	ldr.w	r8, [r2]
 800a49e:	b083      	sub	sp, #12
 800a4a0:	4691      	mov	r9, r2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d072      	beq.n	800a58c <__ssprint_r+0xf8>
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	f04f 0b00 	mov.w	fp, #0
 800a4ac:	6808      	ldr	r0, [r1, #0]
 800a4ae:	688b      	ldr	r3, [r1, #8]
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	465c      	mov	r4, fp
 800a4b4:	2c00      	cmp	r4, #0
 800a4b6:	d045      	beq.n	800a544 <__ssprint_r+0xb0>
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	461e      	mov	r6, r3
 800a4bc:	469a      	mov	sl, r3
 800a4be:	d348      	bcc.n	800a552 <__ssprint_r+0xbe>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a4c6:	d02d      	beq.n	800a524 <__ssprint_r+0x90>
 800a4c8:	696e      	ldr	r6, [r5, #20]
 800a4ca:	6929      	ldr	r1, [r5, #16]
 800a4cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a4d0:	ebc1 0a00 	rsb	sl, r1, r0
 800a4d4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800a4d8:	1c60      	adds	r0, r4, #1
 800a4da:	1076      	asrs	r6, r6, #1
 800a4dc:	4450      	add	r0, sl
 800a4de:	4286      	cmp	r6, r0
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	bf3c      	itt	cc
 800a4e4:	4606      	movcc	r6, r0
 800a4e6:	4632      	movcc	r2, r6
 800a4e8:	055b      	lsls	r3, r3, #21
 800a4ea:	d535      	bpl.n	800a558 <__ssprint_r+0xc4>
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7ff f9c2 	bl	8009878 <_malloc_r>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d039      	beq.n	800a56c <__ssprint_r+0xd8>
 800a4f8:	4652      	mov	r2, sl
 800a4fa:	6929      	ldr	r1, [r5, #16]
 800a4fc:	9001      	str	r0, [sp, #4]
 800a4fe:	f7fc fe33 	bl	8007168 <memcpy>
 800a502:	89aa      	ldrh	r2, [r5, #12]
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a50a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a50e:	81aa      	strh	r2, [r5, #12]
 800a510:	ebca 0206 	rsb	r2, sl, r6
 800a514:	eb03 000a 	add.w	r0, r3, sl
 800a518:	616e      	str	r6, [r5, #20]
 800a51a:	612b      	str	r3, [r5, #16]
 800a51c:	6028      	str	r0, [r5, #0]
 800a51e:	60aa      	str	r2, [r5, #8]
 800a520:	4626      	mov	r6, r4
 800a522:	46a2      	mov	sl, r4
 800a524:	4652      	mov	r2, sl
 800a526:	4659      	mov	r1, fp
 800a528:	f000 f98c 	bl	800a844 <memmove>
 800a52c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a530:	68ab      	ldr	r3, [r5, #8]
 800a532:	6828      	ldr	r0, [r5, #0]
 800a534:	1b9b      	subs	r3, r3, r6
 800a536:	4450      	add	r0, sl
 800a538:	1b14      	subs	r4, r2, r4
 800a53a:	60ab      	str	r3, [r5, #8]
 800a53c:	6028      	str	r0, [r5, #0]
 800a53e:	f8c9 4008 	str.w	r4, [r9, #8]
 800a542:	b31c      	cbz	r4, 800a58c <__ssprint_r+0xf8>
 800a544:	f8d8 b000 	ldr.w	fp, [r8]
 800a548:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a54c:	f108 0808 	add.w	r8, r8, #8
 800a550:	e7b0      	b.n	800a4b4 <__ssprint_r+0x20>
 800a552:	4626      	mov	r6, r4
 800a554:	46a2      	mov	sl, r4
 800a556:	e7e5      	b.n	800a524 <__ssprint_r+0x90>
 800a558:	4638      	mov	r0, r7
 800a55a:	f000 f9d7 	bl	800a90c <_realloc_r>
 800a55e:	4603      	mov	r3, r0
 800a560:	2800      	cmp	r0, #0
 800a562:	d1d5      	bne.n	800a510 <__ssprint_r+0x7c>
 800a564:	4638      	mov	r0, r7
 800a566:	6929      	ldr	r1, [r5, #16]
 800a568:	f000 f894 	bl	800a694 <_free_r>
 800a56c:	230c      	movs	r3, #12
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	89ab      	ldrh	r3, [r5, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	81ab      	strh	r3, [r5, #12]
 800a57e:	f8c9 2008 	str.w	r2, [r9, #8]
 800a582:	f8c9 2004 	str.w	r2, [r9, #4]
 800a586:	b003      	add	sp, #12
 800a588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58c:	2000      	movs	r0, #0
 800a58e:	f8c9 0004 	str.w	r0, [r9, #4]
 800a592:	b003      	add	sp, #12
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a598 <_calloc_r>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	fb02 f101 	mul.w	r1, r2, r1
 800a59e:	f7ff f96b 	bl	8009878 <_malloc_r>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	b168      	cbz	r0, 800a5c2 <_calloc_r+0x2a>
 800a5a6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a5aa:	f022 0203 	bic.w	r2, r2, #3
 800a5ae:	3a04      	subs	r2, #4
 800a5b0:	2a24      	cmp	r2, #36	; 0x24
 800a5b2:	d818      	bhi.n	800a5e6 <_calloc_r+0x4e>
 800a5b4:	2a13      	cmp	r2, #19
 800a5b6:	d806      	bhi.n	800a5c6 <_calloc_r+0x2e>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	605a      	str	r2, [r3, #4]
 800a5c0:	609a      	str	r2, [r3, #8]
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	bd10      	pop	{r4, pc}
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2a1b      	cmp	r2, #27
 800a5ca:	6003      	str	r3, [r0, #0]
 800a5cc:	6043      	str	r3, [r0, #4]
 800a5ce:	d90f      	bls.n	800a5f0 <_calloc_r+0x58>
 800a5d0:	2a24      	cmp	r2, #36	; 0x24
 800a5d2:	6083      	str	r3, [r0, #8]
 800a5d4:	60c3      	str	r3, [r0, #12]
 800a5d6:	bf05      	ittet	eq
 800a5d8:	6103      	streq	r3, [r0, #16]
 800a5da:	6143      	streq	r3, [r0, #20]
 800a5dc:	f100 0310 	addne.w	r3, r0, #16
 800a5e0:	f100 0318 	addeq.w	r3, r0, #24
 800a5e4:	e7e9      	b.n	800a5ba <_calloc_r+0x22>
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	f7fc fe58 	bl	800729c <memset>
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	bd10      	pop	{r4, pc}
 800a5f0:	f100 0308 	add.w	r3, r0, #8
 800a5f4:	e7e1      	b.n	800a5ba <_calloc_r+0x22>
 800a5f6:	bf00      	nop

0800a5f8 <_malloc_trim_r>:
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	4f23      	ldr	r7, [pc, #140]	; (800a688 <_malloc_trim_r+0x90>)
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	4606      	mov	r6, r0
 800a600:	f7ff fc12 	bl	8009e28 <__malloc_lock>
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	685d      	ldr	r5, [r3, #4]
 800a608:	f025 0503 	bic.w	r5, r5, #3
 800a60c:	1b29      	subs	r1, r5, r4
 800a60e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800a612:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800a616:	f021 010f 	bic.w	r1, r1, #15
 800a61a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800a61e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800a622:	db07      	blt.n	800a634 <_malloc_trim_r+0x3c>
 800a624:	4630      	mov	r0, r6
 800a626:	2100      	movs	r1, #0
 800a628:	f7ff ff22 	bl	800a470 <_sbrk_r>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	442b      	add	r3, r5
 800a630:	4298      	cmp	r0, r3
 800a632:	d004      	beq.n	800a63e <_malloc_trim_r+0x46>
 800a634:	4630      	mov	r0, r6
 800a636:	f7ff fbf9 	bl	8009e2c <__malloc_unlock>
 800a63a:	2000      	movs	r0, #0
 800a63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63e:	4630      	mov	r0, r6
 800a640:	4261      	negs	r1, r4
 800a642:	f7ff ff15 	bl	800a470 <_sbrk_r>
 800a646:	3001      	adds	r0, #1
 800a648:	d00d      	beq.n	800a666 <_malloc_trim_r+0x6e>
 800a64a:	4b10      	ldr	r3, [pc, #64]	; (800a68c <_malloc_trim_r+0x94>)
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	6819      	ldr	r1, [r3, #0]
 800a650:	1b2d      	subs	r5, r5, r4
 800a652:	f045 0501 	orr.w	r5, r5, #1
 800a656:	4630      	mov	r0, r6
 800a658:	1b09      	subs	r1, r1, r4
 800a65a:	6055      	str	r5, [r2, #4]
 800a65c:	6019      	str	r1, [r3, #0]
 800a65e:	f7ff fbe5 	bl	8009e2c <__malloc_unlock>
 800a662:	2001      	movs	r0, #1
 800a664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a666:	4630      	mov	r0, r6
 800a668:	2100      	movs	r1, #0
 800a66a:	f7ff ff01 	bl	800a470 <_sbrk_r>
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	1a83      	subs	r3, r0, r2
 800a672:	2b0f      	cmp	r3, #15
 800a674:	ddde      	ble.n	800a634 <_malloc_trim_r+0x3c>
 800a676:	4c06      	ldr	r4, [pc, #24]	; (800a690 <_malloc_trim_r+0x98>)
 800a678:	4904      	ldr	r1, [pc, #16]	; (800a68c <_malloc_trim_r+0x94>)
 800a67a:	6824      	ldr	r4, [r4, #0]
 800a67c:	f043 0301 	orr.w	r3, r3, #1
 800a680:	1b00      	subs	r0, r0, r4
 800a682:	6053      	str	r3, [r2, #4]
 800a684:	6008      	str	r0, [r1, #0]
 800a686:	e7d5      	b.n	800a634 <_malloc_trim_r+0x3c>
 800a688:	200004ec 	.word	0x200004ec
 800a68c:	20000978 	.word	0x20000978
 800a690:	200008f8 	.word	0x200008f8

0800a694 <_free_r>:
 800a694:	2900      	cmp	r1, #0
 800a696:	d04e      	beq.n	800a736 <_free_r+0xa2>
 800a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69c:	460c      	mov	r4, r1
 800a69e:	4680      	mov	r8, r0
 800a6a0:	f7ff fbc2 	bl	8009e28 <__malloc_lock>
 800a6a4:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800a6a8:	4962      	ldr	r1, [pc, #392]	; (800a834 <_free_r+0x1a0>)
 800a6aa:	f027 0201 	bic.w	r2, r7, #1
 800a6ae:	f1a4 0508 	sub.w	r5, r4, #8
 800a6b2:	18ab      	adds	r3, r5, r2
 800a6b4:	688e      	ldr	r6, [r1, #8]
 800a6b6:	6858      	ldr	r0, [r3, #4]
 800a6b8:	429e      	cmp	r6, r3
 800a6ba:	f020 0003 	bic.w	r0, r0, #3
 800a6be:	d05a      	beq.n	800a776 <_free_r+0xe2>
 800a6c0:	07fe      	lsls	r6, r7, #31
 800a6c2:	6058      	str	r0, [r3, #4]
 800a6c4:	d40b      	bmi.n	800a6de <_free_r+0x4a>
 800a6c6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800a6ca:	1bed      	subs	r5, r5, r7
 800a6cc:	f101 0e08 	add.w	lr, r1, #8
 800a6d0:	68ac      	ldr	r4, [r5, #8]
 800a6d2:	4574      	cmp	r4, lr
 800a6d4:	443a      	add	r2, r7
 800a6d6:	d067      	beq.n	800a7a8 <_free_r+0x114>
 800a6d8:	68ef      	ldr	r7, [r5, #12]
 800a6da:	60e7      	str	r7, [r4, #12]
 800a6dc:	60bc      	str	r4, [r7, #8]
 800a6de:	181c      	adds	r4, r3, r0
 800a6e0:	6864      	ldr	r4, [r4, #4]
 800a6e2:	07e4      	lsls	r4, r4, #31
 800a6e4:	d40c      	bmi.n	800a700 <_free_r+0x6c>
 800a6e6:	4f54      	ldr	r7, [pc, #336]	; (800a838 <_free_r+0x1a4>)
 800a6e8:	689c      	ldr	r4, [r3, #8]
 800a6ea:	42bc      	cmp	r4, r7
 800a6ec:	4402      	add	r2, r0
 800a6ee:	d07c      	beq.n	800a7ea <_free_r+0x156>
 800a6f0:	68d8      	ldr	r0, [r3, #12]
 800a6f2:	60e0      	str	r0, [r4, #12]
 800a6f4:	f042 0301 	orr.w	r3, r2, #1
 800a6f8:	6084      	str	r4, [r0, #8]
 800a6fa:	606b      	str	r3, [r5, #4]
 800a6fc:	50aa      	str	r2, [r5, r2]
 800a6fe:	e003      	b.n	800a708 <_free_r+0x74>
 800a700:	f042 0301 	orr.w	r3, r2, #1
 800a704:	606b      	str	r3, [r5, #4]
 800a706:	50aa      	str	r2, [r5, r2]
 800a708:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a70c:	d214      	bcs.n	800a738 <_free_r+0xa4>
 800a70e:	08d2      	lsrs	r2, r2, #3
 800a710:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800a714:	6848      	ldr	r0, [r1, #4]
 800a716:	689f      	ldr	r7, [r3, #8]
 800a718:	60af      	str	r7, [r5, #8]
 800a71a:	1092      	asrs	r2, r2, #2
 800a71c:	2401      	movs	r4, #1
 800a71e:	fa04 f202 	lsl.w	r2, r4, r2
 800a722:	4310      	orrs	r0, r2
 800a724:	60eb      	str	r3, [r5, #12]
 800a726:	6048      	str	r0, [r1, #4]
 800a728:	609d      	str	r5, [r3, #8]
 800a72a:	60fd      	str	r5, [r7, #12]
 800a72c:	4640      	mov	r0, r8
 800a72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a732:	f7ff bb7b 	b.w	8009e2c <__malloc_unlock>
 800a736:	4770      	bx	lr
 800a738:	0a53      	lsrs	r3, r2, #9
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d847      	bhi.n	800a7ce <_free_r+0x13a>
 800a73e:	0993      	lsrs	r3, r2, #6
 800a740:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800a744:	0060      	lsls	r0, r4, #1
 800a746:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800a74a:	493a      	ldr	r1, [pc, #232]	; (800a834 <_free_r+0x1a0>)
 800a74c:	6883      	ldr	r3, [r0, #8]
 800a74e:	4283      	cmp	r3, r0
 800a750:	d043      	beq.n	800a7da <_free_r+0x146>
 800a752:	6859      	ldr	r1, [r3, #4]
 800a754:	f021 0103 	bic.w	r1, r1, #3
 800a758:	4291      	cmp	r1, r2
 800a75a:	d902      	bls.n	800a762 <_free_r+0xce>
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	4298      	cmp	r0, r3
 800a760:	d1f7      	bne.n	800a752 <_free_r+0xbe>
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	60ea      	str	r2, [r5, #12]
 800a766:	60ab      	str	r3, [r5, #8]
 800a768:	4640      	mov	r0, r8
 800a76a:	6095      	str	r5, [r2, #8]
 800a76c:	60dd      	str	r5, [r3, #12]
 800a76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a772:	f7ff bb5b 	b.w	8009e2c <__malloc_unlock>
 800a776:	07ff      	lsls	r7, r7, #31
 800a778:	4402      	add	r2, r0
 800a77a:	d407      	bmi.n	800a78c <_free_r+0xf8>
 800a77c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a780:	1aed      	subs	r5, r5, r3
 800a782:	441a      	add	r2, r3
 800a784:	68a8      	ldr	r0, [r5, #8]
 800a786:	68eb      	ldr	r3, [r5, #12]
 800a788:	60c3      	str	r3, [r0, #12]
 800a78a:	6098      	str	r0, [r3, #8]
 800a78c:	4b2b      	ldr	r3, [pc, #172]	; (800a83c <_free_r+0x1a8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f042 0001 	orr.w	r0, r2, #1
 800a794:	429a      	cmp	r2, r3
 800a796:	6068      	str	r0, [r5, #4]
 800a798:	608d      	str	r5, [r1, #8]
 800a79a:	d3c7      	bcc.n	800a72c <_free_r+0x98>
 800a79c:	4b28      	ldr	r3, [pc, #160]	; (800a840 <_free_r+0x1ac>)
 800a79e:	4640      	mov	r0, r8
 800a7a0:	6819      	ldr	r1, [r3, #0]
 800a7a2:	f7ff ff29 	bl	800a5f8 <_malloc_trim_r>
 800a7a6:	e7c1      	b.n	800a72c <_free_r+0x98>
 800a7a8:	1819      	adds	r1, r3, r0
 800a7aa:	6849      	ldr	r1, [r1, #4]
 800a7ac:	07c9      	lsls	r1, r1, #31
 800a7ae:	d409      	bmi.n	800a7c4 <_free_r+0x130>
 800a7b0:	68d9      	ldr	r1, [r3, #12]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	4402      	add	r2, r0
 800a7b6:	f042 0001 	orr.w	r0, r2, #1
 800a7ba:	60d9      	str	r1, [r3, #12]
 800a7bc:	608b      	str	r3, [r1, #8]
 800a7be:	6068      	str	r0, [r5, #4]
 800a7c0:	50aa      	str	r2, [r5, r2]
 800a7c2:	e7b3      	b.n	800a72c <_free_r+0x98>
 800a7c4:	f042 0301 	orr.w	r3, r2, #1
 800a7c8:	606b      	str	r3, [r5, #4]
 800a7ca:	50aa      	str	r2, [r5, r2]
 800a7cc:	e7ae      	b.n	800a72c <_free_r+0x98>
 800a7ce:	2b14      	cmp	r3, #20
 800a7d0:	d814      	bhi.n	800a7fc <_free_r+0x168>
 800a7d2:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800a7d6:	0060      	lsls	r0, r4, #1
 800a7d8:	e7b5      	b.n	800a746 <_free_r+0xb2>
 800a7da:	684a      	ldr	r2, [r1, #4]
 800a7dc:	10a4      	asrs	r4, r4, #2
 800a7de:	2001      	movs	r0, #1
 800a7e0:	40a0      	lsls	r0, r4
 800a7e2:	4302      	orrs	r2, r0
 800a7e4:	604a      	str	r2, [r1, #4]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	e7bc      	b.n	800a764 <_free_r+0xd0>
 800a7ea:	f042 0301 	orr.w	r3, r2, #1
 800a7ee:	614d      	str	r5, [r1, #20]
 800a7f0:	610d      	str	r5, [r1, #16]
 800a7f2:	60ec      	str	r4, [r5, #12]
 800a7f4:	60ac      	str	r4, [r5, #8]
 800a7f6:	606b      	str	r3, [r5, #4]
 800a7f8:	50aa      	str	r2, [r5, r2]
 800a7fa:	e797      	b.n	800a72c <_free_r+0x98>
 800a7fc:	2b54      	cmp	r3, #84	; 0x54
 800a7fe:	d804      	bhi.n	800a80a <_free_r+0x176>
 800a800:	0b13      	lsrs	r3, r2, #12
 800a802:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800a806:	0060      	lsls	r0, r4, #1
 800a808:	e79d      	b.n	800a746 <_free_r+0xb2>
 800a80a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a80e:	d804      	bhi.n	800a81a <_free_r+0x186>
 800a810:	0bd3      	lsrs	r3, r2, #15
 800a812:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800a816:	0060      	lsls	r0, r4, #1
 800a818:	e795      	b.n	800a746 <_free_r+0xb2>
 800a81a:	f240 5054 	movw	r0, #1364	; 0x554
 800a81e:	4283      	cmp	r3, r0
 800a820:	d804      	bhi.n	800a82c <_free_r+0x198>
 800a822:	0c93      	lsrs	r3, r2, #18
 800a824:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800a828:	0060      	lsls	r0, r4, #1
 800a82a:	e78c      	b.n	800a746 <_free_r+0xb2>
 800a82c:	20fc      	movs	r0, #252	; 0xfc
 800a82e:	247e      	movs	r4, #126	; 0x7e
 800a830:	e789      	b.n	800a746 <_free_r+0xb2>
 800a832:	bf00      	nop
 800a834:	200004ec 	.word	0x200004ec
 800a838:	200004f4 	.word	0x200004f4
 800a83c:	200008f4 	.word	0x200008f4
 800a840:	20000974 	.word	0x20000974

0800a844 <memmove>:
 800a844:	4288      	cmp	r0, r1
 800a846:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a848:	d90d      	bls.n	800a866 <memmove+0x22>
 800a84a:	188b      	adds	r3, r1, r2
 800a84c:	4298      	cmp	r0, r3
 800a84e:	d20a      	bcs.n	800a866 <memmove+0x22>
 800a850:	1881      	adds	r1, r0, r2
 800a852:	2a00      	cmp	r2, #0
 800a854:	d054      	beq.n	800a900 <memmove+0xbc>
 800a856:	1a9a      	subs	r2, r3, r2
 800a858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a85c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a860:	4293      	cmp	r3, r2
 800a862:	d1f9      	bne.n	800a858 <memmove+0x14>
 800a864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a866:	2a0f      	cmp	r2, #15
 800a868:	d948      	bls.n	800a8fc <memmove+0xb8>
 800a86a:	ea40 0301 	orr.w	r3, r0, r1
 800a86e:	079b      	lsls	r3, r3, #30
 800a870:	d147      	bne.n	800a902 <memmove+0xbe>
 800a872:	f100 0410 	add.w	r4, r0, #16
 800a876:	f101 0310 	add.w	r3, r1, #16
 800a87a:	4615      	mov	r5, r2
 800a87c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800a880:	f844 6c10 	str.w	r6, [r4, #-16]
 800a884:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800a888:	f844 6c0c 	str.w	r6, [r4, #-12]
 800a88c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800a890:	f844 6c08 	str.w	r6, [r4, #-8]
 800a894:	3d10      	subs	r5, #16
 800a896:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800a89a:	f844 6c04 	str.w	r6, [r4, #-4]
 800a89e:	2d0f      	cmp	r5, #15
 800a8a0:	f103 0310 	add.w	r3, r3, #16
 800a8a4:	f104 0410 	add.w	r4, r4, #16
 800a8a8:	d8e8      	bhi.n	800a87c <memmove+0x38>
 800a8aa:	f1a2 0310 	sub.w	r3, r2, #16
 800a8ae:	f023 030f 	bic.w	r3, r3, #15
 800a8b2:	f002 0e0f 	and.w	lr, r2, #15
 800a8b6:	3310      	adds	r3, #16
 800a8b8:	f1be 0f03 	cmp.w	lr, #3
 800a8bc:	4419      	add	r1, r3
 800a8be:	4403      	add	r3, r0
 800a8c0:	d921      	bls.n	800a906 <memmove+0xc2>
 800a8c2:	1f1e      	subs	r6, r3, #4
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	4674      	mov	r4, lr
 800a8c8:	3c04      	subs	r4, #4
 800a8ca:	f855 7b04 	ldr.w	r7, [r5], #4
 800a8ce:	f846 7f04 	str.w	r7, [r6, #4]!
 800a8d2:	2c03      	cmp	r4, #3
 800a8d4:	d8f8      	bhi.n	800a8c8 <memmove+0x84>
 800a8d6:	f1ae 0404 	sub.w	r4, lr, #4
 800a8da:	f024 0403 	bic.w	r4, r4, #3
 800a8de:	3404      	adds	r4, #4
 800a8e0:	4423      	add	r3, r4
 800a8e2:	4421      	add	r1, r4
 800a8e4:	f002 0203 	and.w	r2, r2, #3
 800a8e8:	b152      	cbz	r2, 800a900 <memmove+0xbc>
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	440a      	add	r2, r1
 800a8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8f6:	4291      	cmp	r1, r2
 800a8f8:	d1f9      	bne.n	800a8ee <memmove+0xaa>
 800a8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	e7f3      	b.n	800a8e8 <memmove+0xa4>
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a902:	4603      	mov	r3, r0
 800a904:	e7f1      	b.n	800a8ea <memmove+0xa6>
 800a906:	4672      	mov	r2, lr
 800a908:	e7ee      	b.n	800a8e8 <memmove+0xa4>
 800a90a:	bf00      	nop

0800a90c <_realloc_r>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	4617      	mov	r7, r2
 800a912:	b083      	sub	sp, #12
 800a914:	460e      	mov	r6, r1
 800a916:	2900      	cmp	r1, #0
 800a918:	f000 80e7 	beq.w	800aaea <_realloc_r+0x1de>
 800a91c:	4681      	mov	r9, r0
 800a91e:	f107 050b 	add.w	r5, r7, #11
 800a922:	f7ff fa81 	bl	8009e28 <__malloc_lock>
 800a926:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a92a:	2d16      	cmp	r5, #22
 800a92c:	f023 0403 	bic.w	r4, r3, #3
 800a930:	f1a6 0808 	sub.w	r8, r6, #8
 800a934:	d84c      	bhi.n	800a9d0 <_realloc_r+0xc4>
 800a936:	2210      	movs	r2, #16
 800a938:	4615      	mov	r5, r2
 800a93a:	42af      	cmp	r7, r5
 800a93c:	d84d      	bhi.n	800a9da <_realloc_r+0xce>
 800a93e:	4294      	cmp	r4, r2
 800a940:	f280 8084 	bge.w	800aa4c <_realloc_r+0x140>
 800a944:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 800acf4 <_realloc_r+0x3e8>
 800a948:	f8db 0008 	ldr.w	r0, [fp, #8]
 800a94c:	eb08 0104 	add.w	r1, r8, r4
 800a950:	4288      	cmp	r0, r1
 800a952:	f000 80d6 	beq.w	800ab02 <_realloc_r+0x1f6>
 800a956:	6848      	ldr	r0, [r1, #4]
 800a958:	f020 0e01 	bic.w	lr, r0, #1
 800a95c:	448e      	add	lr, r1
 800a95e:	f8de e004 	ldr.w	lr, [lr, #4]
 800a962:	f01e 0f01 	tst.w	lr, #1
 800a966:	d13f      	bne.n	800a9e8 <_realloc_r+0xdc>
 800a968:	f020 0003 	bic.w	r0, r0, #3
 800a96c:	4420      	add	r0, r4
 800a96e:	4290      	cmp	r0, r2
 800a970:	f280 80c1 	bge.w	800aaf6 <_realloc_r+0x1ea>
 800a974:	07db      	lsls	r3, r3, #31
 800a976:	f100 808f 	bmi.w	800aa98 <_realloc_r+0x18c>
 800a97a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800a97e:	ebc3 0a08 	rsb	sl, r3, r8
 800a982:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	eb00 0e03 	add.w	lr, r0, r3
 800a98e:	4596      	cmp	lr, r2
 800a990:	db34      	blt.n	800a9fc <_realloc_r+0xf0>
 800a992:	68cb      	ldr	r3, [r1, #12]
 800a994:	688a      	ldr	r2, [r1, #8]
 800a996:	4657      	mov	r7, sl
 800a998:	60d3      	str	r3, [r2, #12]
 800a99a:	609a      	str	r2, [r3, #8]
 800a99c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800a9a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a9a4:	60cb      	str	r3, [r1, #12]
 800a9a6:	1f22      	subs	r2, r4, #4
 800a9a8:	2a24      	cmp	r2, #36	; 0x24
 800a9aa:	6099      	str	r1, [r3, #8]
 800a9ac:	f200 8136 	bhi.w	800ac1c <_realloc_r+0x310>
 800a9b0:	2a13      	cmp	r2, #19
 800a9b2:	f240 80fd 	bls.w	800abb0 <_realloc_r+0x2a4>
 800a9b6:	6833      	ldr	r3, [r6, #0]
 800a9b8:	f8ca 3008 	str.w	r3, [sl, #8]
 800a9bc:	6873      	ldr	r3, [r6, #4]
 800a9be:	f8ca 300c 	str.w	r3, [sl, #12]
 800a9c2:	2a1b      	cmp	r2, #27
 800a9c4:	f200 8140 	bhi.w	800ac48 <_realloc_r+0x33c>
 800a9c8:	3608      	adds	r6, #8
 800a9ca:	f10a 0310 	add.w	r3, sl, #16
 800a9ce:	e0f0      	b.n	800abb2 <_realloc_r+0x2a6>
 800a9d0:	f025 0507 	bic.w	r5, r5, #7
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	daaf      	bge.n	800a93a <_realloc_r+0x2e>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	2000      	movs	r0, #0
 800a9de:	f8c9 3000 	str.w	r3, [r9]
 800a9e2:	b003      	add	sp, #12
 800a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	07d9      	lsls	r1, r3, #31
 800a9ea:	d455      	bmi.n	800aa98 <_realloc_r+0x18c>
 800a9ec:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800a9f0:	ebc3 0a08 	rsb	sl, r3, r8
 800a9f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a9f8:	f023 0303 	bic.w	r3, r3, #3
 800a9fc:	4423      	add	r3, r4
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	db4a      	blt.n	800aa98 <_realloc_r+0x18c>
 800aa02:	4657      	mov	r7, sl
 800aa04:	f8da 100c 	ldr.w	r1, [sl, #12]
 800aa08:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800aa0c:	1f22      	subs	r2, r4, #4
 800aa0e:	2a24      	cmp	r2, #36	; 0x24
 800aa10:	60c1      	str	r1, [r0, #12]
 800aa12:	6088      	str	r0, [r1, #8]
 800aa14:	f200 810e 	bhi.w	800ac34 <_realloc_r+0x328>
 800aa18:	2a13      	cmp	r2, #19
 800aa1a:	f240 8109 	bls.w	800ac30 <_realloc_r+0x324>
 800aa1e:	6831      	ldr	r1, [r6, #0]
 800aa20:	f8ca 1008 	str.w	r1, [sl, #8]
 800aa24:	6871      	ldr	r1, [r6, #4]
 800aa26:	f8ca 100c 	str.w	r1, [sl, #12]
 800aa2a:	2a1b      	cmp	r2, #27
 800aa2c:	f200 8121 	bhi.w	800ac72 <_realloc_r+0x366>
 800aa30:	3608      	adds	r6, #8
 800aa32:	f10a 0210 	add.w	r2, sl, #16
 800aa36:	6831      	ldr	r1, [r6, #0]
 800aa38:	6011      	str	r1, [r2, #0]
 800aa3a:	6871      	ldr	r1, [r6, #4]
 800aa3c:	6051      	str	r1, [r2, #4]
 800aa3e:	68b1      	ldr	r1, [r6, #8]
 800aa40:	6091      	str	r1, [r2, #8]
 800aa42:	461c      	mov	r4, r3
 800aa44:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aa48:	463e      	mov	r6, r7
 800aa4a:	46d0      	mov	r8, sl
 800aa4c:	1b62      	subs	r2, r4, r5
 800aa4e:	2a0f      	cmp	r2, #15
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	d80e      	bhi.n	800aa74 <_realloc_r+0x168>
 800aa56:	4323      	orrs	r3, r4
 800aa58:	4444      	add	r4, r8
 800aa5a:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa5e:	6863      	ldr	r3, [r4, #4]
 800aa60:	f043 0301 	orr.w	r3, r3, #1
 800aa64:	6063      	str	r3, [r4, #4]
 800aa66:	4648      	mov	r0, r9
 800aa68:	f7ff f9e0 	bl	8009e2c <__malloc_unlock>
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	b003      	add	sp, #12
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	eb08 0105 	add.w	r1, r8, r5
 800aa78:	431d      	orrs	r5, r3
 800aa7a:	f042 0301 	orr.w	r3, r2, #1
 800aa7e:	440a      	add	r2, r1
 800aa80:	f8c8 5004 	str.w	r5, [r8, #4]
 800aa84:	604b      	str	r3, [r1, #4]
 800aa86:	6853      	ldr	r3, [r2, #4]
 800aa88:	f043 0301 	orr.w	r3, r3, #1
 800aa8c:	3108      	adds	r1, #8
 800aa8e:	6053      	str	r3, [r2, #4]
 800aa90:	4648      	mov	r0, r9
 800aa92:	f7ff fdff 	bl	800a694 <_free_r>
 800aa96:	e7e6      	b.n	800aa66 <_realloc_r+0x15a>
 800aa98:	4639      	mov	r1, r7
 800aa9a:	4648      	mov	r0, r9
 800aa9c:	f7fe feec 	bl	8009878 <_malloc_r>
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	b1d8      	cbz	r0, 800aadc <_realloc_r+0x1d0>
 800aaa4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aaa8:	f023 0201 	bic.w	r2, r3, #1
 800aaac:	4442      	add	r2, r8
 800aaae:	f1a0 0108 	sub.w	r1, r0, #8
 800aab2:	4291      	cmp	r1, r2
 800aab4:	f000 80ac 	beq.w	800ac10 <_realloc_r+0x304>
 800aab8:	1f22      	subs	r2, r4, #4
 800aaba:	2a24      	cmp	r2, #36	; 0x24
 800aabc:	f200 8099 	bhi.w	800abf2 <_realloc_r+0x2e6>
 800aac0:	2a13      	cmp	r2, #19
 800aac2:	d86a      	bhi.n	800ab9a <_realloc_r+0x28e>
 800aac4:	4603      	mov	r3, r0
 800aac6:	4632      	mov	r2, r6
 800aac8:	6811      	ldr	r1, [r2, #0]
 800aaca:	6019      	str	r1, [r3, #0]
 800aacc:	6851      	ldr	r1, [r2, #4]
 800aace:	6059      	str	r1, [r3, #4]
 800aad0:	6892      	ldr	r2, [r2, #8]
 800aad2:	609a      	str	r2, [r3, #8]
 800aad4:	4631      	mov	r1, r6
 800aad6:	4648      	mov	r0, r9
 800aad8:	f7ff fddc 	bl	800a694 <_free_r>
 800aadc:	4648      	mov	r0, r9
 800aade:	f7ff f9a5 	bl	8009e2c <__malloc_unlock>
 800aae2:	4638      	mov	r0, r7
 800aae4:	b003      	add	sp, #12
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	4611      	mov	r1, r2
 800aaec:	b003      	add	sp, #12
 800aaee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf2:	f7fe bec1 	b.w	8009878 <_malloc_r>
 800aaf6:	68ca      	ldr	r2, [r1, #12]
 800aaf8:	6889      	ldr	r1, [r1, #8]
 800aafa:	4604      	mov	r4, r0
 800aafc:	60ca      	str	r2, [r1, #12]
 800aafe:	6091      	str	r1, [r2, #8]
 800ab00:	e7a4      	b.n	800aa4c <_realloc_r+0x140>
 800ab02:	6841      	ldr	r1, [r0, #4]
 800ab04:	f021 0103 	bic.w	r1, r1, #3
 800ab08:	4421      	add	r1, r4
 800ab0a:	f105 0010 	add.w	r0, r5, #16
 800ab0e:	4281      	cmp	r1, r0
 800ab10:	da5b      	bge.n	800abca <_realloc_r+0x2be>
 800ab12:	07db      	lsls	r3, r3, #31
 800ab14:	d4c0      	bmi.n	800aa98 <_realloc_r+0x18c>
 800ab16:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800ab1a:	ebc3 0a08 	rsb	sl, r3, r8
 800ab1e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ab22:	f023 0303 	bic.w	r3, r3, #3
 800ab26:	eb01 0c03 	add.w	ip, r1, r3
 800ab2a:	4560      	cmp	r0, ip
 800ab2c:	f73f af66 	bgt.w	800a9fc <_realloc_r+0xf0>
 800ab30:	4657      	mov	r7, sl
 800ab32:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ab36:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800ab3a:	1f22      	subs	r2, r4, #4
 800ab3c:	2a24      	cmp	r2, #36	; 0x24
 800ab3e:	60cb      	str	r3, [r1, #12]
 800ab40:	6099      	str	r1, [r3, #8]
 800ab42:	f200 80b8 	bhi.w	800acb6 <_realloc_r+0x3aa>
 800ab46:	2a13      	cmp	r2, #19
 800ab48:	f240 80a9 	bls.w	800ac9e <_realloc_r+0x392>
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	f8ca 3008 	str.w	r3, [sl, #8]
 800ab52:	6873      	ldr	r3, [r6, #4]
 800ab54:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab58:	2a1b      	cmp	r2, #27
 800ab5a:	f200 80b5 	bhi.w	800acc8 <_realloc_r+0x3bc>
 800ab5e:	3608      	adds	r6, #8
 800ab60:	f10a 0310 	add.w	r3, sl, #16
 800ab64:	6832      	ldr	r2, [r6, #0]
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	6872      	ldr	r2, [r6, #4]
 800ab6a:	605a      	str	r2, [r3, #4]
 800ab6c:	68b2      	ldr	r2, [r6, #8]
 800ab6e:	609a      	str	r2, [r3, #8]
 800ab70:	eb0a 0205 	add.w	r2, sl, r5
 800ab74:	ebc5 030c 	rsb	r3, r5, ip
 800ab78:	f043 0301 	orr.w	r3, r3, #1
 800ab7c:	f8cb 2008 	str.w	r2, [fp, #8]
 800ab80:	6053      	str	r3, [r2, #4]
 800ab82:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	431d      	orrs	r5, r3
 800ab8c:	4648      	mov	r0, r9
 800ab8e:	f8ca 5004 	str.w	r5, [sl, #4]
 800ab92:	f7ff f94b 	bl	8009e2c <__malloc_unlock>
 800ab96:	4638      	mov	r0, r7
 800ab98:	e769      	b.n	800aa6e <_realloc_r+0x162>
 800ab9a:	6833      	ldr	r3, [r6, #0]
 800ab9c:	6003      	str	r3, [r0, #0]
 800ab9e:	6873      	ldr	r3, [r6, #4]
 800aba0:	6043      	str	r3, [r0, #4]
 800aba2:	2a1b      	cmp	r2, #27
 800aba4:	d829      	bhi.n	800abfa <_realloc_r+0x2ee>
 800aba6:	f100 0308 	add.w	r3, r0, #8
 800abaa:	f106 0208 	add.w	r2, r6, #8
 800abae:	e78b      	b.n	800aac8 <_realloc_r+0x1bc>
 800abb0:	463b      	mov	r3, r7
 800abb2:	6832      	ldr	r2, [r6, #0]
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	6872      	ldr	r2, [r6, #4]
 800abb8:	605a      	str	r2, [r3, #4]
 800abba:	68b2      	ldr	r2, [r6, #8]
 800abbc:	609a      	str	r2, [r3, #8]
 800abbe:	463e      	mov	r6, r7
 800abc0:	4674      	mov	r4, lr
 800abc2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800abc6:	46d0      	mov	r8, sl
 800abc8:	e740      	b.n	800aa4c <_realloc_r+0x140>
 800abca:	eb08 0205 	add.w	r2, r8, r5
 800abce:	1b4b      	subs	r3, r1, r5
 800abd0:	f043 0301 	orr.w	r3, r3, #1
 800abd4:	f8cb 2008 	str.w	r2, [fp, #8]
 800abd8:	6053      	str	r3, [r2, #4]
 800abda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	431d      	orrs	r5, r3
 800abe4:	4648      	mov	r0, r9
 800abe6:	f846 5c04 	str.w	r5, [r6, #-4]
 800abea:	f7ff f91f 	bl	8009e2c <__malloc_unlock>
 800abee:	4630      	mov	r0, r6
 800abf0:	e73d      	b.n	800aa6e <_realloc_r+0x162>
 800abf2:	4631      	mov	r1, r6
 800abf4:	f7ff fe26 	bl	800a844 <memmove>
 800abf8:	e76c      	b.n	800aad4 <_realloc_r+0x1c8>
 800abfa:	68b3      	ldr	r3, [r6, #8]
 800abfc:	6083      	str	r3, [r0, #8]
 800abfe:	68f3      	ldr	r3, [r6, #12]
 800ac00:	60c3      	str	r3, [r0, #12]
 800ac02:	2a24      	cmp	r2, #36	; 0x24
 800ac04:	d02c      	beq.n	800ac60 <_realloc_r+0x354>
 800ac06:	f100 0310 	add.w	r3, r0, #16
 800ac0a:	f106 0210 	add.w	r2, r6, #16
 800ac0e:	e75b      	b.n	800aac8 <_realloc_r+0x1bc>
 800ac10:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ac14:	f022 0203 	bic.w	r2, r2, #3
 800ac18:	4414      	add	r4, r2
 800ac1a:	e717      	b.n	800aa4c <_realloc_r+0x140>
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4638      	mov	r0, r7
 800ac20:	4674      	mov	r4, lr
 800ac22:	463e      	mov	r6, r7
 800ac24:	f7ff fe0e 	bl	800a844 <memmove>
 800ac28:	46d0      	mov	r8, sl
 800ac2a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac2e:	e70d      	b.n	800aa4c <_realloc_r+0x140>
 800ac30:	463a      	mov	r2, r7
 800ac32:	e700      	b.n	800aa36 <_realloc_r+0x12a>
 800ac34:	4631      	mov	r1, r6
 800ac36:	4638      	mov	r0, r7
 800ac38:	461c      	mov	r4, r3
 800ac3a:	463e      	mov	r6, r7
 800ac3c:	f7ff fe02 	bl	800a844 <memmove>
 800ac40:	46d0      	mov	r8, sl
 800ac42:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac46:	e701      	b.n	800aa4c <_realloc_r+0x140>
 800ac48:	68b3      	ldr	r3, [r6, #8]
 800ac4a:	f8ca 3010 	str.w	r3, [sl, #16]
 800ac4e:	68f3      	ldr	r3, [r6, #12]
 800ac50:	f8ca 3014 	str.w	r3, [sl, #20]
 800ac54:	2a24      	cmp	r2, #36	; 0x24
 800ac56:	d018      	beq.n	800ac8a <_realloc_r+0x37e>
 800ac58:	3610      	adds	r6, #16
 800ac5a:	f10a 0318 	add.w	r3, sl, #24
 800ac5e:	e7a8      	b.n	800abb2 <_realloc_r+0x2a6>
 800ac60:	6933      	ldr	r3, [r6, #16]
 800ac62:	6103      	str	r3, [r0, #16]
 800ac64:	6973      	ldr	r3, [r6, #20]
 800ac66:	6143      	str	r3, [r0, #20]
 800ac68:	f106 0218 	add.w	r2, r6, #24
 800ac6c:	f100 0318 	add.w	r3, r0, #24
 800ac70:	e72a      	b.n	800aac8 <_realloc_r+0x1bc>
 800ac72:	68b1      	ldr	r1, [r6, #8]
 800ac74:	f8ca 1010 	str.w	r1, [sl, #16]
 800ac78:	68f1      	ldr	r1, [r6, #12]
 800ac7a:	f8ca 1014 	str.w	r1, [sl, #20]
 800ac7e:	2a24      	cmp	r2, #36	; 0x24
 800ac80:	d00f      	beq.n	800aca2 <_realloc_r+0x396>
 800ac82:	3610      	adds	r6, #16
 800ac84:	f10a 0218 	add.w	r2, sl, #24
 800ac88:	e6d5      	b.n	800aa36 <_realloc_r+0x12a>
 800ac8a:	6933      	ldr	r3, [r6, #16]
 800ac8c:	f8ca 3018 	str.w	r3, [sl, #24]
 800ac90:	6973      	ldr	r3, [r6, #20]
 800ac92:	f8ca 301c 	str.w	r3, [sl, #28]
 800ac96:	3618      	adds	r6, #24
 800ac98:	f10a 0320 	add.w	r3, sl, #32
 800ac9c:	e789      	b.n	800abb2 <_realloc_r+0x2a6>
 800ac9e:	463b      	mov	r3, r7
 800aca0:	e760      	b.n	800ab64 <_realloc_r+0x258>
 800aca2:	6932      	ldr	r2, [r6, #16]
 800aca4:	f8ca 2018 	str.w	r2, [sl, #24]
 800aca8:	6972      	ldr	r2, [r6, #20]
 800acaa:	f8ca 201c 	str.w	r2, [sl, #28]
 800acae:	3618      	adds	r6, #24
 800acb0:	f10a 0220 	add.w	r2, sl, #32
 800acb4:	e6bf      	b.n	800aa36 <_realloc_r+0x12a>
 800acb6:	4631      	mov	r1, r6
 800acb8:	4638      	mov	r0, r7
 800acba:	f8cd c004 	str.w	ip, [sp, #4]
 800acbe:	f7ff fdc1 	bl	800a844 <memmove>
 800acc2:	f8dd c004 	ldr.w	ip, [sp, #4]
 800acc6:	e753      	b.n	800ab70 <_realloc_r+0x264>
 800acc8:	68b3      	ldr	r3, [r6, #8]
 800acca:	f8ca 3010 	str.w	r3, [sl, #16]
 800acce:	68f3      	ldr	r3, [r6, #12]
 800acd0:	f8ca 3014 	str.w	r3, [sl, #20]
 800acd4:	2a24      	cmp	r2, #36	; 0x24
 800acd6:	d003      	beq.n	800ace0 <_realloc_r+0x3d4>
 800acd8:	3610      	adds	r6, #16
 800acda:	f10a 0318 	add.w	r3, sl, #24
 800acde:	e741      	b.n	800ab64 <_realloc_r+0x258>
 800ace0:	6933      	ldr	r3, [r6, #16]
 800ace2:	f8ca 3018 	str.w	r3, [sl, #24]
 800ace6:	6973      	ldr	r3, [r6, #20]
 800ace8:	f8ca 301c 	str.w	r3, [sl, #28]
 800acec:	3618      	adds	r6, #24
 800acee:	f10a 0320 	add.w	r3, sl, #32
 800acf2:	e737      	b.n	800ab64 <_realloc_r+0x258>
 800acf4:	200004ec 	.word	0x200004ec

0800acf8 <__gedf2>:
 800acf8:	f04f 3cff 	mov.w	ip, #4294967295
 800acfc:	e006      	b.n	800ad0c <__cmpdf2+0x4>
 800acfe:	bf00      	nop

0800ad00 <__ledf2>:
 800ad00:	f04f 0c01 	mov.w	ip, #1
 800ad04:	e002      	b.n	800ad0c <__cmpdf2+0x4>
 800ad06:	bf00      	nop

0800ad08 <__cmpdf2>:
 800ad08:	f04f 0c01 	mov.w	ip, #1
 800ad0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 800ad10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ad14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ad18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ad1c:	bf18      	it	ne
 800ad1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800ad22:	d01b      	beq.n	800ad5c <__cmpdf2+0x54>
 800ad24:	b001      	add	sp, #4
 800ad26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800ad2a:	bf0c      	ite	eq
 800ad2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800ad30:	ea91 0f03 	teqne	r1, r3
 800ad34:	bf02      	ittt	eq
 800ad36:	ea90 0f02 	teqeq	r0, r2
 800ad3a:	2000      	moveq	r0, #0
 800ad3c:	4770      	bxeq	lr
 800ad3e:	f110 0f00 	cmn.w	r0, #0
 800ad42:	ea91 0f03 	teq	r1, r3
 800ad46:	bf58      	it	pl
 800ad48:	4299      	cmppl	r1, r3
 800ad4a:	bf08      	it	eq
 800ad4c:	4290      	cmpeq	r0, r2
 800ad4e:	bf2c      	ite	cs
 800ad50:	17d8      	asrcs	r0, r3, #31
 800ad52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800ad56:	f040 0001 	orr.w	r0, r0, #1
 800ad5a:	4770      	bx	lr
 800ad5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ad60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ad64:	d102      	bne.n	800ad6c <__cmpdf2+0x64>
 800ad66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800ad6a:	d107      	bne.n	800ad7c <__cmpdf2+0x74>
 800ad6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ad70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ad74:	d1d6      	bne.n	800ad24 <__cmpdf2+0x1c>
 800ad76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800ad7a:	d0d3      	beq.n	800ad24 <__cmpdf2+0x1c>
 800ad7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop

0800ad84 <__aeabi_cdrcmple>:
 800ad84:	4684      	mov	ip, r0
 800ad86:	4610      	mov	r0, r2
 800ad88:	4662      	mov	r2, ip
 800ad8a:	468c      	mov	ip, r1
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4663      	mov	r3, ip
 800ad90:	e000      	b.n	800ad94 <__aeabi_cdcmpeq>
 800ad92:	bf00      	nop

0800ad94 <__aeabi_cdcmpeq>:
 800ad94:	b501      	push	{r0, lr}
 800ad96:	f7ff ffb7 	bl	800ad08 <__cmpdf2>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	bf48      	it	mi
 800ad9e:	f110 0f00 	cmnmi.w	r0, #0
 800ada2:	bd01      	pop	{r0, pc}

0800ada4 <__aeabi_dcmpeq>:
 800ada4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ada8:	f7ff fff4 	bl	800ad94 <__aeabi_cdcmpeq>
 800adac:	bf0c      	ite	eq
 800adae:	2001      	moveq	r0, #1
 800adb0:	2000      	movne	r0, #0
 800adb2:	f85d fb08 	ldr.w	pc, [sp], #8
 800adb6:	bf00      	nop

0800adb8 <__aeabi_dcmplt>:
 800adb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800adbc:	f7ff ffea 	bl	800ad94 <__aeabi_cdcmpeq>
 800adc0:	bf34      	ite	cc
 800adc2:	2001      	movcc	r0, #1
 800adc4:	2000      	movcs	r0, #0
 800adc6:	f85d fb08 	ldr.w	pc, [sp], #8
 800adca:	bf00      	nop

0800adcc <__aeabi_dcmple>:
 800adcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800add0:	f7ff ffe0 	bl	800ad94 <__aeabi_cdcmpeq>
 800add4:	bf94      	ite	ls
 800add6:	2001      	movls	r0, #1
 800add8:	2000      	movhi	r0, #0
 800adda:	f85d fb08 	ldr.w	pc, [sp], #8
 800adde:	bf00      	nop

0800ade0 <__aeabi_dcmpge>:
 800ade0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ade4:	f7ff ffce 	bl	800ad84 <__aeabi_cdrcmple>
 800ade8:	bf94      	ite	ls
 800adea:	2001      	movls	r0, #1
 800adec:	2000      	movhi	r0, #0
 800adee:	f85d fb08 	ldr.w	pc, [sp], #8
 800adf2:	bf00      	nop

0800adf4 <__aeabi_dcmpgt>:
 800adf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800adf8:	f7ff ffc4 	bl	800ad84 <__aeabi_cdrcmple>
 800adfc:	bf34      	ite	cc
 800adfe:	2001      	movcc	r0, #1
 800ae00:	2000      	movcs	r0, #0
 800ae02:	f85d fb08 	ldr.w	pc, [sp], #8
 800ae06:	bf00      	nop

0800ae08 <__aeabi_d2iz>:
 800ae08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ae0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ae10:	d215      	bcs.n	800ae3e <__aeabi_d2iz+0x36>
 800ae12:	d511      	bpl.n	800ae38 <__aeabi_d2iz+0x30>
 800ae14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ae18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ae1c:	d912      	bls.n	800ae44 <__aeabi_d2iz+0x3c>
 800ae1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ae22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ae2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ae2e:	fa23 f002 	lsr.w	r0, r3, r2
 800ae32:	bf18      	it	ne
 800ae34:	4240      	negne	r0, r0
 800ae36:	4770      	bx	lr
 800ae38:	f04f 0000 	mov.w	r0, #0
 800ae3c:	4770      	bx	lr
 800ae3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ae42:	d105      	bne.n	800ae50 <__aeabi_d2iz+0x48>
 800ae44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ae48:	bf08      	it	eq
 800ae4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ae4e:	4770      	bx	lr
 800ae50:	f04f 0000 	mov.w	r0, #0
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop

0800ae58 <__aeabi_uldivmod>:
 800ae58:	b94b      	cbnz	r3, 800ae6e <__aeabi_uldivmod+0x16>
 800ae5a:	b942      	cbnz	r2, 800ae6e <__aeabi_uldivmod+0x16>
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	bf08      	it	eq
 800ae60:	2800      	cmpeq	r0, #0
 800ae62:	d002      	beq.n	800ae6a <__aeabi_uldivmod+0x12>
 800ae64:	f04f 31ff 	mov.w	r1, #4294967295
 800ae68:	4608      	mov	r0, r1
 800ae6a:	f000 b83b 	b.w	800aee4 <__aeabi_idiv0>
 800ae6e:	b082      	sub	sp, #8
 800ae70:	46ec      	mov	ip, sp
 800ae72:	e92d 5000 	stmdb	sp!, {ip, lr}
 800ae76:	f000 f81d 	bl	800aeb4 <__gnu_uldivmod_helper>
 800ae7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ae7e:	b002      	add	sp, #8
 800ae80:	bc0c      	pop	{r2, r3}
 800ae82:	4770      	bx	lr

0800ae84 <__gnu_ldivmod_helper>:
 800ae84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae88:	9c06      	ldr	r4, [sp, #24]
 800ae8a:	4615      	mov	r5, r2
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	460f      	mov	r7, r1
 800ae90:	4698      	mov	r8, r3
 800ae92:	f000 f829 	bl	800aee8 <__divdi3>
 800ae96:	fb05 f301 	mul.w	r3, r5, r1
 800ae9a:	fb00 3808 	mla	r8, r0, r8, r3
 800ae9e:	fba5 2300 	umull	r2, r3, r5, r0
 800aea2:	1ab2      	subs	r2, r6, r2
 800aea4:	4443      	add	r3, r8
 800aea6:	eb67 0303 	sbc.w	r3, r7, r3
 800aeaa:	e9c4 2300 	strd	r2, r3, [r4]
 800aeae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb2:	bf00      	nop

0800aeb4 <__gnu_uldivmod_helper>:
 800aeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb8:	9c06      	ldr	r4, [sp, #24]
 800aeba:	4690      	mov	r8, r2
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	461d      	mov	r5, r3
 800aec2:	f000 f95f 	bl	800b184 <__udivdi3>
 800aec6:	fb00 f505 	mul.w	r5, r0, r5
 800aeca:	fba0 2308 	umull	r2, r3, r0, r8
 800aece:	fb08 5501 	mla	r5, r8, r1, r5
 800aed2:	1ab2      	subs	r2, r6, r2
 800aed4:	442b      	add	r3, r5
 800aed6:	eb67 0303 	sbc.w	r3, r7, r3
 800aeda:	e9c4 2300 	strd	r2, r3, [r4]
 800aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee2:	bf00      	nop

0800aee4 <__aeabi_idiv0>:
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop

0800aee8 <__divdi3>:
 800aee8:	2900      	cmp	r1, #0
 800aeea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeee:	f2c0 80a6 	blt.w	800b03e <__divdi3+0x156>
 800aef2:	2600      	movs	r6, #0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f2c0 809c 	blt.w	800b032 <__divdi3+0x14a>
 800aefa:	4688      	mov	r8, r1
 800aefc:	4694      	mov	ip, r2
 800aefe:	469e      	mov	lr, r3
 800af00:	4615      	mov	r5, r2
 800af02:	4604      	mov	r4, r0
 800af04:	460f      	mov	r7, r1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d13d      	bne.n	800af86 <__divdi3+0x9e>
 800af0a:	428a      	cmp	r2, r1
 800af0c:	d959      	bls.n	800afc2 <__divdi3+0xda>
 800af0e:	fab2 f382 	clz	r3, r2
 800af12:	b13b      	cbz	r3, 800af24 <__divdi3+0x3c>
 800af14:	f1c3 0220 	rsb	r2, r3, #32
 800af18:	409f      	lsls	r7, r3
 800af1a:	fa20 f202 	lsr.w	r2, r0, r2
 800af1e:	409d      	lsls	r5, r3
 800af20:	4317      	orrs	r7, r2
 800af22:	409c      	lsls	r4, r3
 800af24:	0c29      	lsrs	r1, r5, #16
 800af26:	0c22      	lsrs	r2, r4, #16
 800af28:	fbb7 fef1 	udiv	lr, r7, r1
 800af2c:	b2a8      	uxth	r0, r5
 800af2e:	fb01 771e 	mls	r7, r1, lr, r7
 800af32:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800af36:	fb00 f30e 	mul.w	r3, r0, lr
 800af3a:	42bb      	cmp	r3, r7
 800af3c:	d90a      	bls.n	800af54 <__divdi3+0x6c>
 800af3e:	197f      	adds	r7, r7, r5
 800af40:	f10e 32ff 	add.w	r2, lr, #4294967295
 800af44:	f080 8105 	bcs.w	800b152 <__divdi3+0x26a>
 800af48:	42bb      	cmp	r3, r7
 800af4a:	f240 8102 	bls.w	800b152 <__divdi3+0x26a>
 800af4e:	f1ae 0e02 	sub.w	lr, lr, #2
 800af52:	442f      	add	r7, r5
 800af54:	1aff      	subs	r7, r7, r3
 800af56:	b2a4      	uxth	r4, r4
 800af58:	fbb7 f3f1 	udiv	r3, r7, r1
 800af5c:	fb01 7713 	mls	r7, r1, r3, r7
 800af60:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800af64:	fb00 f003 	mul.w	r0, r0, r3
 800af68:	42b8      	cmp	r0, r7
 800af6a:	d908      	bls.n	800af7e <__divdi3+0x96>
 800af6c:	197f      	adds	r7, r7, r5
 800af6e:	f103 32ff 	add.w	r2, r3, #4294967295
 800af72:	f080 80f0 	bcs.w	800b156 <__divdi3+0x26e>
 800af76:	42b8      	cmp	r0, r7
 800af78:	f240 80ed 	bls.w	800b156 <__divdi3+0x26e>
 800af7c:	3b02      	subs	r3, #2
 800af7e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800af82:	2200      	movs	r2, #0
 800af84:	e003      	b.n	800af8e <__divdi3+0xa6>
 800af86:	428b      	cmp	r3, r1
 800af88:	d90f      	bls.n	800afaa <__divdi3+0xc2>
 800af8a:	2200      	movs	r2, #0
 800af8c:	4613      	mov	r3, r2
 800af8e:	1c34      	adds	r4, r6, #0
 800af90:	bf18      	it	ne
 800af92:	2401      	movne	r4, #1
 800af94:	4260      	negs	r0, r4
 800af96:	f04f 0500 	mov.w	r5, #0
 800af9a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800af9e:	4058      	eors	r0, r3
 800afa0:	4051      	eors	r1, r2
 800afa2:	1900      	adds	r0, r0, r4
 800afa4:	4169      	adcs	r1, r5
 800afa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afaa:	fab3 f283 	clz	r2, r3
 800afae:	2a00      	cmp	r2, #0
 800afb0:	f040 8086 	bne.w	800b0c0 <__divdi3+0x1d8>
 800afb4:	428b      	cmp	r3, r1
 800afb6:	d302      	bcc.n	800afbe <__divdi3+0xd6>
 800afb8:	4584      	cmp	ip, r0
 800afba:	f200 80db 	bhi.w	800b174 <__divdi3+0x28c>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e7e5      	b.n	800af8e <__divdi3+0xa6>
 800afc2:	b912      	cbnz	r2, 800afca <__divdi3+0xe2>
 800afc4:	2301      	movs	r3, #1
 800afc6:	fbb3 f5f2 	udiv	r5, r3, r2
 800afca:	fab5 f085 	clz	r0, r5
 800afce:	2800      	cmp	r0, #0
 800afd0:	d13b      	bne.n	800b04a <__divdi3+0x162>
 800afd2:	1b78      	subs	r0, r7, r5
 800afd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800afd8:	fa1f fc85 	uxth.w	ip, r5
 800afdc:	2201      	movs	r2, #1
 800afde:	fbb0 f8fe 	udiv	r8, r0, lr
 800afe2:	0c21      	lsrs	r1, r4, #16
 800afe4:	fb0e 0718 	mls	r7, lr, r8, r0
 800afe8:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800afec:	fb0c f308 	mul.w	r3, ip, r8
 800aff0:	42bb      	cmp	r3, r7
 800aff2:	d907      	bls.n	800b004 <__divdi3+0x11c>
 800aff4:	197f      	adds	r7, r7, r5
 800aff6:	f108 31ff 	add.w	r1, r8, #4294967295
 800affa:	d202      	bcs.n	800b002 <__divdi3+0x11a>
 800affc:	42bb      	cmp	r3, r7
 800affe:	f200 80bd 	bhi.w	800b17c <__divdi3+0x294>
 800b002:	4688      	mov	r8, r1
 800b004:	1aff      	subs	r7, r7, r3
 800b006:	b2a4      	uxth	r4, r4
 800b008:	fbb7 f3fe 	udiv	r3, r7, lr
 800b00c:	fb0e 7713 	mls	r7, lr, r3, r7
 800b010:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b014:	fb0c fc03 	mul.w	ip, ip, r3
 800b018:	45bc      	cmp	ip, r7
 800b01a:	d907      	bls.n	800b02c <__divdi3+0x144>
 800b01c:	197f      	adds	r7, r7, r5
 800b01e:	f103 31ff 	add.w	r1, r3, #4294967295
 800b022:	d202      	bcs.n	800b02a <__divdi3+0x142>
 800b024:	45bc      	cmp	ip, r7
 800b026:	f200 80a7 	bhi.w	800b178 <__divdi3+0x290>
 800b02a:	460b      	mov	r3, r1
 800b02c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800b030:	e7ad      	b.n	800af8e <__divdi3+0xa6>
 800b032:	4252      	negs	r2, r2
 800b034:	ea6f 0606 	mvn.w	r6, r6
 800b038:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b03c:	e75d      	b.n	800aefa <__divdi3+0x12>
 800b03e:	4240      	negs	r0, r0
 800b040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b044:	f04f 36ff 	mov.w	r6, #4294967295
 800b048:	e754      	b.n	800aef4 <__divdi3+0xc>
 800b04a:	f1c0 0220 	rsb	r2, r0, #32
 800b04e:	fa24 f102 	lsr.w	r1, r4, r2
 800b052:	fa07 f300 	lsl.w	r3, r7, r0
 800b056:	4085      	lsls	r5, r0
 800b058:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b05c:	40d7      	lsrs	r7, r2
 800b05e:	4319      	orrs	r1, r3
 800b060:	fbb7 f2fe 	udiv	r2, r7, lr
 800b064:	0c0b      	lsrs	r3, r1, #16
 800b066:	fb0e 7712 	mls	r7, lr, r2, r7
 800b06a:	fa1f fc85 	uxth.w	ip, r5
 800b06e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b072:	fb0c f702 	mul.w	r7, ip, r2
 800b076:	429f      	cmp	r7, r3
 800b078:	fa04 f400 	lsl.w	r4, r4, r0
 800b07c:	d907      	bls.n	800b08e <__divdi3+0x1a6>
 800b07e:	195b      	adds	r3, r3, r5
 800b080:	f102 30ff 	add.w	r0, r2, #4294967295
 800b084:	d274      	bcs.n	800b170 <__divdi3+0x288>
 800b086:	429f      	cmp	r7, r3
 800b088:	d972      	bls.n	800b170 <__divdi3+0x288>
 800b08a:	3a02      	subs	r2, #2
 800b08c:	442b      	add	r3, r5
 800b08e:	1bdf      	subs	r7, r3, r7
 800b090:	b289      	uxth	r1, r1
 800b092:	fbb7 f8fe 	udiv	r8, r7, lr
 800b096:	fb0e 7318 	mls	r3, lr, r8, r7
 800b09a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b09e:	fb0c f708 	mul.w	r7, ip, r8
 800b0a2:	429f      	cmp	r7, r3
 800b0a4:	d908      	bls.n	800b0b8 <__divdi3+0x1d0>
 800b0a6:	195b      	adds	r3, r3, r5
 800b0a8:	f108 31ff 	add.w	r1, r8, #4294967295
 800b0ac:	d25c      	bcs.n	800b168 <__divdi3+0x280>
 800b0ae:	429f      	cmp	r7, r3
 800b0b0:	d95a      	bls.n	800b168 <__divdi3+0x280>
 800b0b2:	f1a8 0802 	sub.w	r8, r8, #2
 800b0b6:	442b      	add	r3, r5
 800b0b8:	1bd8      	subs	r0, r3, r7
 800b0ba:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800b0be:	e78e      	b.n	800afde <__divdi3+0xf6>
 800b0c0:	f1c2 0320 	rsb	r3, r2, #32
 800b0c4:	fa2c f103 	lsr.w	r1, ip, r3
 800b0c8:	fa0e fe02 	lsl.w	lr, lr, r2
 800b0cc:	fa20 f703 	lsr.w	r7, r0, r3
 800b0d0:	ea41 0e0e 	orr.w	lr, r1, lr
 800b0d4:	fa08 f002 	lsl.w	r0, r8, r2
 800b0d8:	fa28 f103 	lsr.w	r1, r8, r3
 800b0dc:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800b0e0:	4338      	orrs	r0, r7
 800b0e2:	fbb1 f8f5 	udiv	r8, r1, r5
 800b0e6:	0c03      	lsrs	r3, r0, #16
 800b0e8:	fb05 1118 	mls	r1, r5, r8, r1
 800b0ec:	fa1f f78e 	uxth.w	r7, lr
 800b0f0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800b0f4:	fb07 f308 	mul.w	r3, r7, r8
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	fa0c fc02 	lsl.w	ip, ip, r2
 800b0fe:	d909      	bls.n	800b114 <__divdi3+0x22c>
 800b100:	eb11 010e 	adds.w	r1, r1, lr
 800b104:	f108 39ff 	add.w	r9, r8, #4294967295
 800b108:	d230      	bcs.n	800b16c <__divdi3+0x284>
 800b10a:	428b      	cmp	r3, r1
 800b10c:	d92e      	bls.n	800b16c <__divdi3+0x284>
 800b10e:	f1a8 0802 	sub.w	r8, r8, #2
 800b112:	4471      	add	r1, lr
 800b114:	1ac9      	subs	r1, r1, r3
 800b116:	b280      	uxth	r0, r0
 800b118:	fbb1 f3f5 	udiv	r3, r1, r5
 800b11c:	fb05 1113 	mls	r1, r5, r3, r1
 800b120:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800b124:	fb07 f703 	mul.w	r7, r7, r3
 800b128:	428f      	cmp	r7, r1
 800b12a:	d908      	bls.n	800b13e <__divdi3+0x256>
 800b12c:	eb11 010e 	adds.w	r1, r1, lr
 800b130:	f103 30ff 	add.w	r0, r3, #4294967295
 800b134:	d216      	bcs.n	800b164 <__divdi3+0x27c>
 800b136:	428f      	cmp	r7, r1
 800b138:	d914      	bls.n	800b164 <__divdi3+0x27c>
 800b13a:	3b02      	subs	r3, #2
 800b13c:	4471      	add	r1, lr
 800b13e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800b142:	1bc9      	subs	r1, r1, r7
 800b144:	fba3 890c 	umull	r8, r9, r3, ip
 800b148:	4549      	cmp	r1, r9
 800b14a:	d309      	bcc.n	800b160 <__divdi3+0x278>
 800b14c:	d005      	beq.n	800b15a <__divdi3+0x272>
 800b14e:	2200      	movs	r2, #0
 800b150:	e71d      	b.n	800af8e <__divdi3+0xa6>
 800b152:	4696      	mov	lr, r2
 800b154:	e6fe      	b.n	800af54 <__divdi3+0x6c>
 800b156:	4613      	mov	r3, r2
 800b158:	e711      	b.n	800af7e <__divdi3+0x96>
 800b15a:	4094      	lsls	r4, r2
 800b15c:	4544      	cmp	r4, r8
 800b15e:	d2f6      	bcs.n	800b14e <__divdi3+0x266>
 800b160:	3b01      	subs	r3, #1
 800b162:	e7f4      	b.n	800b14e <__divdi3+0x266>
 800b164:	4603      	mov	r3, r0
 800b166:	e7ea      	b.n	800b13e <__divdi3+0x256>
 800b168:	4688      	mov	r8, r1
 800b16a:	e7a5      	b.n	800b0b8 <__divdi3+0x1d0>
 800b16c:	46c8      	mov	r8, r9
 800b16e:	e7d1      	b.n	800b114 <__divdi3+0x22c>
 800b170:	4602      	mov	r2, r0
 800b172:	e78c      	b.n	800b08e <__divdi3+0x1a6>
 800b174:	4613      	mov	r3, r2
 800b176:	e70a      	b.n	800af8e <__divdi3+0xa6>
 800b178:	3b02      	subs	r3, #2
 800b17a:	e757      	b.n	800b02c <__divdi3+0x144>
 800b17c:	f1a8 0802 	sub.w	r8, r8, #2
 800b180:	442f      	add	r7, r5
 800b182:	e73f      	b.n	800b004 <__divdi3+0x11c>

0800b184 <__udivdi3>:
 800b184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d144      	bne.n	800b216 <__udivdi3+0x92>
 800b18c:	428a      	cmp	r2, r1
 800b18e:	4615      	mov	r5, r2
 800b190:	4604      	mov	r4, r0
 800b192:	d94f      	bls.n	800b234 <__udivdi3+0xb0>
 800b194:	fab2 f782 	clz	r7, r2
 800b198:	460e      	mov	r6, r1
 800b19a:	b14f      	cbz	r7, 800b1b0 <__udivdi3+0x2c>
 800b19c:	f1c7 0320 	rsb	r3, r7, #32
 800b1a0:	40b9      	lsls	r1, r7
 800b1a2:	fa20 f603 	lsr.w	r6, r0, r3
 800b1a6:	fa02 f507 	lsl.w	r5, r2, r7
 800b1aa:	430e      	orrs	r6, r1
 800b1ac:	fa00 f407 	lsl.w	r4, r0, r7
 800b1b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b1b4:	0c23      	lsrs	r3, r4, #16
 800b1b6:	fbb6 f0fe 	udiv	r0, r6, lr
 800b1ba:	b2af      	uxth	r7, r5
 800b1bc:	fb0e 6110 	mls	r1, lr, r0, r6
 800b1c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b1c4:	fb07 f100 	mul.w	r1, r7, r0
 800b1c8:	4299      	cmp	r1, r3
 800b1ca:	d909      	bls.n	800b1e0 <__udivdi3+0x5c>
 800b1cc:	195b      	adds	r3, r3, r5
 800b1ce:	f100 32ff 	add.w	r2, r0, #4294967295
 800b1d2:	f080 80ec 	bcs.w	800b3ae <__udivdi3+0x22a>
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	f240 80e9 	bls.w	800b3ae <__udivdi3+0x22a>
 800b1dc:	3802      	subs	r0, #2
 800b1de:	442b      	add	r3, r5
 800b1e0:	1a5a      	subs	r2, r3, r1
 800b1e2:	b2a4      	uxth	r4, r4
 800b1e4:	fbb2 f3fe 	udiv	r3, r2, lr
 800b1e8:	fb0e 2213 	mls	r2, lr, r3, r2
 800b1ec:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800b1f0:	fb07 f703 	mul.w	r7, r7, r3
 800b1f4:	4297      	cmp	r7, r2
 800b1f6:	d908      	bls.n	800b20a <__udivdi3+0x86>
 800b1f8:	1952      	adds	r2, r2, r5
 800b1fa:	f103 31ff 	add.w	r1, r3, #4294967295
 800b1fe:	f080 80d8 	bcs.w	800b3b2 <__udivdi3+0x22e>
 800b202:	4297      	cmp	r7, r2
 800b204:	f240 80d5 	bls.w	800b3b2 <__udivdi3+0x22e>
 800b208:	3b02      	subs	r3, #2
 800b20a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b20e:	2600      	movs	r6, #0
 800b210:	4631      	mov	r1, r6
 800b212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b216:	428b      	cmp	r3, r1
 800b218:	d847      	bhi.n	800b2aa <__udivdi3+0x126>
 800b21a:	fab3 f683 	clz	r6, r3
 800b21e:	2e00      	cmp	r6, #0
 800b220:	d148      	bne.n	800b2b4 <__udivdi3+0x130>
 800b222:	428b      	cmp	r3, r1
 800b224:	d302      	bcc.n	800b22c <__udivdi3+0xa8>
 800b226:	4282      	cmp	r2, r0
 800b228:	f200 80cd 	bhi.w	800b3c6 <__udivdi3+0x242>
 800b22c:	2001      	movs	r0, #1
 800b22e:	4631      	mov	r1, r6
 800b230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b234:	b912      	cbnz	r2, 800b23c <__udivdi3+0xb8>
 800b236:	2501      	movs	r5, #1
 800b238:	fbb5 f5f2 	udiv	r5, r5, r2
 800b23c:	fab5 f885 	clz	r8, r5
 800b240:	f1b8 0f00 	cmp.w	r8, #0
 800b244:	d177      	bne.n	800b336 <__udivdi3+0x1b2>
 800b246:	1b4a      	subs	r2, r1, r5
 800b248:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b24c:	b2af      	uxth	r7, r5
 800b24e:	2601      	movs	r6, #1
 800b250:	fbb2 f0fe 	udiv	r0, r2, lr
 800b254:	0c23      	lsrs	r3, r4, #16
 800b256:	fb0e 2110 	mls	r1, lr, r0, r2
 800b25a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800b25e:	fb07 f300 	mul.w	r3, r7, r0
 800b262:	428b      	cmp	r3, r1
 800b264:	d907      	bls.n	800b276 <__udivdi3+0xf2>
 800b266:	1949      	adds	r1, r1, r5
 800b268:	f100 32ff 	add.w	r2, r0, #4294967295
 800b26c:	d202      	bcs.n	800b274 <__udivdi3+0xf0>
 800b26e:	428b      	cmp	r3, r1
 800b270:	f200 80ba 	bhi.w	800b3e8 <__udivdi3+0x264>
 800b274:	4610      	mov	r0, r2
 800b276:	1ac9      	subs	r1, r1, r3
 800b278:	b2a4      	uxth	r4, r4
 800b27a:	fbb1 f3fe 	udiv	r3, r1, lr
 800b27e:	fb0e 1113 	mls	r1, lr, r3, r1
 800b282:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800b286:	fb07 f703 	mul.w	r7, r7, r3
 800b28a:	42a7      	cmp	r7, r4
 800b28c:	d908      	bls.n	800b2a0 <__udivdi3+0x11c>
 800b28e:	1964      	adds	r4, r4, r5
 800b290:	f103 32ff 	add.w	r2, r3, #4294967295
 800b294:	f080 808f 	bcs.w	800b3b6 <__udivdi3+0x232>
 800b298:	42a7      	cmp	r7, r4
 800b29a:	f240 808c 	bls.w	800b3b6 <__udivdi3+0x232>
 800b29e:	3b02      	subs	r3, #2
 800b2a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b4:	f1c6 0420 	rsb	r4, r6, #32
 800b2b8:	fa22 f504 	lsr.w	r5, r2, r4
 800b2bc:	40b3      	lsls	r3, r6
 800b2be:	432b      	orrs	r3, r5
 800b2c0:	fa20 fc04 	lsr.w	ip, r0, r4
 800b2c4:	fa01 f706 	lsl.w	r7, r1, r6
 800b2c8:	fa21 f504 	lsr.w	r5, r1, r4
 800b2cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b2d0:	ea4c 0707 	orr.w	r7, ip, r7
 800b2d4:	fbb5 f8fe 	udiv	r8, r5, lr
 800b2d8:	0c39      	lsrs	r1, r7, #16
 800b2da:	fb0e 5518 	mls	r5, lr, r8, r5
 800b2de:	fa1f fc83 	uxth.w	ip, r3
 800b2e2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800b2e6:	fb0c f108 	mul.w	r1, ip, r8
 800b2ea:	42a9      	cmp	r1, r5
 800b2ec:	fa02 f206 	lsl.w	r2, r2, r6
 800b2f0:	d904      	bls.n	800b2fc <__udivdi3+0x178>
 800b2f2:	18ed      	adds	r5, r5, r3
 800b2f4:	f108 34ff 	add.w	r4, r8, #4294967295
 800b2f8:	d367      	bcc.n	800b3ca <__udivdi3+0x246>
 800b2fa:	46a0      	mov	r8, r4
 800b2fc:	1a6d      	subs	r5, r5, r1
 800b2fe:	b2bf      	uxth	r7, r7
 800b300:	fbb5 f4fe 	udiv	r4, r5, lr
 800b304:	fb0e 5514 	mls	r5, lr, r4, r5
 800b308:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800b30c:	fb0c fc04 	mul.w	ip, ip, r4
 800b310:	458c      	cmp	ip, r1
 800b312:	d904      	bls.n	800b31e <__udivdi3+0x19a>
 800b314:	18c9      	adds	r1, r1, r3
 800b316:	f104 35ff 	add.w	r5, r4, #4294967295
 800b31a:	d35c      	bcc.n	800b3d6 <__udivdi3+0x252>
 800b31c:	462c      	mov	r4, r5
 800b31e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800b322:	ebcc 0101 	rsb	r1, ip, r1
 800b326:	fba4 2302 	umull	r2, r3, r4, r2
 800b32a:	4299      	cmp	r1, r3
 800b32c:	d348      	bcc.n	800b3c0 <__udivdi3+0x23c>
 800b32e:	d044      	beq.n	800b3ba <__udivdi3+0x236>
 800b330:	4620      	mov	r0, r4
 800b332:	2600      	movs	r6, #0
 800b334:	e76c      	b.n	800b210 <__udivdi3+0x8c>
 800b336:	f1c8 0420 	rsb	r4, r8, #32
 800b33a:	fa01 f308 	lsl.w	r3, r1, r8
 800b33e:	fa05 f508 	lsl.w	r5, r5, r8
 800b342:	fa20 f704 	lsr.w	r7, r0, r4
 800b346:	40e1      	lsrs	r1, r4
 800b348:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b34c:	431f      	orrs	r7, r3
 800b34e:	fbb1 f6fe 	udiv	r6, r1, lr
 800b352:	0c3a      	lsrs	r2, r7, #16
 800b354:	fb0e 1116 	mls	r1, lr, r6, r1
 800b358:	fa1f fc85 	uxth.w	ip, r5
 800b35c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800b360:	fb0c f206 	mul.w	r2, ip, r6
 800b364:	429a      	cmp	r2, r3
 800b366:	fa00 f408 	lsl.w	r4, r0, r8
 800b36a:	d907      	bls.n	800b37c <__udivdi3+0x1f8>
 800b36c:	195b      	adds	r3, r3, r5
 800b36e:	f106 31ff 	add.w	r1, r6, #4294967295
 800b372:	d237      	bcs.n	800b3e4 <__udivdi3+0x260>
 800b374:	429a      	cmp	r2, r3
 800b376:	d935      	bls.n	800b3e4 <__udivdi3+0x260>
 800b378:	3e02      	subs	r6, #2
 800b37a:	442b      	add	r3, r5
 800b37c:	1a9b      	subs	r3, r3, r2
 800b37e:	b2bf      	uxth	r7, r7
 800b380:	fbb3 f0fe 	udiv	r0, r3, lr
 800b384:	fb0e 3310 	mls	r3, lr, r0, r3
 800b388:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b38c:	fb0c f100 	mul.w	r1, ip, r0
 800b390:	4299      	cmp	r1, r3
 800b392:	d907      	bls.n	800b3a4 <__udivdi3+0x220>
 800b394:	195b      	adds	r3, r3, r5
 800b396:	f100 32ff 	add.w	r2, r0, #4294967295
 800b39a:	d221      	bcs.n	800b3e0 <__udivdi3+0x25c>
 800b39c:	4299      	cmp	r1, r3
 800b39e:	d91f      	bls.n	800b3e0 <__udivdi3+0x25c>
 800b3a0:	3802      	subs	r0, #2
 800b3a2:	442b      	add	r3, r5
 800b3a4:	1a5a      	subs	r2, r3, r1
 800b3a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800b3aa:	4667      	mov	r7, ip
 800b3ac:	e750      	b.n	800b250 <__udivdi3+0xcc>
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	e716      	b.n	800b1e0 <__udivdi3+0x5c>
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	e729      	b.n	800b20a <__udivdi3+0x86>
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	e772      	b.n	800b2a0 <__udivdi3+0x11c>
 800b3ba:	40b0      	lsls	r0, r6
 800b3bc:	4290      	cmp	r0, r2
 800b3be:	d2b7      	bcs.n	800b330 <__udivdi3+0x1ac>
 800b3c0:	1e60      	subs	r0, r4, #1
 800b3c2:	2600      	movs	r6, #0
 800b3c4:	e724      	b.n	800b210 <__udivdi3+0x8c>
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	e722      	b.n	800b210 <__udivdi3+0x8c>
 800b3ca:	42a9      	cmp	r1, r5
 800b3cc:	d995      	bls.n	800b2fa <__udivdi3+0x176>
 800b3ce:	f1a8 0802 	sub.w	r8, r8, #2
 800b3d2:	441d      	add	r5, r3
 800b3d4:	e792      	b.n	800b2fc <__udivdi3+0x178>
 800b3d6:	458c      	cmp	ip, r1
 800b3d8:	d9a0      	bls.n	800b31c <__udivdi3+0x198>
 800b3da:	3c02      	subs	r4, #2
 800b3dc:	4419      	add	r1, r3
 800b3de:	e79e      	b.n	800b31e <__udivdi3+0x19a>
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	e7df      	b.n	800b3a4 <__udivdi3+0x220>
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	e7c9      	b.n	800b37c <__udivdi3+0x1f8>
 800b3e8:	3802      	subs	r0, #2
 800b3ea:	4429      	add	r1, r5
 800b3ec:	e743      	b.n	800b276 <__udivdi3+0xf2>
 800b3ee:	bf00      	nop

0800b3f0 <Driver_USBD0>:
 800b3f0:	228d 0800 22f5 0800 2531 0800 256d 0800     ."..."..1%..m%..
 800b400:	25a1 0800 25d5 0800 27e5 0800 2a05 0800     .%...%...'...*..
 800b410:	2cf9 0800 2831 0800 2639 0800 26c5 0800     .,..1(..9&...&..
 800b420:	273d 0800 297d 0800 2e69 0800 2e95 0800     ='..})..i.......

0800b430 <device_descriptor>:
 800b430:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 800b440:	0100 0000                                   ....

0800b444 <configuration_descriptor>:
 800b444:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 800b454:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 800b464:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 800b474:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....

0800b484 <language_string>:
 800b484:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

0800b4ec <manufacturer_string>:
 800b4ec:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 800b4fc:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

0800b554 <product_string>:
 800b554:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...

0800b5bc <I2C_MASTER_0_sda_pin_config>:
 800b5bc:	00c8 0000 0001 0000 0000 0000               ............

0800b5c8 <I2C_MASTER_0_scl_pin_config>:
 800b5c8:	00c8 0000 0001 0000 0000 0000               ............

0800b5d4 <I2C_MASTER_0_channel_config>:
 800b5d4:	03e8 0000 0000 0000                         ........

0800b5dc <I2C_MASTER_0_config>:
 800b5dc:	b5d4 0800 6359 0800 6335 0800 6315 0800     ....Yc..5c...c..
 800b5ec:	68a9 0800 68c1 0800 0000 0000 0000 0000     .h...h..........
 800b5fc:	0000 0000 0000 0404 6263 0000               ........cb..

0800b608 <BTN_1>:
 800b608:	8100 4802 0000 0000 0000 0000 0000 0000     ...H............
 800b618:	000e 0000                                   ....

0800b61c <LED_2>:
 800b61c:	8100 4802 0080 0000 0000 0001 0000 0000     ...H............
 800b62c:	0000 0000                                   ....

0800b630 <LED_1>:
 800b630:	8100 4802 0080 0000 0000 0001 0000 0000     ...H............
 800b640:	0001 0000 0250 0104 0000 0001 0000 0000     ....P...........
 800b650:	0000 0001 0101 0101 3154 3d20 2520 2064     ........T1 = %d 
 800b660:	7c7c 5420 2032 203d 6425 000a 6625 0a20     || T2 = %d..%f .
 800b670:	0000 0000 0043 0000                         ....C...

0800b678 <blanks.6794>:
 800b678:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800b688:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 800b698:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 800b6a8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 800b6b8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 800b6c8:	0030 0000                                   0...

0800b6cc <zeroes.6795>:
 800b6cc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 800b6dc:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
 800b6ec:	4f50 4953 0058 0000 002e 0000               POSIX.......

0800b6f8 <__mprec_tens>:
 800b6f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 800b708:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 800b718:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 800b728:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 800b738:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 800b748:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 800b758:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 800b768:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 800b778:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 800b788:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 800b798:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 800b7a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 800b7b8:	9db4 79d9 7843 44ea                         ...yCx.D

0800b7c0 <__mprec_bigtens>:
 800b7c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 800b7d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 800b7e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

0800b7e8 <p05.5265>:
 800b7e8:	0005 0000 0019 0000 007d 0000               ........}...
